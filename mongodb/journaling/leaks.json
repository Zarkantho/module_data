[
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/dur_preplogbuffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/dur_preplogbuffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp", 
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/dur_preplogbuffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/stacktrace.cpp", 
            "src/mongo/util/stacktrace.cpp"
        ], 
        "symbol": "mongo::printStackTrace(std::ostream&)", 
        "object": "src/mongo/db/dur_preplogbuffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/dur_preplogbuffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/dur_preplogbuffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/dur_preplogbuffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/dur_preplogbuffer.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/dur_preplogbuffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/dur_preplogbuffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp", 
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/dur_preplogbuffer.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/dur_preplogbuffer.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::path_traits::dispatch(boost::filesystem3::directory_entry const&, std::string&, std::codecvt<wchar_t, char, __mbstate_t> const&)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::operator/=(char const*)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp", 
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::File()", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp", 
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::open(char const*, bool, bool)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp", 
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::dir_itr_close(void*&, void*&)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/progress_meter.cpp"
        ], 
        "symbol": "mongo::ProgressMeter::reset(unsigned long long, int, int)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp", 
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::write(unsigned long long, char const*, unsigned int)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/paths.cpp", 
            "src/mongo/util/paths.cpp"
        ], 
        "symbol": "mongo::flushMyDirectory(boost::filesystem3::path const&)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::directory_iterator_construct(boost::filesystem3::directory_iterator&, boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp", 
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp", 
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::filename() const", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::directory_iterator_increment(boost::filesystem3::directory_iterator&, boost::system::error_code*)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/progress_meter.cpp"
        ], 
        "symbol": "mongo::ProgressMeter::hit(int)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::MongoFile::notifyPostFlush", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::remove(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::wasserted(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/compress.cpp"
        ], 
        "symbol": "mongo::rawCompress(char const*, unsigned long, char*, unsigned long*)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp", 
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::truncate(unsigned long long)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::status(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::operator/=(boost::filesystem3::path const&)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp", 
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::is_open() const", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp", 
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::freeSpace(std::string const&)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::create_directory(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::file_size(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::inShutdown()", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp", 
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::fsync() const", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::UserException", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp", 
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::~File()", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp", 
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::time_t_to_String_short(long)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp", 
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp", 
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::len()", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/compress.cpp"
        ], 
        "symbol": "mongo::maxCompressedLength(unsigned long)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/random.cpp", 
            "src/mongo/platform/random.cpp"
        ], 
        "symbol": "mongo::SecureRandom::create()", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::m_erase_redundant_separator(unsigned long)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::MongoFile::notifyPreFlush", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::m_append_separator_if_needed()", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp", 
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::read(unsigned long long, char*, unsigned int)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::rename(boost::filesystem3::path const&, boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp", 
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::wchar_t_codecvt_facet()", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp", 
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp", 
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::_timeTracker", 
        "object": "src/mongo/db/dur_journal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/util/alignedbuilder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/util/alignedbuilder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::wasserted(char const*, char const*, unsigned int)", 
        "object": "src/mongo/util/alignedbuilder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/dur_commitjob.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/dur_commitjob.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/stacktrace.cpp", 
            "src/mongo/util/stacktrace.cpp"
        ], 
        "symbol": "mongo::printStackTrace(std::ostream&)", 
        "object": "src/mongo/db/dur_commitjob.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/dur_commitjob.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/synchronization.cpp", 
            "src/mongo/util/concurrency/synchronization.cpp"
        ], 
        "symbol": "mongo::NotifyAll::NotifyAll()", 
        "object": "src/mongo/db/dur_commitjob.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp", 
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/dur_commitjob.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::wasserted(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/dur_commitjob.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/dur_commitjob.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/dur_commitjob.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/dur_commitjob.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/dur_commitjob.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/dur_commitjob.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/dur_commitjob.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/dur_commitjob.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/synchronization.cpp", 
            "src/mongo/util/concurrency/synchronization.cpp"
        ], 
        "symbol": "mongo::NotifyAll::now()", 
        "object": "src/mongo/db/dur_commitjob.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/stacktrace.cpp", 
            "src/mongo/util/stacktrace.cpp"
        ], 
        "symbol": "mongo::printStackTrace(std::ostream&)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/server_status.cpp"
        ], 
        "symbol": "mongo::ServerStatusSection::ServerStatusSection(std::string const&)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::mongoAbort(char const*)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::shutdown()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::UpgradeToExclusive::UpgradeToExclusive()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalRead::GlobalRead(int)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp", 
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp", 
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::UpgradeToExclusive::~UpgradeToExclusive()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::atLeastReadLocked(mongo::StringData const&)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalRead::~GlobalRead()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::upgrade()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::MongoFile::flushAll(bool)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/fsync.cpp"
        ], 
        "symbol": "mongo::filesLockedFsync", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::downgrade()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::LockMongoFilesShared::mmmutex", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp", 
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/synchronization.cpp", 
            "src/mongo/util/concurrency/synchronization.cpp"
        ], 
        "symbol": "mongo::NotifyAll::awaitBeyondNow()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::isW()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::isLocked()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::MongoFile::getAllFiles()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp", 
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::inShutdown()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/synchronization.cpp", 
            "src/mongo/util/concurrency/synchronization.cpp"
        ], 
        "symbol": "mongo::NotifyAll::notifyAll(unsigned long long)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp", 
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::errnoWithDescription(int)", 
        "object": "src/mongo/db/dur.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::path_traits::dispatch(boost::filesystem3::directory_entry const&, std::string&, std::codecvt<wchar_t, char, __mbstate_t> const&)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "mongo::StartupTest::StartupTest()", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp", 
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::dir_itr_close(void*&, void*&)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::LockMongoFilesShared::mmmutex", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "typeinfo for mongo::StartupTest", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp", 
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::getcurns", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::directory_iterator_construct(boost::filesystem3::directory_iterator&, boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::close()", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/kill_current_op.cpp"
        ], 
        "symbol": "mongo::KillCurrentOp::checkForInterrupt(bool)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogstreamBuilder const&)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::status(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::directory_iterator_increment(boost::filesystem3::directory_iterator&, boost::system::error_code*)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::mapWithOptions(char const*, int)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/compress.cpp"
        ], 
        "symbol": "mongo::uncompress(char const*, unsigned long, std::string*)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::MemoryMappedFile()", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp", 
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::hexdump(char const*, unsigned int)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::LockMongoFilesShared::era", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::killCurrentOp", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::wchar_t_codecvt_facet()", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::file_size(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::MongoFile::flushAll(bool)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::MongoFileFinder::findByPath(std::string const&) const", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "mongo::StartupTest::~StartupTest()", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::m_erase_redundant_separator(unsigned long)", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::m_append_separator_if_needed()", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::filename() const", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "vtable for mongo::MemoryMappedFile", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/dur_recover.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "mongo::StartupTest::~StartupTest()", 
        "object": "src/mongo/util/logfile.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/util/logfile.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/util/logfile.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/util/logfile.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "mongo::StartupTest::StartupTest()", 
        "object": "src/mongo/util/logfile.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/util/logfile.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/util/logfile.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/util/logfile.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "typeinfo for mongo::StartupTest", 
        "object": "src/mongo/util/logfile.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "mongo::g_minOSPageSizeBytes", 
        "object": "src/mongo/util/logfile.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/util/logfile.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/util/logfile.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/paths.cpp", 
            "src/mongo/util/paths.cpp"
        ], 
        "symbol": "mongo::flushMyDirectory(boost::filesystem3::path const&)", 
        "object": "src/mongo/util/logfile.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/util/logfile.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/util/logfile.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/util/logfile.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/util/logfile.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp", 
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::errnoWithDescription(int)", 
        "object": "src/mongo/util/logfile.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file_allocator.cpp", 
            "src/mongo/util/file_allocator.cpp"
        ], 
        "symbol": "mongo::ensureParentDirCreated(boost::filesystem3::path const&)", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp", 
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::File()", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp", 
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::open(char const*, bool, bool)", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp", 
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::write(unsigned long long, char const*, unsigned int)", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/paths.cpp", 
            "src/mongo/util/paths.cpp"
        ], 
        "symbol": "mongo::flushMyDirectory(boost::filesystem3::path const&)", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::status(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::remove(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp", 
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::~File()", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::wchar_t_codecvt_facet()", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::_deleteDataFiles(char const*)", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp", 
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::is_open() const", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp", 
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::fsync() const", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::m_erase_redundant_separator(unsigned long)", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::m_append_separator_if_needed()", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/durop.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/dur_writetodatafiles.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp", 
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/dur_writetodatafiles.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/dur_writetodatafiles.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/dur_writetodatafiles.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/dur_writetodatafiles.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/dur_writetodatafiles.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/dur_writetodatafiles.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp", 
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/dur_writetodatafiles.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/dur_writetodatafiles.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp", 
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::map(char const*, unsigned long long&, int)", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::prepareFlush()", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::close()", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::createPrivateMap()", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::mapWithOptions(char const*, int)", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "vtable for mongo::MemoryMappedFile", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::MemoryMappedFile()", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::LockMongoFilesShared::era", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "typeinfo for mongo::MemoryMappedFile", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::somethingWriteLocked()", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::flush(bool)", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::LockMongoFilesShared::mmmutex", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::remapPrivateView(void*)", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::inShutdown()", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/storage/durable_mapped_file.cpp"
    }
]