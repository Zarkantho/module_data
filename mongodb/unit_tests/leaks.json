[
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSetMember::WorkingSetMember()", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSetMember::~WorkingSetMember()", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_service.cpp"
        ], 
        "symbol": "mongo::getGlobalFailPointRegistry()", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::~WorkingSet()", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/mock_stage.cpp"
        ], 
        "symbol": "mongo::MockStage::pushBack(mongo::WorkingSetMember const&)", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/fetch.cpp"
        ], 
        "symbol": "mongo::FetchStage::FetchStage(mongo::WorkingSet*, mongo::PlanStage*, mongo::MatchExpression const*)", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::Record::touch(bool) const", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/mock_stage.cpp"
        ], 
        "symbol": "mongo::MockStage::MockStage(mongo::WorkingSet*)", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/expression_parser.cpp"
        ], 
        "symbol": "mongo::MatchExpressionParser::_parse(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSetMember::getFieldDotted(std::string const&, mongo::BSONElement*) const", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::setMode(mongo::FailPoint::Mode, unsigned int, mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::getIterator(mongo::DiskLoc const&, bool, mongo::CollectionScanParams::Direction const&) const", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_registry.cpp"
        ], 
        "symbol": "mongo::FailPointRegistry::getFailPoint(std::string const&) const", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::rec() const", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::createCollection(mongo::StringData const&, bool, mongo::BSONObj const*, bool)", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSetMember::hasObj() const", 
        "object": "src/mongo/dbtests/query_stage_fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/health.cpp"
        ], 
        "symbol": "mongo::rsLog", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/sync_source_feedback.cpp"
        ], 
        "symbol": "vtable for mongo::SyncSourceFeedback", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs_sync.cpp"
        ], 
        "symbol": "mongo::replset::SyncTail::SyncTail(mongo::replset::BackgroundSyncInterface*)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::killCurrentOp", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/optime.cpp"
        ], 
        "symbol": "mongo::OpTime::now(mongo::mutex::scoped_lock const&)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs_sync.cpp"
        ], 
        "symbol": "mongo::replset::InitialSync::~InitialSync()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::_finishInit()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::shutdown()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(std::string const&)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::enter(mongo::Client::Context*)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs_sync.cpp"
        ], 
        "symbol": "typeinfo for mongo::replset::InitialSync", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::TempRelease::TempRelease()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs_sync.cpp"
        ], 
        "symbol": "mongo::replset::SyncTail::oplogApplication()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::MsgAssertionException", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/oplog.cpp"
        ], 
        "symbol": "mongo::applyOperation_inlock(mongo::BSONObj const&, bool, bool)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs.cpp"
        ], 
        "symbol": "mongo::ReplSet::ReplSet()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::insertDocument(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/replication_server_status.cpp"
        ], 
        "symbol": "mongo::replSettings", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::go()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/bgsync.cpp"
        ], 
        "symbol": "mongo::replset::BackgroundSyncInterface::~BackgroundSyncInterface()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::~BackgroundJob()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::kill(bool*)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::operator<<(mongo::logger::Tee*)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::reset(mongo::HostAndPort const&, int)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_builder.cpp"
        ], 
        "symbol": "mongo::IndexBuilder::restoreIndexes(std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs_sync.cpp"
        ], 
        "symbol": "mongo::replset::InitialSync::InitialSync(mongo::replset::BackgroundSyncInterface*)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::count(std::string const&, mongo::BSONObj const&, int, int, int)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::TempRelease::~TempRelease()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::userCreateNS(char const*, mongo::BSONObj, std::string&, bool, bool*)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs_sync.cpp"
        ], 
        "symbol": "mongo::replset::InitialSync::oplogApplication(mongo::BSONObj const&, mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/oplog.cpp"
        ], 
        "symbol": "mongo::createOplog()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_pool.cpp"
        ], 
        "symbol": "mongo::threadpool::ThreadPool::~ThreadPool()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/kill_current_op.cpp"
        ], 
        "symbol": "mongo::KillCurrentOp::notifyAllWaiters()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/sync.cpp"
        ], 
        "symbol": "vtable for mongo::Sync", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs_config.cpp"
        ], 
        "symbol": "mongo::ReplSetConfig::make(mongo::BSONObj, bool)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "typeinfo for mongo::BackgroundJob", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::nested()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::isLocked()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/optime.cpp"
        ], 
        "symbol": "mongo::OpTime::m", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/ondisk/namespace_index.cpp"
        ], 
        "symbol": "mongo::NamespaceIndex::details(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs_sync.cpp"
        ], 
        "symbol": "mongo::replset::SyncTail::syncApply(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::findCommand(std::string const&)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::getHostName()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/bgsync.cpp"
        ], 
        "symbol": "typeinfo for mongo::replset::BackgroundSyncInterface", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/sync.cpp"
        ], 
        "symbol": "mongo::Sync::getMissingDoc(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/optime.cpp"
        ], 
        "symbol": "mongo::OpTime::_now()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::dropCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::DBWrite(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::createCollection(mongo::StringData const&, bool, mongo::BSONObj const*, bool)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs.cpp"
        ], 
        "symbol": "mongo::theReplSet", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs_sync.cpp"
        ], 
        "symbol": "mongo::replset::multiInitialSyncApply(std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&, mongo::replset::SyncTail*)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::BackgroundJob(bool)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/sync.cpp"
        ], 
        "symbol": "mongo::Sync::shouldRetry(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/dbtests/replsettests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index/btree_based_builder.cpp"
        ], 
        "symbol": "mongo::BtreeBasedBuilder::getComparison(int, mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::createCollection(std::string const&, long long, bool, int, mongo::BSONObj*)", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::insertDocument(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::kill(bool*)", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/extsort.cpp"
        ], 
        "symbol": "mongo::BSONObjExternalSorter::BSONObjExternalSorter(mongo::ExternalSortComparison const*, long)", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/extsorttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::simpleCommand(std::string const&, mongo::BSONObj*, std::string const&)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndexes(std::string const&)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::~WorkingSet()", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndex(std::string const&, mongo::BSONObj)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::deregisterRunner(mongo::Runner*)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::remove(std::string const&, mongo::Query, bool)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::registerRunner(mongo::Runner*)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/collection_scan.cpp"
        ], 
        "symbol": "mongo::CollectionScan::CollectionScan(mongo::CollectionScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/single_solution_runner.cpp"
        ], 
        "symbol": "mongo::SingleSolutionRunner::SingleSolutionRunner(mongo::CanonicalQuery*, mongo::QuerySolution*, mongo::PlanStage*, mongo::WorkingSet*)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::ensureIndex(std::string const&, mongo::BSONObj, bool, std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/canonical_query.cpp"
        ], 
        "symbol": "mongo::CanonicalQuery::canonicalize(std::string const&, mongo::BSONObj const&, mongo::CanonicalQuery**)", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/runner_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/exception_filter_win32.cpp"
        ], 
        "symbol": "mongo::setWindowsUnhandledExceptionFilter()", 
        "object": "src/mongo/unittest/unittest_main.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/initializer.cpp"
        ], 
        "symbol": "mongo::runGlobalInitializersOrDie(int, char const* const*, char const* const*)", 
        "object": "src/mongo/unittest/unittest_main.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::check()", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::selectAndCheckNode(mongo::ReadPreference, mongo::TagSet*, bool*)", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::appendInfo(mongo::BSONObjBuilder&) const", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::TagSet::isExhausted() const", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::get(std::string const&, bool)", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::cleanup()", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_connectHook", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::createIfNeeded(std::string const&, std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> > const&)", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::selectNode(std::vector<mongo::ReplicaSetMonitor::Node, std::allocator<mongo::ReplicaSetMonitor::Node> > const&, mongo::ReadPreference, mongo::TagSet*, int, mongo::HostAndPort*, bool*)", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::TagSet::TagSet(mongo::TagSet const&)", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_connectHookMutex", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::Node::toBSON() const", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::TagSet::getCurrentTag() const", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::TagSet::next()", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::TagSet::reset()", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::Node::matchesTag(mongo::BSONObj const&) const", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::TagSet::TagSet(mongo::BSONArray const&)", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::clearPool()", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::Node::isCompatible(mongo::ReadPreference, mongo::TagSet const*) const", 
        "object": "src/mongo/dbtests/replica_set_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptionsParsed", 
        "object": "src/mongo/dbtests/framework_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::validate()", 
        "object": "src/mongo/dbtests/framework_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/dbtests/framework_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/dbtests/framework_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/dbtests/framework_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/dbtests/framework_options_init.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::operator/=(boost::filesystem3::path const&)", 
        "object": "src/mongo/unittest/temp_dir_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::create_directory(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/unittest/temp_dir_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/unittest/temp_dir_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/unittest/temp_dir_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::wchar_t_codecvt_facet()", 
        "object": "src/mongo/unittest/temp_dir_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::status(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/unittest/temp_dir_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::update(std::string const&, mongo::Query, mongo::BSONObj, bool, bool)", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastErrorHolder::release()", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::extractFields(mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastErrorHolder::reset(mongo::LastError*)", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/mutable_bson_test_utils.cpp"
        ], 
        "symbol": "mongo::mutablebson::checkEqualNoOrdering(mongo::mutablebson::Document const&, mongo::mutablebson::Document const&)", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::~Document()", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::hint(std::string const&)", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::Query(char const*)", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::lastError", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::Document(mongo::BSONObj const&, mongo::mutablebson::Document::InPlaceMode)", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getPrevError()", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/mutable_bson_test_utils.cpp"
        ], 
        "symbol": "mongo::mutablebson::operator<<(std::ostream&, mongo::mutablebson::UnorderedWrapper_Obj const&)", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/updatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::numIndexesReady() const", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::createIndex(mongo::BSONObj, bool)", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::dropCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::createCollection(mongo::StringData const&, bool, mongo::BSONObj const*, bool)", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getDescriptor(int)", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/indexcatalogtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::simpleCommand(std::string const&, mongo::BSONObj*, std::string const&)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::update(std::string const&, mongo::Query, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::setRunCommandHook(boost::function<void (mongo::BSONObjBuilder*)>)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::update(std::string const&, mongo::Query, mongo::BSONObj, bool, bool)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::reIndex(std::string const&)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_chunk.cpp"
        ], 
        "symbol": "mongo::ChunkType::max", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_chunk.cpp"
        ], 
        "symbol": "mongo::ChunkType::toBSON() const", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_chunk.cpp"
        ], 
        "symbol": "mongo::ChunkType::min", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_collection.cpp"
        ], 
        "symbol": "mongo::CollectionType::toBSON() const", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "non-virtual thunk to mongo::DBDirectClient::say(mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::killCursor(long long)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::remove(std::string const&, mongo::Query, int)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastErrorDetailed(std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::resetIndexCache()", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&, int)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::INVALID_SOCK_CREATION_TIME", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::gotShardName(std::string const&)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::count(std::string const&, mongo::BSONObj const&, int, int, int)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::shardingState", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::resetMetadata(std::string const&)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::getCollectionMetadata(std::string const&)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::runCommand(std::string const&, mongo::BSONObj const&, mongo::BSONObj&, int)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::resetShardingState()", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndex(std::string const&, mongo::BSONObj)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientInterface::findOne(std::string const&, mongo::Query const&, mongo::BSONObj const*, int)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "non-virtual thunk to mongo::DBDirectClient::call(mongo::Message&, mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/collection_metadata.cpp"
        ], 
        "symbol": "mongo::CollectionMetadata::getNextChunk(mongo::BSONObj const&, mongo::ChunkType*) const", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::logout(std::string const&, mongo::BSONObj&)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::call(mongo::Message&, mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::refreshMetadataNow(std::string const&, mongo::ChunkVersion*)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::_lookupAvailableOptions()", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::remove(std::string const&, mongo::Query, bool)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_collection.cpp"
        ], 
        "symbol": "mongo::CollectionType::ns", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_chunk.cpp"
        ], 
        "symbol": "mongo::ChunkType::~ChunkType()", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::initialize(std::string const&)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::getMore(std::string const&, long long, int, int)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_chunk.cpp"
        ], 
        "symbol": "mongo::ChunkType::ChunkType()", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndex(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndexes(std::string const&)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::query(std::string const&, mongo::Query, int, int, mongo::BSONObj const*, int, int)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_chunk.cpp"
        ], 
        "symbol": "mongo::ChunkType::shard", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::query(boost::function<void (mongo::BSONObj const&)>, std::string const&, mongo::Query, mongo::BSONObj const*, int)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_collection.cpp"
        ], 
        "symbol": "mongo::CollectionType::ConfigNS", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::Chunk::genID(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::query(boost::function<void (mongo::DBClientCursorBatchIterator&)>, std::string const&, mongo::Query, mongo::BSONObj const*, int)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_chunk.cpp"
        ], 
        "symbol": "mongo::ChunkType::ConfigNS", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::ensureIndex(std::string const&, mongo::BSONObj, bool, std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_collection.cpp"
        ], 
        "symbol": "mongo::CollectionType::isValid(std::string*) const", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::_auth(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getIndexes(std::string const&)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::say(mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_merge.cpp"
        ], 
        "symbol": "mongo::mergeChunks(mongo::NamespaceString const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::OID const&, bool, std::string*)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::isMaster(bool&, mongo::BSONObj*)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_collection.cpp"
        ], 
        "symbol": "mongo::CollectionType::~CollectionType()", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastErrorDetailed(bool, bool, int, int)", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_collection.cpp"
        ], 
        "symbol": "mongo::CollectionType::CollectionType()", 
        "object": "src/mongo/dbtests/merge_chunk_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::SpinLock()", 
        "object": "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "typeinfo for mongo::SocketException", 
        "object": "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "vtable for mongo::SocketException", 
        "object": "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::~SpinLock()", 
        "object": "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/dbtests/chunk_manager_targeter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/chunk_manager_targeter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk_manager_targeter.cpp"
        ], 
        "symbol": "mongo::ChunkManagerTargeter::ChunkManagerTargeter()", 
        "object": "src/mongo/dbtests/chunk_manager_targeter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/chunk_manager_targeter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk_manager_targeter.cpp"
        ], 
        "symbol": "vtable for mongo::ChunkManagerTargeter", 
        "object": "src/mongo/dbtests/chunk_manager_targeter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/chunk_manager_targeter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/chunk_manager_targeter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/chunk_manager_targeter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/chunk_manager_targeter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/dbtests/chunk_manager_targeter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/chunk_manager_targeter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/chunk_manager_targeter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "mongo::Expression::parseExpression(mongo::BSONElement, mongo::VariablesParseState const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/field_path.cpp"
        ], 
        "symbol": "mongo::FieldPath::FieldPath(std::string const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "mongo::ExpressionNary::addOperand(boost::intrusive_ptr<mongo::Expression> const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "mongo::ExpressionConstant::create(mongo::Value const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::compare(mongo::Value const&, mongo::Value const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::ValueStorage::putDocument(mongo::Document const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "mongo::ExpressionCoerceToBool::create(boost::intrusive_ptr<mongo::Expression> const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "typeinfo for mongo::ExpressionNary", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::DocumentStorage::clone() const", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::getDocument() const", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "vtable for mongo::DocumentStorage", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Value const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::DocumentStorage::findField(mongo::StringData) const", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::Document::toBson() const", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "vtable for mongo::ExpressionAdd", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::operator<<(mongo::BSONObjBuilderValueStream&, mongo::Value const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "mongo::ExpressionNary::addDependencies(std::set<std::string, std::less<std::string>, std::allocator<std::string> >&, std::vector<std::string, std::allocator<std::string> >*) const", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "mongo::ExpressionFieldPath::create(std::string const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::Value(mongo::BSONElement const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "mongo::ExpressionObject::create()", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "mongo::ExpressionNary::serialize(bool) const", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "vtable for mongo::ExpressionAnd", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "mongo::Expression::parseOperand(mongo::BSONElement, mongo::VariablesParseState const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "mongo::ExpressionConstant::parse(mongo::BSONElement, mongo::VariablesParseState const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "mongo::ExpressionObject::addField(mongo::FieldPath const&, boost::intrusive_ptr<mongo::Expression> const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::ValueStorage::putVector(mongo::RCVector const*)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "mongo::Expression::ObjectCtx::ObjectCtx(int)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "mongo::ExpressionObject::includePath(std::string const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "mongo::ExpressionObject::createRoot()", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::addToBsonObj(mongo::BSONObjBuilder*, mongo::StringData) const", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::ValueStorage::putString(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "typeinfo for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "mongo::ExpressionObject::addToDocument(mongo::MutableDocument&, mongo::Document const&, mongo::Variables*) const", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONNULL", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "mongo::Expression::parseObject(mongo::BSONObj, mongo::Expression::ObjectCtx*, mongo::VariablesParseState const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::toString() const", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::DocumentStorage::appendField(mongo::StringData)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::Document::Document(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "mongo::ExpressionNary::optimize()", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/expression.cpp"
        ], 
        "symbol": "vtable for mongo::ExpressionNary", 
        "object": "src/mongo/dbtests/expressiontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::~WorkingSet()", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/fetch.cpp"
        ], 
        "symbol": "mongo::FetchStage::FetchStage(mongo::WorkingSet*, mongo::PlanStage*, mongo::MatchExpression const*)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/merge_sort.cpp"
        ], 
        "symbol": "mongo::MergeSortStage::addChild(mongo::PlanStage*)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::findIndexByKeyPattern(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_executor.cpp"
        ], 
        "symbol": "mongo::PlanExecutor::~PlanExecutor()", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getDescriptor(int)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSetMember::getFieldDotted(std::string const&, mongo::BSONElement*) const", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/merge_sort.cpp"
        ], 
        "symbol": "mongo::MergeSortStage::MergeSortStage(mongo::MergeSortStageParams const&, mongo::WorkingSet*)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::getIterator(mongo::DiskLoc const&, bool, mongo::CollectionScanParams::Direction const&) const", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_executor.cpp"
        ], 
        "symbol": "mongo::PlanExecutor::getNext(mongo::BSONObj*, mongo::DiskLoc*)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/index_scan.cpp"
        ], 
        "symbol": "mongo::IndexScan::IndexScan(mongo::IndexScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::ensureIndex(std::string const&, mongo::BSONObj, bool, std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_executor.cpp"
        ], 
        "symbol": "mongo::PlanExecutor::PlanExecutor(mongo::WorkingSet*, mongo::PlanStage*)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::createCollection(mongo::StringData const&, bool, mongo::BSONObj const*, bool)", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/query_stage_merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::lastError", 
        "object": "src/mongo/dbtests/directclienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/dbtests/directclienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/directclienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::createCollection(std::string const&, long long, bool, int, mongo::BSONObj*)", 
        "object": "src/mongo/dbtests/directclienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/directclienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/directclienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/directclienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/directclienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/directclienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/directclienttests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/directclienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastErrorHolder::reset(mongo::LastError*)", 
        "object": "src/mongo/dbtests/directclienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/directclienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastError(bool, bool, int, int)", 
        "object": "src/mongo/dbtests/directclienttests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/directclienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/directclienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/directclienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/directclienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::update(std::string const&, mongo::Query, mongo::BSONObj, bool, bool)", 
        "object": "src/mongo/dbtests/profile_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/profile_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/profile_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/profile_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/profile_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::runCommand(std::string const&, mongo::BSONObj const&, mongo::BSONObj&, int)", 
        "object": "src/mongo/dbtests/profile_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/profile_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/profile_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/profile_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/profile_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/profile_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/profile_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/profile_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::query(std::string const&, mongo::Query, int, int, mongo::BSONObj const*, int, int)", 
        "object": "src/mongo/dbtests/profile_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/profile_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/oplogstart.cpp"
        ], 
        "symbol": "mongo::OplogStart::_backwardsScanTime", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::~WorkingSet()", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/oplogstart.cpp"
        ], 
        "symbol": "mongo::OplogStart::OplogStart(std::string const&, mongo::MatchExpression*, mongo::WorkingSet*)", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::ensureHaveIdIndex()", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::createCollection(mongo::StringData const&, bool, mongo::BSONObj const*, bool)", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/canonical_query.cpp"
        ], 
        "symbol": "mongo::CanonicalQuery::canonicalize(std::string const&, mongo::BSONObj const&, mongo::CanonicalQuery**)", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/dbtests/oplogstarttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/data_file.cpp"
        ], 
        "symbol": "mongo::DataFile::maxSize()", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::insertDocument(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/ondisk/namespace_index.cpp"
        ], 
        "symbol": "mongo::NamespaceIndex::details(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/extent.cpp"
        ], 
        "symbol": "mongo::Extent::maxSize()", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/extent_manager.cpp"
        ], 
        "symbol": "mongo::ExtentManager::quantizeExtentSize(int)", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/insert.cpp"
        ], 
        "symbol": "mongo::fixDocumentForInsert(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/extent.cpp"
        ], 
        "symbol": "mongo::Extent::initialSize(int)", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/extent.cpp"
        ], 
        "symbol": "mongo::Extent::followupSize(int, int)", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getOrCreateCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::dropCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/dbtests/pdfiletests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/field_path.cpp"
        ], 
        "symbol": "mongo::FieldPath::FieldPath(std::string const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::deserializeForSorter(mongo::BufReader&, mongo::Value::SorterDeserializeSettings const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::compare(mongo::Value const&, mongo::Value const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::ValueStorage::putDocument(mongo::Document const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONUndefined", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::hash_combine(unsigned long&) const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::MutableDocument::getNestedField(mongo::FieldPath const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::Value(mongo::BSONArray const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::DocumentStorage::clone() const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::getDocument() const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "vtable for mongo::DocumentStorage", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::Document::compare(mongo::Document const&, mongo::Document const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::Document::getNestedField(mongo::FieldPath const&, std::vector<mongo::Position, std::allocator<mongo::Position> >*) const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init(std::string const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::MINKEY", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Value const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::DocumentStorage::findField(mongo::StringData) const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::getDouble() const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::Document::toBson() const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::addToBsonObj(mongo::BSONObjBuilder*, mongo::StringData) const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::coerceToBool() const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::getWidestNumeric(mongo::BSONType, mongo::BSONType)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::Value(mongo::BSONElement const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::MAXKEY", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::coerceToInt() const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::coerceToTimestamp() const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::MutableDocument::getNestedField(std::vector<mongo::Position, std::allocator<mongo::Position> > const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::operator[](unsigned long) const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::coerceToDate() const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::coerceToDouble() const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::ValueStorage::putRegEx(mongo::BSONRegEx const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::ValueStorage::putVector(mongo::RCVector const*)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::addToBsonArray(mongo::BSONArrayBuilder*) const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::time_t_to_String_short(long)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::serializeForSorter(mongo::_BufBuilder<mongo::TrivialAllocator>&) const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::ValueStorage::putString(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::jsTime()", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::Document::toString() const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::Value(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::operator[](mongo::StringData) const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONNULL", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::coerceToLong() const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::Document::serializeForSorter(mongo::_BufBuilder<mongo::TrivialAllocator>&) const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::RCString::create(mongo::StringData)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::Document::deserializeForSorter(mongo::BufReader&, mongo::Document::SorterDeserializeSettings const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::toString() const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::DocumentStorage::appendField(mongo::StringData)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::Document::Document(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::coerceToString() const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::Document::hash_combine(unsigned long&) const", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/dbtests/documenttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/accumulator_first.cpp"
        ], 
        "symbol": "mongo::AccumulatorFirst::create()", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::compare(mongo::Value const&, mongo::Value const&)", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::ValueStorage::putDocument(mongo::Document const&)", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::DocumentStorage::clone() const", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::getDocument() const", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "vtable for mongo::DocumentStorage", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/accumulator_min_max.cpp"
        ], 
        "symbol": "mongo::AccumulatorMinMax::createMax()", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Value const&)", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::DocumentStorage::findField(mongo::StringData) const", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::getDouble() const", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::Document::toBson() const", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/accumulator_last.cpp"
        ], 
        "symbol": "mongo::AccumulatorLast::create()", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/accumulator_min_max.cpp"
        ], 
        "symbol": "mongo::AccumulatorMinMax::createMin()", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::addToBsonObj(mongo::BSONObjBuilder*, mongo::StringData) const", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/accumulator_avg.cpp"
        ], 
        "symbol": "mongo::AccumulatorAvg::create()", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/accumulator_sum.cpp"
        ], 
        "symbol": "mongo::AccumulatorSum::create()", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::DocumentStorage::appendField(mongo::StringData)", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/accumulatortests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/dbclient_multi_command.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientMultiCommand", 
        "object": "src/mongo/dbtests/dbclient_multi_command_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/dbclient_multi_command.cpp"
        ], 
        "symbol": "mongo::DBClientMultiCommand::~DBClientMultiCommand()", 
        "object": "src/mongo/dbtests/dbclient_multi_command_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::ErrorCodes::Error)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBRead::DBRead(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::DBWrite(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBRead::~DBRead()", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::remove(std::string const&, mongo::Query, bool)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::query(std::string const&, mongo::Query, int, int, mongo::BSONObj const*, int, int)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::getLocsInRange(mongo::KeyRange const&, long long, std::set<mongo::DiskLoc, std::less<mongo::DiskLoc>, std::allocator<mongo::DiskLoc> >*, long long*, long long*)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::hint(mongo::BSONObj)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::removeRange(mongo::KeyRange const&, bool, bool, mongo::Helpers::RemoveSaver*, bool, bool)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/dbtests/dbhelper_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSetMember::WorkingSetMember()", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSetMember::~WorkingSetMember()", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/sort.cpp"
        ], 
        "symbol": "mongo::SortStage::SortStage(mongo::SortStageParams const&, mongo::WorkingSet*, mongo::PlanStage*)", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::~WorkingSet()", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/mock_stage.cpp"
        ], 
        "symbol": "mongo::MockStage::pushBack(mongo::WorkingSetMember const&)", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/fetch.cpp"
        ], 
        "symbol": "mongo::FetchStage::FetchStage(mongo::WorkingSet*, mongo::PlanStage*, mongo::MatchExpression const*)", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woSortOrder(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/mock_stage.cpp"
        ], 
        "symbol": "mongo::MockStage::MockStage(mongo::WorkingSet*)", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_executor.cpp"
        ], 
        "symbol": "mongo::PlanExecutor::~PlanExecutor()", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::getIterator(mongo::DiskLoc const&, bool, mongo::CollectionScanParams::Direction const&) const", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_executor.cpp"
        ], 
        "symbol": "mongo::PlanExecutor::getNext(mongo::BSONObj*, mongo::DiskLoc*)", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSetMember::hasLoc() const", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_executor.cpp"
        ], 
        "symbol": "mongo::PlanExecutor::PlanExecutor(mongo::WorkingSet*, mongo::PlanStage*)", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::createCollection(mongo::StringData const&, bool, mongo::BSONObj const*, bool)", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSetMember::hasObj() const", 
        "object": "src/mongo/dbtests/query_stage_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::update(std::string const&, mongo::Query, mongo::BSONObj, bool, bool)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::jsonString(mongo::JsonStringFormat, int) const", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(std::string const&)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::tlogLevel", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::eval(std::string const&, std::string const&, mongo::BSONObj&, mongo::BSONElement&, mongo::BSONObj*)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init(std::string const&)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/scripting/engine.cpp"
        ], 
        "symbol": "mongo::Scope::invoke(char const*, mongo::BSONObj const*, mongo::BSONObj const*, int)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/message_log_domain.cpp"
        ], 
        "symbol": "mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>::attachAppender(std::auto_ptr<mongo::logger::Appender<mongo::logger::MessageEventEphemeral> >)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/scripting/engine.cpp"
        ], 
        "symbol": "mongo::globalScriptEngine", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientInterface::findOne(std::string const&, mongo::Query const&, mongo::BSONObj const*, int)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::Query(char const*)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::eval(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbeval.cpp"
        ], 
        "symbol": "mongo::dbEval(std::string const&, mongo::BSONObj&, mongo::BSONObjBuilder&, std::string&)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/scripting/engine_v8.cpp"
        ], 
        "symbol": "mongo::ScriptEngine::setup()", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<double>(mongo::StringData const&, int, double*)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/message_log_domain.cpp"
        ], 
        "symbol": "mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>::detachAppender(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>::AppenderHandle)", 
        "object": "src/mongo/dbtests/jstests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source_sort.cpp"
        ], 
        "symbol": "typeinfo for mongo::DocumentSourceSort", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::compare(mongo::Value const&, mongo::Value const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::shutdown()", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source_limit.cpp"
        ], 
        "symbol": "mongo::DocumentSourceLimit::createFromBson(mongo::BSONElement, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source_cursor.cpp"
        ], 
        "symbol": "mongo::DocumentSourceCursor::getLimit() const", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(std::string const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::getcurns", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogstreamBuilder const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::getDocument() const", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source_match.cpp"
        ], 
        "symbol": "mongo::DocumentSourceMatch::redactSafePortion() const", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source_match.cpp"
        ], 
        "symbol": "mongo::DocumentSourceMatch::getQuery() const", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source.cpp"
        ], 
        "symbol": "typeinfo for mongo::DocumentSource", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Value const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source_bson_array.cpp"
        ], 
        "symbol": "mongo::DocumentSourceBsonArray::create(mongo::BSONObj const&, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::DocumentStorage::findField(mongo::StringData) const", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/interrupt_status_mongod.cpp"
        ], 
        "symbol": "mongo::InterruptStatusMongod::status", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::Document::toBson() const", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::find(std::string const&, std::set<long long, std::less<long long>, std::allocator<long long> >&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lockstate.cpp"
        ], 
        "symbol": "mongo::Acquiring::~Acquiring()", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source_unwind.cpp"
        ], 
        "symbol": "mongo::DocumentSourceUnwind::createFromBson(mongo::BSONElement, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::operator[](mongo::StringData) const", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::~ClientCursor()", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/canonical_query.cpp"
        ], 
        "symbol": "mongo::CanonicalQuery::canonicalize(std::string const&, mongo::BSONObj const&, mongo::CanonicalQuery**)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source_limit.cpp"
        ], 
        "symbol": "mongo::DocumentSourceLimit::create(boost::intrusive_ptr<mongo::ExpressionContext> const&, long long)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source.cpp"
        ], 
        "symbol": "mongo::DocumentSource::depsToProjection(std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source_geo_near.cpp"
        ], 
        "symbol": "mongo::DocumentSourceGeoNear::create(boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source_group.cpp"
        ], 
        "symbol": "mongo::DocumentSourceGroup::createFromBson(mongo::BSONElement, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lockstate.cpp"
        ], 
        "symbol": "mongo::Acquiring::Acquiring(mongo::Lock::ScopedLock*, mongo::LockState&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::join()", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source_project.cpp"
        ], 
        "symbol": "mongo::DocumentSourceProject::createFromBson(mongo::BSONElement, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source_cursor.cpp"
        ], 
        "symbol": "mongo::DocumentSourceCursor::create(std::string const&, long long, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "typeinfo for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source_sort.cpp"
        ], 
        "symbol": "mongo::DocumentSourceSort::createFromBson(mongo::BSONElement, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::ClientCursor(mongo::Runner*, int, mongo::BSONObj)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source_match.cpp"
        ], 
        "symbol": "mongo::DocumentSourceMatch::createFromBson(mongo::BSONElement, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::isReadLocked()", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/get_runner.cpp"
        ], 
        "symbol": "mongo::getRunner(mongo::CanonicalQuery*, mongo::Runner**, unsigned long)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::operator<<(mongo::BSONObjBuilderValueStream&, mongo::Document const&)", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source_match.cpp"
        ], 
        "symbol": "typeinfo for mongo::DocumentSourceMatch", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/dbtests/documentsourcetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::simpleCommand(std::string const&, mongo::BSONObj*, std::string const&)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::update(std::string const&, mongo::Query, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::setRunCommandHook(boost::function<void (mongo::BSONObjBuilder*)>)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::update(std::string const&, mongo::Query, mongo::BSONObj, bool, bool)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "typeinfo for mongo::SocketException", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::reIndex(std::string const&)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::Socket::isStillConnected()", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastErrorDetailed(std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndexes(std::string const&)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::resetIndexCache()", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::checkResponse(char const*, int, bool*, std::string*)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::count(std::string const&, mongo::BSONObj const&, int, int, int)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndex(std::string const&, mongo::BSONObj)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientInterface::findOne(std::string const&, mongo::Query const&, mongo::BSONObj const*, int)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "non-virtual thunk to mongo::DBClientConnection::recv(mongo::Message&)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::logout(std::string const&, mongo::BSONObj&)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientConnection", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::getMore(std::string const&, long long, int, int)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::_numConnections", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "non-virtual thunk to mongo::DBClientConnection::checkResponse(char const*, int, bool*, std::string*)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndex(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::_auth(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::ensureIndex(std::string const&, mongo::BSONObj, bool, std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getIndexes(std::string const&)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::_lookupAvailableOptions()", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBClientConnection", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::isMaster(bool&, mongo::BSONObj*)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::recv(mongo::Message&)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastErrorDetailed(bool, bool, int, int)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_connection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/mock_replica_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/mock_replica_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/mock_replica_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/mock_replica_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/mock_replica_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/mock_replica_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceExceptions", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::update(std::string const&, mongo::Query, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::setRunCommandHook(boost::function<void (mongo::BSONObjBuilder*)>)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::update(std::string const&, mongo::Query, mongo::BSONObj, bool, bool)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::simpleCommand(std::string const&, mongo::BSONObj*, std::string const&)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::reIndex(std::string const&)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_database.cpp"
        ], 
        "symbol": "mongo::DatabaseType::ConfigNS", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "non-virtual thunk to mongo::DBDirectClient::say(mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::killCursor(long long)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::remove(std::string const&, mongo::Query, int)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_changelog.cpp"
        ], 
        "symbol": "mongo::ChangelogType::ConfigNS", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastErrorDetailed(std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_shard.cpp"
        ], 
        "symbol": "mongo::ShardType::ConfigNS", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndexes(std::string const&)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::resetIndexCache()", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_connectHook", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&, int)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::count(std::string const&, mongo::BSONObj const&, int, int, int)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::INVALID_SOCK_CREATION_TIME", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::runCommand(std::string const&, mongo::BSONObj const&, mongo::BSONObj&, int)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndex(std::string const&, mongo::BSONObj)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientInterface::findOne(std::string const&, mongo::Query const&, mongo::BSONObj const*, int)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "non-virtual thunk to mongo::DBDirectClient::call(mongo::Message&, mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::logout(std::string const&, mongo::BSONObj&)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::call(mongo::Message&, mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::_lookupAvailableOptions()", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::remove(std::string const&, mongo::Query, bool)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_connectHookMutex", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getCollectionNames(std::string const&)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::getMore(std::string const&, long long, int, int)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_chunk.cpp"
        ], 
        "symbol": "mongo::ChunkType::ns", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_mongos.cpp"
        ], 
        "symbol": "mongo::MongosType::ConfigNS", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_config_version.cpp"
        ], 
        "symbol": "mongo::VersionType::ConfigNS", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndex(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::query(std::string const&, mongo::Query, int, int, mongo::BSONObj const*, int, int)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::say(mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_chunk.cpp"
        ], 
        "symbol": "mongo::ChunkType::DEPRECATED_lastmod", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::query(boost::function<void (mongo::BSONObj const&)>, std::string const&, mongo::Query, mongo::BSONObj const*, int)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_collection.cpp"
        ], 
        "symbol": "mongo::CollectionType::ConfigNS", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::query(boost::function<void (mongo::DBClientCursorBatchIterator&)>, std::string const&, mongo::Query, mongo::BSONObj const*, int)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_chunk.cpp"
        ], 
        "symbol": "mongo::ChunkType::ConfigNS", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::ensureIndex(std::string const&, mongo::BSONObj, bool, std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::_auth(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getIndexes(std::string const&)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/distlock.cpp"
        ], 
        "symbol": "mongo::setLockPingerEnabled(bool)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::isMaster(bool&, mongo::BSONObj*)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastErrorDetailed(bool, bool, int, int)", 
        "object": "src/mongo/dbtests/config_server_fixture.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "typeinfo for mongo::SocketException", 
        "object": "src/mongo/dbtests/mock_dbclient_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/mock_dbclient_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/mock_dbclient_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/dbtests/mock_dbclient_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/mock_dbclient_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/mock_dbclient_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/mock_dbclient_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/mock_dbclient_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/dbtests/mock_dbclient_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/dbtests/dbtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
        ], 
        "symbol": "mongo::AuthzManagerExternalStateMock::AuthzManagerExternalStateMock()", 
        "object": "src/mongo/dbtests/dbtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/initializer.cpp"
        ], 
        "symbol": "mongo::runGlobalInitializersOrDie(int, char const* const*, char const* const*)", 
        "object": "src/mongo/dbtests/dbtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::testCommandsEnabled", 
        "object": "src/mongo/dbtests/dbtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/dbtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::AuthorizationManager(mongo::AuthzManagerExternalState*)", 
        "object": "src/mongo/dbtests/dbtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp"
        ], 
        "symbol": "mongo::StartupTest::runTests()", 
        "object": "src/mongo/dbtests/dbtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/exception_filter_win32.cpp"
        ], 
        "symbol": "mongo::setWindowsUnhandledExceptionFilter()", 
        "object": "src/mongo/dbtests/dbtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::setGlobalAuthorizationManager(mongo::AuthorizationManager*)", 
        "object": "src/mongo/dbtests/dbtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/dbtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/field_path.cpp"
        ], 
        "symbol": "mongo::FieldPath::FieldPath(std::string const&)", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::compare(mongo::Value const&, mongo::Value const&)", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::parseCommand(std::string&, mongo::BSONObj const&, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(std::string const&)", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/field_path.cpp"
        ], 
        "symbol": "mongo::FieldPath::getPath(bool) const", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::Value(mongo::BSONElement const&)", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Value const&)", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::DocumentStorage::findField(mongo::StringData) const", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/interrupt_status_mongod.cpp"
        ], 
        "symbol": "mongo::InterruptStatusMongod::status", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/field_path.cpp"
        ], 
        "symbol": "mongo::FieldPath::FieldPath(std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/field_path.cpp"
        ], 
        "symbol": "mongo::FieldPath::tail() const", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::serialize() const", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::splitForSharded()", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "typeinfo for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/pipelinetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::Record::_accessing() const", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::ext() const", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::DurableInterface::_impl", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::userCreateNS(char const*, mongo::BSONObj, std::string&, bool, bool*)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::~WorkingSet()", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::remove(std::string const&, mongo::Query, bool)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/expression_parser.cpp"
        ], 
        "symbol": "mongo::MatchExpressionParser::_parse(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_executor.cpp"
        ], 
        "symbol": "mongo::PlanExecutor::~PlanExecutor()", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/collection_scan.cpp"
        ], 
        "symbol": "mongo::CollectionScan::CollectionScan(mongo::CollectionScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::writingWithExtra()", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/ondisk/namespace_index.cpp"
        ], 
        "symbol": "mongo::NamespaceIndex::details(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_executor.cpp"
        ], 
        "symbol": "mongo::PlanExecutor::getNext(mongo::BSONObj*, mongo::DiskLoc*)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::rec() const", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSetMember::hasLoc() const", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_executor.cpp"
        ], 
        "symbol": "mongo::PlanExecutor::PlanExecutor(mongo::WorkingSet*, mongo::PlanStage*)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::dropCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/dbtests/query_stage_collscan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/gridfs.cpp"
        ], 
        "symbol": "mongo::GridFS::~GridFS()", 
        "object": "src/mongo/dbtests/gridfstest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/gridfs.cpp"
        ], 
        "symbol": "mongo::GridFS::setChunkSize(unsigned int)", 
        "object": "src/mongo/dbtests/gridfstest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/gridfstest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/gridfstest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/gridfs.cpp"
        ], 
        "symbol": "mongo::GridFS::GridFS(mongo::DBClientBase&, std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/gridfstest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/dbtests/gridfstest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/gridfs.cpp"
        ], 
        "symbol": "mongo::GridFS::getChunkSize() const", 
        "object": "src/mongo/dbtests/gridfstest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/gridfstest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/gridfstest.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/gridfstest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/gridfstest.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/gridfstest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/gridfstest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::isEmpty() const", 
        "object": "src/mongo/dbtests/framework_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::getAllOptions(std::vector<mongo::optionenvironment::OptionDescription, std::allocator<mongo::optionenvironment::OptionDescription> >*) const", 
        "object": "src/mongo/dbtests/framework_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/dbtests/framework_options_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/framework_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/dbtests/framework_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::equal(mongo::optionenvironment::Value const&) const", 
        "object": "src/mongo/dbtests/framework_options_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/framework_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/framework_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::simpleCommand(std::string const&, mongo::BSONObj*, std::string const&)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::reIndex(std::string const&)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::createCollection(std::string const&, long long, bool, int, mongo::BSONObj*)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::DBWrite(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndexes(std::string const&)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::count(std::string const&, mongo::BSONObj const&, int, int, int)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndex(std::string const&, mongo::BSONObj)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::runCommand(std::string const&, mongo::BSONObj const&, mongo::BSONObj&, int)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::query(std::string const&, mongo::Query, int, int, mongo::BSONObj const*, int, int)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/ondisk/namespace_index.cpp"
        ], 
        "symbol": "mongo::NamespaceIndex::details(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_fillServers(std::string)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::ensureIndex(std::string const&, mongo::BSONObj, bool, std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getIndexes(std::string const&)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/clienttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceExceptions", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::update(std::string const&, mongo::Query, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::setRunCommandHook(boost::function<void (mongo::BSONObjBuilder*)>)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::update(std::string const&, mongo::Query, mongo::BSONObj, bool, bool)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::simpleCommand(std::string const&, mongo::BSONObj*, std::string const&)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::loadExistingRanges(std::string const&)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::reIndex(std::string const&)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_chunk.cpp"
        ], 
        "symbol": "mongo::ChunkType::max", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_chunk.cpp"
        ], 
        "symbol": "mongo::ChunkType::min", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "non-virtual thunk to mongo::DBDirectClient::say(mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::killCursor(long long)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::remove(std::string const&, mongo::Query, int)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastErrorDetailed(std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shard.cpp"
        ], 
        "symbol": "mongo::Shard::setAddress(mongo::ConnectionString const&)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndexes(std::string const&)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::resetIndexCache()", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_connectHook", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::ChunkManager(std::string const&, mongo::ShardKeyPattern const&, bool)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&, int)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::LTE", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::count(std::string const&, mongo::BSONObj const&, int, int, int)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::INVALID_SOCK_CREATION_TIME", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndex(std::string const&, mongo::BSONObj)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientInterface::findOne(std::string const&, mongo::Query const&, mongo::BSONObj const*, int)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "non-virtual thunk to mongo::DBDirectClient::call(mongo::Message&, mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardkey.cpp"
        ], 
        "symbol": "mongo::ShardKeyPattern::ShardKeyPattern(mongo::BSONObj)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shard.cpp"
        ], 
        "symbol": "mongo::Shard::_setAddr(std::string const&)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::logout(std::string const&, mongo::BSONObj&)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::call(mongo::Message&, mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::_lookupAvailableOptions()", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::remove(std::string const&, mongo::Query, bool)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_connectHookMutex", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::runCommand(std::string const&, mongo::BSONObj const&, mongo::BSONObj&, int)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::getMore(std::string const&, long long, int, int)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_chunk.cpp"
        ], 
        "symbol": "mongo::ChunkType::ns", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::createFirstChunks(std::string const&, mongo::Shard const&, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const*, std::vector<mongo::Shard, std::allocator<mongo::Shard> > const*)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndex(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::query(std::string const&, mongo::Query, int, int, mongo::BSONObj const*, int, int)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_chunk.cpp"
        ], 
        "symbol": "mongo::ChunkType::shard", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_chunk.cpp"
        ], 
        "symbol": "mongo::ChunkType::DEPRECATED_lastmod", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::query(boost::function<void (mongo::BSONObj const&)>, std::string const&, mongo::Query, mongo::BSONObj const*, int)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::ChunkManager(boost::shared_ptr<mongo::ChunkManager const>)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::query(boost::function<void (mongo::DBClientCursorBatchIterator&)>, std::string const&, mongo::Query, mongo::BSONObj const*, int)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_chunk.cpp"
        ], 
        "symbol": "mongo::ChunkType::ConfigNS", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::getVersion() const", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::ensureIndex(std::string const&, mongo::BSONObj, bool, std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::_auth(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getIndexes(std::string const&)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::say(mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::isMaster(bool&, mongo::BSONObj*)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastErrorDetailed(bool, bool, int, int)", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::GT", 
        "object": "src/mongo/dbtests/sharding.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/unittest/unittest_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/unittest/unittest_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index/btree_based_builder.cpp"
        ], 
        "symbol": "mongo::BtreeBasedBuilder::getComparison(int, mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::killCurrentOp", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::ErrorCodes::Error)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::createCollection(std::string const&, long long, bool, int, mongo::BSONObj*)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator!=(mongo::ErrorCodes::Error) const", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::ensureIndex(char const*, mongo::BSONObj, bool, char const*)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/kill_current_op.cpp"
        ], 
        "symbol": "mongo::KillCurrentOp::reset()", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::Record::_accessing() const", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastError(bool, bool, int, int)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::DurableInterface::_impl", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::reset()", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::insertDocument(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::IndexBuildBlock::~IndexBuildBlock()", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::IndexBuildBlock::success()", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::kill(bool*)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::allocateSpaceForANewRecord(char const*, mongo::NamespaceDetails*, int, bool)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::count(std::string const&, mongo::BSONObj const&, int, int, int)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::findIndexByName(mongo::StringData const&, bool)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::ErrorCodes::Error) const", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::dropAllIndexes(bool)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::IndexBuildBlock::IndexBuildBlock(mongo::IndexCatalog*, mongo::StringData const&, mongo::DiskLoc const&)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::findIndexByName(mongo::StringData const&, bool)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/kill_current_op.cpp"
        ], 
        "symbol": "mongo::KillCurrentOp::killAll()", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::fixIndexKey(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index/btree_based_builder.cpp"
        ], 
        "symbol": "mongo::BtreeBasedBuilder::doDropDups(mongo::Collection*, std::set<mongo::DiskLoc, std::less<mongo::DiskLoc>, std::allocator<mongo::DiskLoc> > const&, bool)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::setMessage(char const*, std::string, unsigned long long, int)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/ondisk/namespace_index.cpp"
        ], 
        "symbol": "mongo::NamespaceIndex::details(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index/btree_based_builder.cpp"
        ], 
        "symbol": "mongo::BtreeBasedBuilder::addKeysToPhaseOne(mongo::Collection*, mongo::IndexDescriptor const*, mongo::BSONObj const&, mongo::SortPhaseOne*, mongo::ProgressMeter*, bool)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::getIterator(mongo::DiskLoc const&, bool, mongo::CollectionScanParams::Direction const&) const", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::addRecordToRecListInExtent(mongo::Record*, mongo::DiskLoc)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::createIndex(mongo::BSONObj, bool)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::rec() const", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::ensureIndex(std::string const&, mongo::BSONObj, bool, std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::dropCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::createCollection(mongo::StringData const&, bool, mongo::BSONObj const*, bool)", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/indexupdatetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/dbtests/commandtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/commandtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/commandtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::ensureIndex(std::string const&, mongo::BSONObj, bool, std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/commandtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/commandtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/commandtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/commandtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/commandtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/dbtests/commandtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::runCommand(std::string const&, mongo::BSONObj const&, mongo::BSONObj&, int)", 
        "object": "src/mongo/dbtests/commandtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/commandtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/commandtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/dbtests/commandtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/commandtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/commandtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/commandtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/commandtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/commandtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/commandtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/dbtests/mock/mock_conn_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/dbtests/mock/mock_conn_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/dbtests/mock/mock_conn_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/dbtests/mock/mock_conn_registry.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file_allocator.cpp"
        ], 
        "symbol": "mongo::FileAllocator::waitUntilFinished() const", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file_allocator.cpp"
        ], 
        "symbol": "mongo::FileAllocator::get()", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::jsonString(mongo::JsonStringFormat, int) const", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::createCollection(std::string const&, long long, bool, int, mongo::BSONObj*)", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/initializer.cpp"
        ], 
        "symbol": "mongo::runGlobalInitializersOrDie(int, char const* const*, char const* const*)", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::jsTime()", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::hint(mongo::BSONObj)", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::GT", 
        "object": "src/mongo/dbtests/perf/perftest.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::path_traits::dispatch(boost::filesystem3::directory_entry const&, std::string&, std::codecvt<wchar_t, char, __mbstate_t> const&)", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::dir_itr_close(void*&, void*&)", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::directory_iterator_construct(boost::filesystem3::directory_iterator&, boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::get(std::vector<std::string, std::allocator<std::string> >*) const", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::hidden()", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::setDefault(mongo::optionenvironment::Value)", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::MsgAssertionException", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::status(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::operator[](std::string const&) const", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/replication_server_status.cpp"
        ], 
        "symbol": "mongo::replSettings", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::directory_iterator_increment(boost::filesystem3::directory_iterator&, boost::system::error_code*)", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::get(std::string*) const", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::positional(int, int)", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::count(std::string const&) const", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::addOptionChaining(std::string const&, std::string const&, mongo::optionenvironment::OptionType, std::string const&)", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::helpString() const", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::wchar_t_codecvt_facet()", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::get(unsigned int*) const", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::create_directory(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::remove_all(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::get(unsigned long long*) const", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::get(int*) const", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/dbtests/framework_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/multi_plan_runner.cpp"
        ], 
        "symbol": "mongo::MultiPlanRunner::getNext(mongo::BSONObj*, mongo::DiskLoc*)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/multi_plan_runner.cpp"
        ], 
        "symbol": "mongo::MultiPlanRunner::MultiPlanRunner(mongo::CanonicalQuery*)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::~WorkingSet()", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/fetch.cpp"
        ], 
        "symbol": "mongo::FetchStage::FetchStage(mongo::WorkingSet*, mongo::PlanStage*, mongo::MatchExpression const*)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::findIndexByKeyPattern(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/multi_plan_runner.cpp"
        ], 
        "symbol": "mongo::MultiPlanRunner::~MultiPlanRunner()", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/multi_plan_runner.cpp"
        ], 
        "symbol": "mongo::MultiPlanRunner::pickBestPlan(unsigned long*)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/expression_parser.cpp"
        ], 
        "symbol": "mongo::MatchExpressionParser::_parse(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getDescriptor(int)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/collection_scan.cpp"
        ], 
        "symbol": "mongo::CollectionScan::CollectionScan(mongo::CollectionScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/index_scan.cpp"
        ], 
        "symbol": "mongo::IndexScan::IndexScan(mongo::IndexScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/multi_plan_runner.cpp"
        ], 
        "symbol": "mongo::MultiPlanRunner::addPlan(mongo::QuerySolution*, mongo::PlanStage*, mongo::WorkingSet*)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::ensureIndex(std::string const&, mongo::BSONObj, bool, std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/canonical_query.cpp"
        ], 
        "symbol": "mongo::CanonicalQuery::canonicalize(std::string const&, mongo::BSONObj const&, mongo::CanonicalQuery**)", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/query_multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclientcursor.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientCursor", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclientcursor.cpp"
        ], 
        "symbol": "mongo::DBClientCursor::~DBClientCursor()", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclientcursor.cpp"
        ], 
        "symbol": "mongo::DBClientCursor::_finishConsInit()", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclientcursor.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBClientCursor", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/mock/mock_dbclient_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmicros(long long)", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/base64.cpp"
        ], 
        "symbol": "mongo::base64::encode(char const*, int)", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/compress.cpp"
        ], 
        "symbol": "mongo::uncompress(char const*, unsigned long, std::string*)", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/text.cpp"
        ], 
        "symbol": "mongo::StringSplitter::join(std::vector<std::string, std::allocator<std::string> > const&, std::string const&)", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/compress.cpp"
        ], 
        "symbol": "mongo::compress(char const*, unsigned long, std::string*)", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::Backoff::getNextSleepMillis(int, unsigned long long, unsigned long long) const", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/text.cpp"
        ], 
        "symbol": "mongo::isValidUTF8(char const*)", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::isValidNS(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/base64.cpp"
        ], 
        "symbol": "mongo::base64::encode(std::string const&)", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/base64.cpp"
        ], 
        "symbol": "mongo::base64::decode(std::string const&)", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::Database(char const*, bool&, std::string const&)", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/text.cpp"
        ], 
        "symbol": "mongo::StringSplitter::split(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/basictests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/durable_mapped_file.cpp"
        ], 
        "symbol": "mongo::DurableMappedFile::create(std::string const&, unsigned long long&, bool)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::Stats::S::_asObj()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/btree/key.cpp"
        ], 
        "symbol": "mongo::KeyV1::woEqual(mongo::KeyV1 const&) const", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::shutdown()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastErrorHolder::reset(mongo::LastError*)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::close()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastError(bool, bool, int, int)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::status(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::Stats::S::_CSVHeader()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::mapWithOptions(char const*, int)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::SpinLock()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/compress.cpp"
        ], 
        "symbol": "mongo::uncompress(char const*, unsigned long, std::string*)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::MemoryMappedFile()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::Stats::S::_asCSV()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::wasserted(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientInterface::findN(std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> >&, std::string const&, mongo::Query, int, int, mongo::BSONObj const*, int)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::slowShouldFailOpenBlock()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::LockMongoFilesShared::era", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::setMode(mongo::FailPoint::Mode, unsigned int, mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/compress.cpp"
        ], 
        "symbol": "mongo::compress(char const*, unsigned long, std::string*)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::lastError", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientConnection", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::MongoFileFinder::findByPath(std::string const&) const", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::LockMongoFilesShared::mmmutex", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version.cpp"
        ], 
        "symbol": "mongo::versionString", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/durable_mapped_file.cpp"
        ], 
        "symbol": "mongo::DurableMappedFile::~DurableMappedFile()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::join()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::_numConnections", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version_reporting.cpp"
        ], 
        "symbol": "mongo::openSSLVersion(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::~SpinLock()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/btree/key.cpp"
        ], 
        "symbol": "mongo::KeyV1Owned::KeyV1Owned(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::stats", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/client_build/mongo/buildinfo.cpp"
        ], 
        "symbol": "mongo::gitVersion()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::getHostName()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::auth(std::string const&, std::string const&, std::string const&, std::string&, bool)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/durable_mapped_file.cpp"
        ], 
        "symbol": "mongo::DurableMappedFile::DurableMappedFile()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::FailPoint()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMillis64()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::shouldFailCloseBlock()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "vtable for mongo::MemoryMappedFile", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::Stats::S::reset()", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/dbtests/perftests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::appendMaxForType(mongo::StringData const&, int)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/btree/key.cpp"
        ], 
        "symbol": "mongo::KeyV1::dataSize() const", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::Ordering const&, bool) const", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/btree/key.cpp"
        ], 
        "symbol": "mongo::KeyV1::woEqual(mongo::KeyV1 const&) const", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::extractFields(mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONUndefined", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::_okForStorage(bool, bool) const", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(std::string const&)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::compareDottedFieldNames(std::string const&, std::string const&, mongo::LexNumCmp const&)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObjIteratorSorted::BSONObjIteratorSorted(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSIZE", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/stringutils.cpp"
        ], 
        "symbol": "mongo::LexNumCmp::LexNumCmp(bool)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::Date_t::toTimeT() const", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::LT", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::appendAsNumber(mongo::StringData const&, std::string const&)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init(std::string const&)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::MINKEY", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::LTE", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::dotted2nested(mongo::BSONObjBuilder&, mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::valid() const", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/btree/key.cpp"
        ], 
        "symbol": "mongo::KeyV1::woCompare(mongo::KeyV1 const&, mongo::Ordering const&) const", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woSortOrder(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::jsTime()", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::MAXKEY", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::NE", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::nested2dotted(mongo::BSONObjBuilder&, mongo::BSONObj const&, std::string const&)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONArrayIteratorSorted::BSONArrayIteratorSorted(mongo::BSONArray const&)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/btree/key.cpp"
        ], 
        "symbol": "mongo::KeyBson::woCompare(mongo::KeyBson const&, mongo::Ordering const&) const", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::UserException", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init(mongo::Date_t, bool)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/btree/key.cpp"
        ], 
        "symbol": "mongo::KeyV1Owned::KeyV1Owned(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::initSequential()", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/btree/key.cpp"
        ], 
        "symbol": "mongo::KeyV1::toBson() const", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::appendMinForType(mongo::StringData const&, int)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::BSONElementManipulator::initTimestamp()", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONNULL", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/optime.cpp"
        ], 
        "symbol": "mongo::OpTime::_now()", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::isFieldNamePrefixOf(mongo::BSONObj const&) const", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::md5() const", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::GT", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::asTimeT()", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::isPrefixOf(mongo::BSONObj const&) const", 
        "object": "src/mongo/dbtests/jsobjtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBRead::DBRead(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::shutdown()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::UpgradeToExclusive::UpgradeToExclusive()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::atLeastReadLocked(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/progress_meter.cpp"
        ], 
        "symbol": "mongo::ProgressMeter::reset(unsigned long long, int, int)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::TempRelease::TempRelease()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/rwlockimpl.cpp"
        ], 
        "symbol": "mongo::SimpleRWLock::SimpleRWLock(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/synchronization.cpp"
        ], 
        "symbol": "mongo::Notification::notifyOne()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::DBWrite(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/progress_meter.cpp"
        ], 
        "symbol": "mongo::ProgressMeter::hit(int)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::UpgradeToExclusive::~UpgradeToExclusive()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::TempRelease::~TempRelease()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalRead::~GlobalRead()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::dbLevelLockingEnabled()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBRead::~DBRead()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_pool.cpp"
        ], 
        "symbol": "mongo::threadpool::ThreadPool::~ThreadPool()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::writelocktry::writelocktry(int)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::upgrade()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/rwlockimpl.cpp"
        ], 
        "symbol": "mongo::SimpleRWLock::unlock()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/synchronization.cpp"
        ], 
        "symbol": "mongo::Notification::waitToBeNotified()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/synchronization.cpp"
        ], 
        "symbol": "mongo::Notification::Notification()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::downgrade()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::writelocktry::~writelocktry()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_pool.cpp"
        ], 
        "symbol": "mongo::threadpool::ThreadPool::ThreadPool(int)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::nested()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::isW()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::isLocked()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::join()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::yield()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalRead::GlobalRead(int)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_pool.cpp"
        ], 
        "symbol": "mongo::threadpool::ThreadPool::join()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::isReadLocked()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMillis64()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_pool.cpp"
        ], 
        "symbol": "mongo::threadpool::ThreadPool::schedule(boost::function<void ()>)", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/rwlockimpl.cpp"
        ], 
        "symbol": "mongo::SimpleRWLock::lock()", 
        "object": "src/mongo/dbtests/threadedtests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::~WorkingSet()", 
        "object": "src/mongo/dbtests/query_stage_limit_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSetMember::WorkingSetMember()", 
        "object": "src/mongo/dbtests/query_stage_limit_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/mock_stage.cpp"
        ], 
        "symbol": "mongo::MockStage::pushBack(mongo::WorkingSetMember const&)", 
        "object": "src/mongo/dbtests/query_stage_limit_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/mock_stage.cpp"
        ], 
        "symbol": "mongo::MockStage::pushBack(mongo::PlanStage::StageState)", 
        "object": "src/mongo/dbtests/query_stage_limit_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/limit.cpp"
        ], 
        "symbol": "mongo::LimitStage::LimitStage(int, mongo::WorkingSet*, mongo::PlanStage*)", 
        "object": "src/mongo/dbtests/query_stage_limit_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/mock_stage.cpp"
        ], 
        "symbol": "mongo::MockStage::MockStage(mongo::WorkingSet*)", 
        "object": "src/mongo/dbtests/query_stage_limit_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/query_stage_limit_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_limit_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/skip.cpp"
        ], 
        "symbol": "mongo::SkipStage::SkipStage(int, mongo::WorkingSet*, mongo::PlanStage*)", 
        "object": "src/mongo/dbtests/query_stage_limit_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/dbtests/query_stage_limit_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/query_stage_limit_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSetMember::~WorkingSetMember()", 
        "object": "src/mongo/dbtests/query_stage_limit_skip.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/query_stage_limit_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_limit_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/query_stage_limit_skip.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/query_stage_limit_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/query_stage_limit_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/query_stage_limit_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::simpleCommand(std::string const&, mongo::BSONObj*, std::string const&)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_settings.cpp"
        ], 
        "symbol": "mongo::SettingsType::balancerStopped", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::update(std::string const&, mongo::Query, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::setRunCommandHook(boost::function<void (mongo::BSONObjBuilder*)>)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::update(std::string const&, mongo::Query, mongo::BSONObj, bool, bool)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_config_version.cpp"
        ], 
        "symbol": "mongo::VersionType::VersionType()", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_settings.cpp"
        ], 
        "symbol": "mongo::SettingsType::ConfigNS", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_shard.cpp"
        ], 
        "symbol": "mongo::ShardType::~ShardType()", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "non-virtual thunk to mongo::DBDirectClient::say(mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::killCursor(long long)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::remove(std::string const&, mongo::Query, int)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::jsTime()", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastErrorDetailed(std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_mongos.cpp"
        ], 
        "symbol": "mongo::MongosType::MongosType()", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_shard.cpp"
        ], 
        "symbol": "mongo::ShardType::ConfigNS", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndexes(std::string const&)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::resetIndexCache()", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&, int)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_config_version.cpp"
        ], 
        "symbol": "mongo::VersionType::clear()", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::count(std::string const&, mongo::BSONObj const&, int, int, int)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_config_version.cpp"
        ], 
        "symbol": "mongo::VersionType::~VersionType()", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::INVALID_SOCK_CREATION_TIME", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/cluster_client_internal.cpp"
        ], 
        "symbol": "mongo::checkClusterMongoVersions(mongo::ConnectionString const&, std::string const&)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::runCommand(std::string const&, mongo::BSONObj const&, mongo::BSONObj&, int)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config_upgrade.cpp"
        ], 
        "symbol": "mongo::getConfigVersion(mongo::ConnectionString const&, mongo::VersionType*)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndex(std::string const&, mongo::BSONObj)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientInterface::findOne(std::string const&, mongo::Query const&, mongo::BSONObj const*, int)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config_upgrade.cpp"
        ], 
        "symbol": "mongo::checkAndUpgradeConfigVersion(mongo::ConnectionString const&, bool, mongo::VersionType*, mongo::VersionType*, std::string*)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "non-virtual thunk to mongo::DBDirectClient::call(mongo::Message&, mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::logout(std::string const&, mongo::BSONObj&)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::call(mongo::Message&, mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::_lookupAvailableOptions()", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::remove(std::string const&, mongo::Query, bool)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::reIndex(std::string const&)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version.cpp"
        ], 
        "symbol": "mongo::versionString", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::getMore(std::string const&, long long, int, int)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_settings.cpp"
        ], 
        "symbol": "mongo::SettingsType::key", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_mongos.cpp"
        ], 
        "symbol": "mongo::MongosType::toBSON() const", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_shard.cpp"
        ], 
        "symbol": "mongo::ShardType::toBSON() const", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_mongos.cpp"
        ], 
        "symbol": "mongo::MongosType::ConfigNS", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_mongos.cpp"
        ], 
        "symbol": "mongo::MongosType::~MongosType()", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_config_version.cpp"
        ], 
        "symbol": "mongo::VersionType::ConfigNS", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndex(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_shard.cpp"
        ], 
        "symbol": "mongo::ShardType::ShardType()", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::query(std::string const&, mongo::Query, int, int, mongo::BSONObj const*, int, int)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::say(mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::query(boost::function<void (mongo::BSONObj const&)>, std::string const&, mongo::Query, mongo::BSONObj const*, int)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::query(boost::function<void (mongo::DBClientCursorBatchIterator&)>, std::string const&, mongo::Query, mongo::BSONObj const*, int)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::ensureIndex(std::string const&, mongo::BSONObj, bool, std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::_auth(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getIndexes(std::string const&)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::isMaster(bool&, mongo::BSONObj*)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastErrorDetailed(bool, bool, int, int)", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_config_version.cpp"
        ], 
        "symbol": "mongo::VersionType::toBSON() const", 
        "object": "src/mongo/dbtests/config_upgrade_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/keypatterntests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::extendRangeBound(mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/keypatterntests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/dbtests/keypatterntests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::KeyPattern(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/keypatterntests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/keypatterntests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/keypatterntests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/keypatterntests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/keypatterntests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/keypatterntests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/keypatterntests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/keypatterntests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/keypatterntests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/keypatterntests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/console.cpp"
        ], 
        "symbol": "mongo::Console::Console()", 
        "object": "src/mongo/unittest/unittest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/unittest/unittest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/unittest/unittest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/unittest/unittest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/unittest/unittest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/unittest/unittest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/message_log_domain.cpp"
        ], 
        "symbol": "mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>::attachAppender(std::auto_ptr<mongo::logger::Appender<mongo::logger::MessageEventEphemeral> >)", 
        "object": "src/mongo/unittest/unittest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/unittest/unittest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/unittest/unittest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/console.cpp"
        ], 
        "symbol": "mongo::Console::out()", 
        "object": "src/mongo/unittest/unittest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/unittest/unittest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/log_manager.cpp"
        ], 
        "symbol": "mongo::logger::LogManager::getNamedDomain(std::string const&)", 
        "object": "src/mongo/unittest/unittest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/unittest/unittest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/unittest/unittest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/unittest/unittest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/message_event_utf8_encoder.cpp"
        ], 
        "symbol": "vtable for mongo::logger::MessageEventDetailsEncoder", 
        "object": "src/mongo/unittest/unittest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::appendMaxForType(mongo::StringData const&, int)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeVectorIterator::FieldIntervalMatcher::FieldIntervalMatcher(mongo::FieldInterval const&, mongo::BSONElement const&, bool)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRange::isPointIntervalSet() const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRange::operator|=(mongo::FieldRange const&)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRange::toString() const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(std::string const&)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeVector::toString() const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::minKey", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeSet::numNonUniversalRanges() const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeSet::toString() const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::MsgAssertionException", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::userCreateNS(char const*, mongo::BSONObj, std::string&, bool, bool*)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeSetPair::assertValidIndex(mongo::NamespaceDetails const*, int) const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::DBWrite(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::LT", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeVectorIterator::FieldIntervalMatcher::lowerCmp() const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::resetIndexCache()", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeVector::FieldRangeVector(mongo::FieldRangeSet const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::GTE", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeSetPair::noNonUniversalRanges() const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeSet::universalRange() const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::LTE", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeVector::endKeyInclusive() const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldInterval::toString() const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRange::FieldRange(mongo::BSONElement const&, bool, bool)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeSet::operator&=(mongo::FieldRangeSet const&)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRange::operator-=(mongo::FieldRange const&)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeSet::FieldRangeSet(char const*, mongo::BSONObj const&, bool, bool)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeSetPair::frsForIndex(mongo::NamespaceDetails const*, int) const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::NE", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeVectorIterator::prepDive()", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRange::universal() const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeSet::operator-=(mongo::FieldRangeSet const&)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeVectorIterator::CompoundRangeCounter::CompoundRangeCounter(int, int)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeSetPair::toString() const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeSet::prefixed(std::string const&) const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeVectorIterator::FieldRangeVectorIterator(mongo::FieldRangeVector const&, int)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::maxKey", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::GT", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/ondisk/namespace_index.cpp"
        ], 
        "symbol": "mongo::NamespaceIndex::details(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::appendMinForType(mongo::StringData const&, int)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeVector::startKeyInclusive() const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRange::intersect(mongo::FieldRange const&, bool)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeVector::startKey() const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::ensureIndex(std::string const&, mongo::BSONObj, bool, std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeSetPair::operator-=(mongo::FieldRangeSet const&)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::dropCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeVectorIterator::FieldIntervalMatcher::upperCmp() const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeVector::endKey() const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeSet::subset(mongo::BSONObj const&) const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeVector::isSingleInterval() const", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeVectorIterator::advance(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/dbtests/queryutiltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::findById(mongo::Client&, char const*, mongo::BSONObj, mongo::BSONObj&, bool*, bool*)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::killCurrentOp", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::ClientCursorPin(long long)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::maxKey(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::createCollection(std::string const&, long long, bool, int, mongo::BSONObj*)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::explain()", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/kill_current_op.cpp"
        ], 
        "symbol": "mongo::KillCurrentOp::reset()", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastErrorHolder::reset(mongo::LastError*)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::assembleRequest(std::string const&, mongo::BSONObj, int, int, mongo::BSONObj const*, int, mongo::Message&)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSIZE", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastError(bool, bool, int, int)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::userCreateNS(char const*, mongo::BSONObj, std::string&, bool, bool*)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::insertDocument(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::unknownAddress", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::runCommand(std::string const&, mongo::BSONObj const&, mongo::BSONObj&, int)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::GTE", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init(std::string const&)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::Array() const", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::valid() const", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::getFilter() const", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::Query(char const*)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::lastError", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::DBWrite(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/bson_validate.cpp"
        ], 
        "symbol": "mongo::validateBSON(char const*, unsigned long long)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::NE", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::SockAddr::toString(bool) const", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::remove(std::string const&, mongo::Query, bool)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/kill_current_op.cpp"
        ], 
        "symbol": "mongo::KillCurrentOp::killAll()", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::clientCursorsById", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::findOne(mongo::StringData const&, mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::minKey(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::c() const", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::createIndex(mongo::BSONObj, bool)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getPrevError()", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::findOne(mongo::StringData const&, mongo::BSONObj const&, mongo::BSONObj&, bool)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::hint(mongo::BSONObj)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/optime.cpp"
        ], 
        "symbol": "mongo::OpTime::_now()", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::dropCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::createCollection(mongo::StringData const&, bool, mongo::BSONObj const*, bool)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::~ClientCursorPin()", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::find(std::string const&, std::set<long long, std::less<long long>, std::allocator<long long> >&)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::shouldTimeout(unsigned int)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::GT", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/new_find.cpp"
        ], 
        "symbol": "mongo::newRunQuery(mongo::Message&, mongo::QueryMessage&, mongo::CurOp&, mongo::Message&)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/dbtests/querytests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::_finishInit()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::shutdown()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::TempRelease::TempRelease()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::getcurns", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogstreamBuilder const&)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::insertDocument(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::DBWrite(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::TempRelease::~TempRelease()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::info()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lockstate.cpp"
        ], 
        "symbol": "mongo::Acquiring::~Acquiring()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/count.cpp"
        ], 
        "symbol": "mongo::runCount(char const*, mongo::BSONObj const&, std::string&, int&)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::nested()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::isLocked()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lockstate.cpp"
        ], 
        "symbol": "mongo::Acquiring::Acquiring(mongo::Lock::ScopedLock*, mongo::LockState&)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::join()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::createIndex(mongo::BSONObj, bool)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::dropCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::createCollection(mongo::StringData const&, bool, mongo::BSONObj const*, bool)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/dbtests/counttests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/unittest/crutch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::lockFile", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::go()", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version_reporting.cpp"
        ], 
        "symbol": "mongo::printGitVersion()", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::startup()", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::acquirePathLock(bool)", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::~BackgroundJob()", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version_reporting.cpp"
        ], 
        "symbol": "mongo::printOpenSSLVersion()", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file_allocator.cpp"
        ], 
        "symbol": "mongo::FileAllocator::get()", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file_allocator.cpp"
        ], 
        "symbol": "mongo::FileAllocator::start()", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::shutdown()", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "typeinfo for mongo::BackgroundJob", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version_reporting.cpp"
        ], 
        "symbol": "mongo::printSysInfo()", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::tlogLevel", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::BackgroundJob(bool)", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/framework.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::drec() const", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::setPaddingFactor(double)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index/hash_access_method.cpp"
        ], 
        "symbol": "mongo::HashAccessMethod::makeSingleKey(mongo::BSONElement const&, int, int)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_legacy.cpp"
        ], 
        "symbol": "mongo::IndexLegacy::getMissingField(mongo::Collection*, mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::bucketSizes", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(std::string const&)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::Record::_accessing() const", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::getRecordAllocationSize(int)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::ext() const", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::MsgAssertionException", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index/btree_key_generator.cpp"
        ], 
        "symbol": "mongo::BtreeKeyGeneratorV1::BtreeKeyGeneratorV1(std::vector<char const*, std::allocator<char const*> >, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> >, bool)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/cap.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::cappedTruncateAfter(char const*, mongo::DiskLoc, bool)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::DurableInterface::_impl", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::userCreateNS(char const*, mongo::BSONObj, std::string&, bool, bool*)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::insertDocument(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::setUserFlag(int)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::quantizeAllocationSpace(int)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/eof_runner.cpp"
        ], 
        "symbol": "mongo::EOFRunner::EOFRunner(mongo::CanonicalQuery*, std::string const&)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::setIndexIsMultikey(int, bool)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/internal_runner.cpp"
        ], 
        "symbol": "mongo::InternalRunner::InternalRunner(std::string const&, mongo::PlanStage*, mongo::WorkingSet*)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/collection_scan.cpp"
        ], 
        "symbol": "mongo::CollectionScan::CollectionScan(mongo::CollectionScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::writingWithExtra()", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index/hash_access_method.cpp"
        ], 
        "symbol": "mongo::HashAccessMethod::getKeysImpl(mongo::BSONObj const&, std::string const&, int, int, bool, std::set<mongo::BSONObj, mongo::BSONObjCmp, std::allocator<mongo::BSONObj> >*)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/ondisk/namespace_index.cpp"
        ], 
        "symbol": "mongo::NamespaceIndex::details(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::quantizePowerOf2AllocationSpace(int)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::alloc(mongo::StringData const&, int)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index/btree_key_generator.cpp"
        ], 
        "symbol": "mongo::BtreeKeyGenerator::getKeys(mongo::BSONObj const&, std::set<mongo::BSONObj, mongo::BSONObjCmp, std::allocator<mongo::BSONObj> >*) const", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::rec() const", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::dropCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DeletedRecord::_accessing() const", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/dbtests/namespacetests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/mutable_bson_test_utils.cpp"
        ], 
        "symbol": "mongo::mutablebson::checkEqualNoOrdering(mongo::mutablebson::Document const&, mongo::mutablebson::Document const&)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::insertDocument(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/replication_server_status.cpp"
        ], 
        "symbol": "mongo::replSettings", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/oplog.cpp"
        ], 
        "symbol": "mongo::oldRepl()", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/sync.cpp"
        ], 
        "symbol": "typeinfo for mongo::Sync", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::~Document()", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/oplog.cpp"
        ], 
        "symbol": "mongo::createOplog()", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::Document(mongo::BSONObj const&, mongo::mutablebson::Document::InPlaceMode)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/sync.cpp"
        ], 
        "symbol": "vtable for mongo::Sync", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/master_slave.cpp"
        ], 
        "symbol": "mongo::DatabaseIgnorer::ignoreAt(std::string const&, mongo::OpTime const&)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/master_slave.cpp"
        ], 
        "symbol": "mongo::ReplSource::applyOperation(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/master_slave.cpp"
        ], 
        "symbol": "mongo::DatabaseIgnorer::doIgnoreUntilAfter(std::string const&, mongo::OpTime const&)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::getIterator(mongo::DiskLoc const&, bool, mongo::CollectionScanParams::Direction const&) const", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::deleteDocument(mongo::DiskLoc const&, bool, bool, mongo::BSONObj*)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/sync.cpp"
        ], 
        "symbol": "mongo::Sync::getMissingDoc(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::ensureHaveIdIndex()", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::createCollection(mongo::StringData const&, bool, mongo::BSONObj const*, bool)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/mutable_bson_test_utils.cpp"
        ], 
        "symbol": "mongo::mutablebson::operator<<(std::ostream&, mongo::mutablebson::UnorderedWrapper_Obj const&)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/master_slave.cpp"
        ], 
        "symbol": "mongo::ReplSource::ReplSource(mongo::BSONObj)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/sync.cpp"
        ], 
        "symbol": "mongo::Sync::shouldRetry(mongo::BSONObj const&)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/dbtests/repltests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/mock/mock_replica_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/mock/mock_replica_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/mock/mock_replica_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/mock/mock_replica_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/mock/mock_replica_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/mock/mock_replica_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/dbtests/mock/mock_replica_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/mock/mock_replica_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/mock/mock_replica_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/mock/mock_replica_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/durable_mapped_file.cpp"
        ], 
        "symbol": "mongo::DurableMappedFile::create(std::string const&, unsigned long long&, bool)", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::operator/=(boost::filesystem3::path const&)", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::remove(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::MongoFileFinder::findByPath(std::string const&) const", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/durable_mapped_file.cpp"
        ], 
        "symbol": "mongo::DurableMappedFile::DurableMappedFile()", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/durable_mapped_file.cpp"
        ], 
        "symbol": "mongo::DurableMappedFile::~DurableMappedFile()", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::LockMongoFilesShared::mmmutex", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/durable_mapped_file.cpp"
        ], 
        "symbol": "mongo::DurableMappedFile::open(std::string const&, bool)", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/dbtests/mmaptests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::LT", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::GTE", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::LTE", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::Chunk::Chunk(mongo::ChunkManager const*, mongo::BSONObj const&, mongo::BSONObj const&, mongo::Shard const&, mongo::ChunkVersion)", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkRangeManager::reloadAll(std::map<mongo::BSONObj, boost::shared_ptr<mongo::Chunk const>, mongo::BSONObjCmp, std::allocator<std::pair<mongo::BSONObj const, boost::shared_ptr<mongo::Chunk const> > > > const&)", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shard.cpp"
        ], 
        "symbol": "mongo::Shard::_setAddr(std::string const&)", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::getShardsForQuery(std::set<mongo::Shard, std::less<mongo::Shard>, std::allocator<mongo::Shard> >&, mongo::BSONObj const&) const", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::ChunkManager()", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::GT", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardkey.cpp"
        ], 
        "symbol": "mongo::ShardKeyPattern::ShardKeyPattern(mongo::BSONObj)", 
        "object": "src/mongo/dbtests/chunktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/gle_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/gle_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/gle_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/gle_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/gle_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/gle_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/gle_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/gle_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/gle_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/gle_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastError(bool, bool, int, int)", 
        "object": "src/mongo/dbtests/gle_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/gle_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/gle_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/gle_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/gle_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::update(std::string const&, mongo::Query, mongo::BSONObj, bool, bool)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::ClientCursorPin(long long)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::~WorkingSet()", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/fetch.cpp"
        ], 
        "symbol": "mongo::FetchStage::FetchStage(mongo::WorkingSet*, mongo::PlanStage*, mongo::MatchExpression const*)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::idleTimeReport(unsigned int)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::invalidate(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::findIndexByKeyPattern(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::deregisterRunner(mongo::Runner*)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::clientCursorsById", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/expression_parser.cpp"
        ], 
        "symbol": "mongo::MatchExpressionParser::_parse(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::registerRunner(mongo::Runner*)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getDescriptor(int)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/collection_scan.cpp"
        ], 
        "symbol": "mongo::CollectionScan::CollectionScan(mongo::CollectionScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/single_solution_runner.cpp"
        ], 
        "symbol": "mongo::SingleSolutionRunner::SingleSolutionRunner(mongo::CanonicalQuery*, mongo::QuerySolution*, mongo::PlanStage*, mongo::WorkingSet*)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/index_scan.cpp"
        ], 
        "symbol": "mongo::IndexScan::IndexScan(mongo::IndexScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::ensureIndex(std::string const&, mongo::BSONObj, bool, std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::ClientCursor(mongo::Runner*, int, mongo::BSONObj)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::~ClientCursorPin()", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/canonical_query.cpp"
        ], 
        "symbol": "mongo::CanonicalQuery::canonicalize(std::string const&, mongo::BSONObj const&, mongo::CanonicalQuery**)", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::deleteUnderlying()", 
        "object": "src/mongo/dbtests/query_single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/btreebuildertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/btreebuildertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/btreebuildertests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/btreebuildertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/btreebuildertests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/btreebuildertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/btreebuildertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/and_sorted.cpp"
        ], 
        "symbol": "mongo::AndSortedStage::AndSortedStage(mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/and_sorted.cpp"
        ], 
        "symbol": "mongo::AndSortedStage::addChild(mongo::PlanStage*)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::~WorkingSet()", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::findIndexByKeyPattern(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::remove(std::string const&, mongo::Query, bool)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/expression_parser.cpp"
        ], 
        "symbol": "mongo::MatchExpressionParser::_parse(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getDescriptor(int)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSetMember::getFieldDotted(std::string const&, mongo::BSONElement*) const", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/and_hash.cpp"
        ], 
        "symbol": "mongo::AndHashStage::AndHashStage(mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::getIterator(mongo::DiskLoc const&, bool, mongo::CollectionScanParams::Direction const&) const", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/index_scan.cpp"
        ], 
        "symbol": "mongo::IndexScan::IndexScan(mongo::IndexScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::getFlagged() const", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::ensureIndex(std::string const&, mongo::BSONObj, bool, std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/and_hash.cpp"
        ], 
        "symbol": "mongo::AndHashStage::addChild(mongo::PlanStage*)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::createCollection(mongo::StringData const&, bool, mongo::BSONObj const*, bool)", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/query_stage_and.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::MsgAssertionException", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::status(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::operator[](std::string const&) const", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::get(std::string*) const", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::temp_directory_path(boost::system::error_code*)", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::count(std::string const&) const", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::wchar_t_codecvt_facet()", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::operator/=(boost::filesystem3::path const&)", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::create_directory(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptionsParsed", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::remove_all(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::addOptionChaining(std::string const&, std::string const&, mongo::optionenvironment::OptionType, std::string const&)", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/unique_path.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::unique_path(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/unittest/temp_dir.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::hostbyname(char const*)", 
        "object": "src/mongo/dbtests/socktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/isself.cpp"
        ], 
        "symbol": "mongo::HostAndPort::isSelf() const", 
        "object": "src/mongo/dbtests/socktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/socktests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/socktests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/socktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/socktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/match_details.cpp"
        ], 
        "symbol": "mongo::MatchDetails::elemMatchKey() const", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/match_details.cpp"
        ], 
        "symbol": "mongo::MatchDetails::MatchDetails()", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/matcher.cpp"
        ], 
        "symbol": "mongo::Matcher2::Matcher2(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/match_details.cpp"
        ], 
        "symbol": "mongo::MatchDetails::hasElemMatchKey() const", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/matcher.cpp"
        ], 
        "symbol": "mongo::Matcher2::matches(mongo::BSONObj const&, mongo::MatchDetails*) const", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/matchertests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/stack_introspect.cpp"
        ], 
        "symbol": "mongo::inConstructorChainSupported()", 
        "object": "src/mongo/dbtests/stacktests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/stacktests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/stacktests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::jsonString(mongo::JsonStringFormat, int) const", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(std::string const&)", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init(std::string const&)", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::valid() const", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::errnoWithDescription(int)", 
        "object": "src/mongo/dbtests/jsontests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::findIndexByKeyPattern(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_executor.cpp"
        ], 
        "symbol": "mongo::PlanExecutor::~PlanExecutor()", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/expression_parser.cpp"
        ], 
        "symbol": "mongo::MatchExpressionParser::_parse(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getDescriptor(int)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_executor.cpp"
        ], 
        "symbol": "mongo::PlanExecutor::getNext(mongo::BSONObj*, mongo::DiskLoc*)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/index_scan.cpp"
        ], 
        "symbol": "mongo::IndexScan::IndexScan(mongo::IndexScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::ensureIndex(std::string const&, mongo::BSONObj, bool, std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_executor.cpp"
        ], 
        "symbol": "mongo::PlanExecutor::PlanExecutor(mongo::WorkingSet*, mongo::PlanStage*)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/dbtests/query_stage_tests.cpp"
    }
]