[
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::createCollection(std::string const&, long long, bool, int, mongo::BSONObj*)", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::parse(std::string const&, std::string&)", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastError(bool, bool, int, int)", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::convertExceptionCode(int)", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::jsTime()", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/stringutils.cpp"
        ], 
        "symbol": "mongo::versionCmp(mongo::StringData, mongo::StringData)", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/write_concern_options.cpp"
        ], 
        "symbol": "mongo::WriteConcernOptions::AllConfigs", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(mongo::ConnectionString const&, double)", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::terseCurrentTime(bool)", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::getHostNameCached()", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastErrorString(mongo::BSONObj const&)", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/s/cluster_client_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/s/type_lockpings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/type_lockpings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/type_lockpings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/type_lockpings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_lockpings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/type_lockpings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/type_lockpings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_lockpings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/type_lockpings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_lockpings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/type_lockpings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/type_lockpings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_lockpings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_lockpings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/type_lockpings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/s/type_lockpings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_lockpings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_lockpings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_changelog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_changelog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_changelog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_changelog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_changelog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_changelog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::toPointInTime(std::string const&, boost::posix_time::ptime*)", 
        "object": "src/mongo/s/type_settings.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_settings.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_settings.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_settings.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_settings.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_settings.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_settings.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::get(std::string const&, bool)", 
        "object": "src/mongo/s/dbclient_shard_resolver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::parse(std::string const&, std::string&)", 
        "object": "src/mongo/s/dbclient_shard_resolver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/dbclient_shard_resolver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::getMaster()", 
        "object": "src/mongo/s/dbclient_shard_resolver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/dbclient_shard_resolver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/dbclient_shard_resolver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/s/dbclient_shard_resolver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_config_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/random.cpp"
        ], 
        "symbol": "mongo::PseudoRandom::PseudoRandom(unsigned int)", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(std::string const&, double)", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::Task::Task()", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/parallel.cpp"
        ], 
        "symbol": "mongo::ParallelSortClusteredCursor::getNS()", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbmessage.cpp"
        ], 
        "symbol": "mongo::replyToQuery(int, mongo::AbstractMessagingPort*, mongo::Message&, void*, int, int, int, long long)", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logKillCursorsAuthzCheck(mongo::ClientBasic*, mongo::NamespaceString const&, long long, mongo::ErrorCodes::Error)", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::Task::setUp()", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::~BackgroundJob()", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/random.cpp"
        ], 
        "symbol": "mongo::PseudoRandom::nextInt32()", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::killCursors", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "vtable for mongo::task::Task", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/parallel.cpp"
        ], 
        "symbol": "mongo::ParallelSortClusteredCursor::more()", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::Task::run()", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::checkAuthForCommand(mongo::ClientBasic*, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "typeinfo for mongo::task::Task", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/parallel.cpp"
        ], 
        "symbol": "mongo::ParallelSortClusteredCursor::~ParallelSortClusteredCursor()", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::repeat(mongo::task::Task*, unsigned int)", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::_timeTracker", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::cursorInfo", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnNamespace(mongo::NamespaceString const&, mongo::ActionType)", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/random.cpp"
        ], 
        "symbol": "mongo::SecureRandom::create()", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/parallel.cpp"
        ], 
        "symbol": "mongo::ParallelSortClusteredCursor::next()", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp", 
            "src/mongo/db/client.cpp", 
            "src/mongo/client/clientAndShell.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getCurrent()", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/field_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/field_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/field_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/field_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/field_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/field_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::simpleCommand(std::string const&, mongo::BSONObj*, std::string const&)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "mongo::StartupTest::StartupTest()", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::QuoteMeta(pcrecpp::StringPiece const&)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(std::string const&)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "typeinfo for mongo::StartupTest", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options_helpers.cpp", 
            "src/mongo/db/sorter/sorter_test.cpp"
        ], 
        "symbol": "mongo::isMongos()", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::remove(std::string const&, bool)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::get(std::string const&, bool)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_service.cpp"
        ], 
        "symbol": "mongo::getGlobalFailPointRegistry()", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::toPointInTime(std::string const&, boost::posix_time::ptime*)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastError(bool, bool, int, int)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(std::string const&, double)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/write_concern_options.cpp"
        ], 
        "symbol": "mongo::WriteConcernOptions::AllConfigs", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::slowShouldFailOpenBlock()", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::getServerAddress() const", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::currentDate()", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_registry.cpp"
        ], 
        "symbol": "mongo::FailPointRegistry::addFailPoint(std::string const&, mongo::FailPoint*)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "mongo::StartupTest::~StartupTest()", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::FailPoint()", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::shouldFailCloseBlock()", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/grid.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/chunk_version_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseResourcePattern(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/commands/cluster_hint_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/s/commands/cluster_hint_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/s/commands/cluster_hint_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/s/commands/cluster_hint_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/s/commands/cluster_hint_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/commands/cluster_hint_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/commands/cluster_hint_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnResource(mongo::ResourcePattern const&, mongo::ActionType)", 
        "object": "src/mongo/s/commands/cluster_hint_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/s/commands/cluster_hint_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/s/commands/cluster_hint_cmd.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/s/commands/cluster_hint_cmd.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::planCacheHint", 
        "object": "src/mongo/s/commands/cluster_hint_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/s/commands/cluster_hint_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/s/commands/cluster_hint_cmd.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/s/commands/cluster_hint_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/commands/cluster_hint_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/commands/cluster_hint_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/s/commands/cluster_hint_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/config_upgrade_v0_to_v5.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/config_upgrade_v0_to_v5.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/config_upgrade_v0_to_v5.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/config_upgrade_v0_to_v5.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/s/config_upgrade_v0_to_v5.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/config_upgrade_v0_to_v5.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/config_upgrade_v0_to_v5.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/config_upgrade_v0_to_v5.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/config_upgrade_v0_to_v5.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/config_upgrade_v0_to_v5.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/config_upgrade_v0_to_v5.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/write_concern_options.cpp"
        ], 
        "symbol": "mongo::WriteConcernOptions::AllConfigs", 
        "object": "src/mongo/s/config_upgrade_v0_to_v5.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/config_upgrade_v0_to_v5.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/s/type_database_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/type_database_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/type_database_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/type_database_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_database_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/type_database_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/type_database_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_database_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/type_database_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_database_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/type_database_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/type_database_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_database_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/type_database_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_database_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/type_database_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/s/type_database_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_database_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_database_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/range_deleter_service.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/range_deleter_service.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/s/type_tags_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/type_tags_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/type_tags_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/type_tags_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_tags_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/type_tags_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/type_tags_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_tags_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/type_tags_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_tags_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/type_tags_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/type_tags_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_tags_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/type_tags_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_tags_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/type_tags_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/s/type_tags_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_tags_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_tags_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceExceptions", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/stacktrace.cpp"
        ], 
        "symbol": "mongo::printStackTrace(std::ostream&)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::appendInfo(mongo::BSONObjBuilder&)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "typeinfo for mongo::ServerParameter", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastErrorHolder::get(bool)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastError(bool, bool, int, int)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::isConnectionGood(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::SpinLock()", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(std::string const&, double)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::INVALID_SOCK_CREATION_TIME", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::~ServerParameter()", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::ServerParameter(mongo::ServerParameterSet*, std::string const&, bool, bool)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::lastError", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::onHandedOut(mongo::DBClientBase*)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::checkAuthForCommand(mongo::ClientBasic*, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::connPoolStats", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ExportedServerParameter<bool>::setFromString(std::string const&)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::serverNameCompare::operator()(std::string const&, std::string const&) const", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::clear()", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::~SpinLock()", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::inShutdown()", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::~DBConnectionPool()", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::DBConnectionPool()", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameterSet::getGlobal()", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/shardconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::sameLogicalEndpoint(mongo::ConnectionString const&) const", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::UserException", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::get(std::string const&, bool)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::contains(std::string const&) const", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(std::string const&, double)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::Array() const", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::appendImpersonatedUsers(mongo::BSONObjBuilder*)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::isAuthEnabled() const", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::checkAuthForCommand(mongo::ClientBasic*, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::getShardMap", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/security_key.cpp"
        ], 
        "symbol": "mongo::authenticateInternalUser(mongo::DBClientWithCommands*)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_fillServers(std::string)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::getGlobalAuthorizationManager()", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::isFieldNamePrefixOf(mongo::BSONObj const&) const", 
        "object": "src/mongo/s/shard_key_pattern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_tags.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_tags.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_tags.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/type_tags.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_tags.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_tags.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_tags.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/random.cpp"
        ], 
        "symbol": "mongo::PseudoRandom::PseudoRandom(long long)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::simpleCommand(std::string const&, mongo::BSONObj*, std::string const&)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeSet::universalRange() const", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "mongo::StartupTest::StartupTest()", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::getGtLtOp(mongo::BSONElement const&)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::sameLogicalEndpoint(mongo::ConnectionString const&) const", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "typeinfo for mongo::StartupTest", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastErrorHolder::get(bool)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::OrRangeGenerator::popOrClauseSingleKey()", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::toString() const", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::keyBounds(mongo::FieldRangeSet const&) const", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/random.cpp"
        ], 
        "symbol": "mongo::PseudoRandom::nextInt32()", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(std::string const&, double)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/write_concern_options.cpp"
        ], 
        "symbol": "mongo::WriteConcernOptions::AllConfigs", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/lite_parsed_query.cpp"
        ], 
        "symbol": "mongo::LiteParsedQuery::cmdOptionMaxTimeMS", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::lastError", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::isSpecial() const", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRange::universal() const", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::UserException", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "mongo::StartupTest::~StartupTest()", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeSetPair::operator&=(mongo::FieldRangeSetPair const&)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_fillServers(std::string)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::OrRangeGenerator::OrRangeGenerator(char const*, mongo::BSONObj const&, bool)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::FieldRangeSet::getSpecial() const", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::extractSingleKey(mongo::BSONObj const&) const", 
        "object": "src/mongo/s/chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/s/chunk_diff_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/chunk_diff_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/s/chunk_diff_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/chunk_diff_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/chunk_diff_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/chunk_diff_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/chunk_diff_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/chunk_diff_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/chunk_diff_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/chunk_diff_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/chunk_diff_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/s/shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/s/shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_fillServers(std::string)", 
        "object": "src/mongo/s/shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::sameLogicalEndpoint(mongo::ConnectionString const&) const", 
        "object": "src/mongo/s/shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/s/shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/s/range_arithmetic_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/range_arithmetic_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/range_arithmetic_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/range_arithmetic_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/range_arithmetic_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/range_arithmetic_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/range_arithmetic_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/range_arithmetic_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/range_arithmetic_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/range_arithmetic_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/range_arithmetic_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/range_arithmetic_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/range_arithmetic_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/range_arithmetic_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/range_arithmetic_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/range_arithmetic_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/s/range_arithmetic_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/range_arithmetic_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/range_arithmetic_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
        ], 
        "symbol": "mongo::MockRemoteDBServer::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_conn_registry.cpp"
        ], 
        "symbol": "mongo::MockConnRegistry::getConnStrHook()", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_connectHook", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_conn_registry.cpp"
        ], 
        "symbol": "mongo::MockConnRegistry::get()", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_connectHookMutex", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_conn_registry.cpp"
        ], 
        "symbol": "mongo::MockConnRegistry::addServer(mongo::MockRemoteDBServer*)", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_conn_registry.cpp"
        ], 
        "symbol": "mongo::MockConnRegistry::clear()", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
        ], 
        "symbol": "mongo::MockRemoteDBServer::MockRemoteDBServer(std::string const&)", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/s/collection_metadata_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp"
        ], 
        "symbol": "mongo::ClientInfo::newRequest()", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::startRequest()", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/counters.cpp"
        ], 
        "symbol": "mongo::OpCounters::gotOp(int, bool)", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/counters.cpp"
        ], 
        "symbol": "mongo::globalOpCounters", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::UserException", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp"
        ], 
        "symbol": "mongo::ClientInfo::newPeerRequest(mongo::HostAndPort const&)", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp"
        ], 
        "symbol": "mongo::ClientInfo::get(mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/s/request.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::Date_t::toString() const", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::jsTimeVirtualThreadSkew(long long)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LabeledLevel)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::jsonString(mongo::JsonStringFormat, int) const", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::setThreadName(mongo::StringData)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastError(bool, bool, int, int)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::jsTime()", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::LT", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(std::string const&, double)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::exception const&)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::NIN", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(char const*)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::inShutdown()", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const*)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::getHostName()", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastErrorString(mongo::BSONObj const&)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/string_data.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::StringData const&)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::getJSTimeVirtualThreadSkew()", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/distlock.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/range_deleter_mock_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/range_deleter_mock_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/range_deleter_mock_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/range_deleter_mock_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/range_deleter_mock_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/range_deleter_mock_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/range_deleter_mock_env.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/range_deleter_mock_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/range_deleter_mock_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/range_arithmetic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/range_arithmetic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/range_arithmetic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/range_arithmetic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/range_arithmetic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/range_arithmetic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/range_arithmetic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/random.cpp"
        ], 
        "symbol": "mongo::PseudoRandom::PseudoRandom(long long)", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/random.cpp"
        ], 
        "symbol": "mongo::PseudoRandom::nextInt32()", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/balancer_policy_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::DBClientReplicaSet::masterConn()", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/s/version_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_locks.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_locks.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_locks.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_locks.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_locks.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_locks.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::hostbyname(char const*)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::clientAddress(bool) const", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::QuoteMeta(pcrecpp::StringPiece const&)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::createCollection(std::string const&, long long, bool, int, mongo::BSONObj*)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::sameLogicalEndpoint(mongo::ConnectionString const&) const", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::parse(std::string const&, std::string&)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastError(bool, bool, int, int)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/stringutils.cpp"
        ], 
        "symbol": "mongo::joinStringDelim(std::vector<std::string, std::allocator<std::string> > const&, std::string*, char)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(std::string const&, double)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/stringutils.cpp"
        ], 
        "symbol": "mongo::splitStringDelim(std::string const&, std::vector<std::string, std::allocator<std::string> >*, char)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::BatchedCommandResponse()", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::operator<<(mongo::logger::Tee*)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/write_concern_options.cpp"
        ], 
        "symbol": "mongo::WriteConcernOptions::AllConfigs", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::toBSON() const", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::getServerAddress() const", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::terseCurrentTime(bool)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::jsTime()", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::warnings", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::~BatchedCommandResponse()", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::getHostNameCached()", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const*)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::getHostName()", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_fillServers(std::string)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::dbexit(mongo::ExitCode, char const*)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/config.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::getShardVersion", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/master_slave.cpp"
        ], 
        "symbol": "mongo::replAllDead", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::addHook(mongo::DBConnectionHook*)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::clientAddress(bool) const", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNsFullyQualified(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs.cpp"
        ], 
        "symbol": "mongo::theReplSet", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::parse(std::string const&, std::string&)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastErrorHolder::disableForCommand()", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/replication_server_status.cpp"
        ], 
        "symbol": "mongo::replSettings", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::help(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&) const", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs.cpp"
        ], 
        "symbol": "mongo::replSet", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::internal", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::lastError", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::checkAuthForCommand(mongo::ClientBasic*, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::shardingState", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnResource(mongo::ResourcePattern const&, mongo::ActionType)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::DBWrite(mongo::StringData const&)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/s/d_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/version_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/process_id.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::ProcessId)", 
        "object": "src/mongo/s/version_mongos.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/buildinfo.cpp"
        ], 
        "symbol": "mongo::gitVersion()", 
        "object": "src/mongo/s/version_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/version_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/process_id.cpp"
        ], 
        "symbol": "mongo::ProcessId::getCurrent()", 
        "object": "src/mongo/s/version_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version.cpp"
        ], 
        "symbol": "mongo::versionString", 
        "object": "src/mongo/s/version_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/log_process_details.cpp"
        ], 
        "symbol": "mongo::logProcessDetails()", 
        "object": "src/mongo/s/version_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/version_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::getHostNameCached()", 
        "object": "src/mongo/s/version_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/version_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/version_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version_reporting.cpp"
        ], 
        "symbol": "mongo::openSSLVersion(std::string const&, std::string const&)", 
        "object": "src/mongo/s/version_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/process_id.cpp"
        ], 
        "symbol": "mongo::ProcessId::toString() const", 
        "object": "src/mongo/s/version_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/s/version_mongos.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/buildinfo.cpp"
        ], 
        "symbol": "mongo::sysInfo()", 
        "object": "src/mongo/s/version_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/s/type_shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/type_shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/type_shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/type_shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/type_shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/type_shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/type_shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/type_shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/type_shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/type_shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/s/type_shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_shard_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/user_management_commands.cpp"
        ], 
        "symbol": "mongo::CmdAuthSchemaUpgrade::CmdAuthSchemaUpgrade()", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::getStatusFromCommandResult(mongo::BSONObj const&)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/user_management_commands.cpp"
        ], 
        "symbol": "mongo::CmdAuthSchemaUpgrade::slaveOk() const", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_fillServers(std::string)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authz_documents_update_guard.cpp"
        ], 
        "symbol": "mongo::AuthzDocumentsUpdateGuard::tryLock(mongo::StringData const&)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authz_documents_update_guard.cpp"
        ], 
        "symbol": "mongo::AuthzDocumentsUpdateGuard::AuthzDocumentsUpdateGuard(mongo::AuthorizationManager*)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/user_management_commands.cpp"
        ], 
        "symbol": "mongo::CmdAuthSchemaUpgrade::checkAuthForCommand(mongo::ClientBasic*, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::getGlobalAuthorizationManager()", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/user_management_commands.cpp"
        ], 
        "symbol": "mongo::CmdAuthSchemaUpgrade::adminOnly() const", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::appendCommandStatus(mongo::BSONObjBuilder&, mongo::Status const&)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authz_documents_update_guard.cpp"
        ], 
        "symbol": "mongo::AuthzDocumentsUpdateGuard::~AuthzDocumentsUpdateGuard()", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(mongo::ConnectionString const&, double)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::upgradeSchema(int, mongo::BSONObj const&)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/user_management_commands.cpp"
        ], 
        "symbol": "mongo::CmdAuthSchemaUpgrade::help(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&) const", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/user_management_commands.cpp"
        ], 
        "symbol": "mongo::CmdAuthSchemaUpgrade::locktype() const", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user_management_commands_parser.cpp"
        ], 
        "symbol": "mongo::auth::parseAuthSchemaUpgradeStepCommand(mongo::BSONObj const&, std::string const&, int*, bool*, mongo::BSONObj*)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/user_management_commands.cpp"
        ], 
        "symbol": "mongo::CmdAuthSchemaUpgrade::~CmdAuthSchemaUpgrade()", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/user_management_commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::CmdAuthSchemaUpgrade", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::convertExceptionCode(int)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/s/commands/auth_schema_upgrade_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::Status const&)", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/syncclusterconnection.cpp"
        ], 
        "symbol": "mongo::SyncClusterConnection::prepare(std::string&)", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::convertExceptionCode(int)", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(mongo::ConnectionString const&, double)", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version.cpp"
        ], 
        "symbol": "mongo::versionString", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBClientBase", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const*)", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastErrorString(mongo::BSONObj const&)", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/syncclusterconnection.cpp"
        ], 
        "symbol": "typeinfo for mongo::SyncClusterConnection", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/s/config_upgrade.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseResourcePattern(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/commands/cluster_plan_cache_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/s/commands/cluster_plan_cache_cmd.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::planCacheWrite", 
        "object": "src/mongo/s/commands/cluster_plan_cache_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/s/commands/cluster_plan_cache_cmd.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::planCacheRead", 
        "object": "src/mongo/s/commands/cluster_plan_cache_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/commands/cluster_plan_cache_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/commands/cluster_plan_cache_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/s/commands/cluster_plan_cache_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/s/commands/cluster_plan_cache_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/s/commands/cluster_plan_cache_cmd.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/s/commands/cluster_plan_cache_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnResource(mongo::ResourcePattern const&, mongo::ActionType)", 
        "object": "src/mongo/s/commands/cluster_plan_cache_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/s/commands/cluster_plan_cache_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/s/commands/cluster_plan_cache_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/s/commands/cluster_plan_cache_cmd.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/s/commands/cluster_plan_cache_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/commands/cluster_plan_cache_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/commands/cluster_plan_cache_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/s/commands/cluster_plan_cache_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/mongo_version_range_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::convertExceptionCode(int)", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/write_concern_options.cpp"
        ], 
        "symbol": "mongo::WriteConcernOptions::AllConfigs", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(mongo::ConnectionString const&, double)", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastErrorString(mongo::BSONObj const&)", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/s/config_upgrade_helpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/collection_metadata.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/collection_metadata.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/collection_metadata.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/collection_metadata.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::FieldRef()", 
        "object": "src/mongo/s/collection_metadata.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/collection_metadata.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/collection_metadata.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::parse(mongo::StringData const&)", 
        "object": "src/mongo/s/collection_metadata.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/collection_metadata.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/collection_metadata.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/collection_metadata.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/collection_metadata.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/collection_metadata.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/collection_metadata.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/collection_metadata.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/collection_metadata.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/collection_metadata.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/collection_metadata.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_update_document.cpp"
        ], 
        "symbol": "mongo::BatchedUpdateDocument::getUpdateExpr() const", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::getGtLtOp(mongo::BSONElement const&)", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_delete_document.cpp"
        ], 
        "symbol": "mongo::BatchedDeleteDocument::getQuery() const", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_update_document.cpp"
        ], 
        "symbol": "mongo::BatchedUpdateDocument::getUpsert() const", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_update_document.cpp"
        ], 
        "symbol": "mongo::BatchedUpdateDocument::getMulti() const", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_delete_document.cpp"
        ], 
        "symbol": "mongo::BatchedDeleteDocument::getLimit() const", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::Backoff::nextSleepMillis()", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_update_document.cpp"
        ], 
        "symbol": "mongo::BatchedUpdateDocument::getQuery() const", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/s/chunk_manager_targeter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_lockpings.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_lockpings.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_lockpings.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_lockpings.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_lockpings.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_lockpings.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::RemoveSaver::RemoveSaver(std::string const&, std::string const&, std::string const&)", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs.cpp"
        ], 
        "symbol": "mongo::replSet", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::RemoveSaver::~RemoveSaver()", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::shutdown()", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::removeRange(mongo::KeyRange const&, bool, bool, mongo::Helpers::RemoveSaver*, bool, bool)", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/string_data.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::StringData const&)", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/write_concern.cpp"
        ], 
        "symbol": "mongo::opReplicatedEnough(mongo::OpTime, mongo::BSONElement)", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::find(std::string const&, std::set<long long, std::less<long long>, std::allocator<long long> >&)", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/range_deleter_db_env.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version.cpp"
        ], 
        "symbol": "mongo::isSameMajorVersion(char const*)", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::jsTime()", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::~BackgroundJob()", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(std::string const&, double)", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::extendRangeBound(mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/write_concern_options.cpp"
        ], 
        "symbol": "mongo::WriteConcernOptions::AllConfigs", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version.cpp"
        ], 
        "symbol": "mongo::versionString", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::time_t_to_String_short(long)", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::getHostNameCached()", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::inShutdown()", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::BackgroundJob(bool)", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_fillServers(std::string)", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "typeinfo for mongo::BackgroundJob", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/write_concern_options.cpp"
        ], 
        "symbol": "mongo::WriteConcernOptions::Unacknowledged", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/balance.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/range_deleter_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/range_deleter_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/range_deleter_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/range_deleter_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/range_deleter_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/range_deleter_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_request.cpp"
        ], 
        "symbol": "mongo::BatchedCommandRequest::parseBSON(mongo::BSONObj const&, std::string*)", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/dbclient_safe_writer.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientSafeWriter", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_request.cpp"
        ], 
        "symbol": "mongo::BatchedCommandRequest::BatchedCommandRequest(mongo::BatchedCommandRequest::BatchType)", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::BatchedCommandResponse()", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batch_downconvert.cpp"
        ], 
        "symbol": "mongo::BatchSafeWriter::safeWriteBatch(mongo::DBClientBase*, mongo::BatchedCommandRequest const&, mongo::BatchedCommandResponse*)", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_request.cpp"
        ], 
        "symbol": "mongo::BatchedCommandRequest::getNS() const", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::toBSON() const", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_request.cpp"
        ], 
        "symbol": "mongo::BatchedCommandRequest::setNS(mongo::StringData const&)", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_request.cpp"
        ], 
        "symbol": "vtable for mongo::BatchedCommandRequest", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(mongo::ConnectionString const&, double)", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::appendImpersonatedUsers(mongo::BSONObjBuilder*)", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::~BatchedCommandResponse()", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::convertExceptionCode(int)", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/s/dbclient_multi_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::PeriodicTask::~PeriodicTask()", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::PeriodicTask::PeriodicTask()", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::checkAuthForCommand(mongo::ClientBasic*, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::_timeTracker", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "typeinfo for mongo::PeriodicTask", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::initSequential()", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::writebacklisten", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::writeBacksQueued", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/server_status.cpp"
        ], 
        "symbol": "mongo::ServerStatusMetric::ServerStatusMetric(std::string const&)", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/s/d_writeback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::lastError", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbmessage.cpp"
        ], 
        "symbol": "mongo::Message::toString() const", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/message.cpp"
        ], 
        "symbol": "mongo::doesOpGetAResponse(int)", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::prettyHostName()", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastErrorHolder::get(bool)", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/d_logic.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/synchronization.cpp"
        ], 
        "symbol": "mongo::Notification::waitToBeNotified()", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/synchronization.cpp"
        ], 
        "symbol": "mongo::Notification::Notification()", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::join()", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/db/range_deleter_stat_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbmessage.cpp"
        ], 
        "symbol": "mongo::replyToQuery(int, mongo::AbstractMessagingPort*, mongo::Message&, void*, int, int, int, long long)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastErrorHolder::startRequest(mongo::Message&, mongo::LastError*)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/parallel.cpp"
        ], 
        "symbol": "mongo::ParallelSortClusteredCursor::explain(mongo::BSONObjBuilder&)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::parse(std::string const&, std::string&)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastErrorHolder::get(bool)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/lite_parsed_query.cpp"
        ], 
        "symbol": "mongo::LiteParsedQuery::parseMaxTimeMSQuery(mongo::BSONObj const&)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::convertExceptionCode(int)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::UserException", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batch_upconvert.cpp"
        ], 
        "symbol": "mongo::msgToBatchRequests(mongo::Message const&, std::vector<mongo::BatchedCommandRequest*, std::allocator<mongo::BatchedCommandRequest*> >*)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(std::string const&, double)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::BatchedCommandResponse()", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::inprog", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::ReadPrefField", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/parallel.cpp"
        ], 
        "symbol": "mongo::ParallelSortClusteredCursor::isSharded()", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::isExplain() const", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::killop", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::lastError", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/commands_public.cpp"
        ], 
        "symbol": "mongo::Command::runAgainstRegistered(char const*, mongo::BSONObj&, mongo::BSONObjBuilder&, int)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/parallel.cpp"
        ], 
        "symbol": "mongo::ParallelSortClusteredCursor::getShardCursor(mongo::Shard const&)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclientcursor.cpp"
        ], 
        "symbol": "mongo::DBClientCursor::peekFirst()", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batch_upconvert.cpp"
        ], 
        "symbol": "mongo::batchErrorToLastError(mongo::BatchedCommandRequest const&, mongo::BatchedCommandResponse const&, mongo::LastError*)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::checkAuthForQuery(mongo::NamespaceString const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::checkAuthForGetMore(mongo::NamespaceString const&, long long)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logQueryAuthzCheck(mongo::ClientBasic*, mongo::NamespaceString const&, mongo::BSONObj const&, mongo::ErrorCodes::Error)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnResource(mongo::ResourcePattern const&, mongo::ActionType)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logInProgAuthzCheck(mongo::ClientBasic*, mongo::BSONObj const&, mongo::ErrorCodes::Error)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::~BatchedCommandResponse()", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::parseBSON(mongo::BSONObj const&, std::string*)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/parallel.cpp"
        ], 
        "symbol": "mongo::ParallelSortClusteredCursor::getQueryShards(std::set<mongo::Shard, std::less<mongo::Shard>, std::allocator<mongo::Shard> >&)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_request.cpp"
        ], 
        "symbol": "mongo::BatchedCommandRequest::getOrdered() const", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::getN() const", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/parallel.cpp"
        ], 
        "symbol": "mongo::ParallelSortClusteredCursor::init()", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_request.cpp"
        ], 
        "symbol": "mongo::BatchedCommandRequest::getNS() const", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp", 
            "src/mongo/db/client.cpp", 
            "src/mongo/client/clientAndShell.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getCurrent()", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/parallel.cpp"
        ], 
        "symbol": "mongo::ParallelSortClusteredCursor::ParallelSortClusteredCursor(mongo::QuerySpec const&, mongo::CommandInfo const&)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/parallel.cpp"
        ], 
        "symbol": "mongo::ParallelSortClusteredCursor::getPrimary()", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_request.cpp"
        ], 
        "symbol": "mongo::BatchedCommandRequest::setNS(mongo::StringData const&)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::appendCommandStatus(mongo::BSONObjBuilder&, mongo::Status const&)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logGetMoreAuthzCheck(mongo::ClientBasic*, mongo::NamespaceString const&, long long, mongo::ErrorCodes::Error)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/bson_validate.cpp"
        ], 
        "symbol": "mongo::validateBSON(char const*, unsigned long long)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/parallel.cpp"
        ], 
        "symbol": "mongo::ParallelSortClusteredCursor::~ParallelSortClusteredCursor()", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbmessage.cpp"
        ], 
        "symbol": "mongo::replyToQuery(int, mongo::AbstractMessagingPort*, mongo::Message&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logKillOpAuthzCheck(mongo::ClientBasic*, mongo::BSONObj const&, mongo::ErrorCodes::Error)", 
        "object": "src/mongo/s/strategy.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/s/config_server_checker_service.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::inShutdown()", 
        "object": "src/mongo/s/config_server_checker_service.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/s/config_server_checker_service.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/s/config_server_checker_service.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/s/config_server_checker_service.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/s/config_server_checker_service.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/s/config_server_checker_service.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/s/config_server_checker_service.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/synchronization.cpp"
        ], 
        "symbol": "mongo::Notification::waitToBeNotified()", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/synchronization.cpp"
        ], 
        "symbol": "mongo::Notification::Notification()", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::join()", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::timed_join(boost::posix_time::ptime const&)", 
        "object": "src/mongo/db/range_deleter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/balancer_policy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/balancer_policy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/balancer_policy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/balancer_policy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/balancer_policy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/balancer_policy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/balancer_policy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/balancer_policy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/balancer_policy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/balancer_policy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/balancer_policy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/balancer_policy.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_locks_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
        ], 
        "symbol": "mongo::MockRemoteDBServer::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::ErrorCodes::Error)", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_conn_registry.cpp"
        ], 
        "symbol": "mongo::MockConnRegistry::getConnStrHook()", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_connectHook", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
        ], 
        "symbol": "mongo::MockRemoteDBServer::remove(std::string const&, mongo::Query, int)", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_conn_registry.cpp"
        ], 
        "symbol": "mongo::MockConnRegistry::get()", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_connectHookMutex", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_conn_registry.cpp"
        ], 
        "symbol": "mongo::MockConnRegistry::addServer(mongo::MockRemoteDBServer*)", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
        ], 
        "symbol": "mongo::MockRemoteDBServer::~MockRemoteDBServer()", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_conn_registry.cpp"
        ], 
        "symbol": "mongo::MockConnRegistry::clear()", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
        ], 
        "symbol": "mongo::MockRemoteDBServer::MockRemoteDBServer(std::string const&)", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::clearPool()", 
        "object": "src/mongo/s/metadata_loader_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/s/config_server_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/config_server_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/s/config_server_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/config_server_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/config_server_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/config_server_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/config_server_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/config_server_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/config_server_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/config_server_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/config_server_tests.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/type_chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/type_chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/type_chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/type_chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/type_chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_chunk.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_collection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::maxKey(mongo::BSONObj const&)", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::parse(std::string const&, std::string&)", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientInterface::findN(std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> >&, std::string const&, mongo::Query, int, int, mongo::BSONObj const*, int)", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(mongo::ConnectionString const&, double)", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::minKey(mongo::BSONObj const&)", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const*)", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::DBWrite(mongo::StringData const&)", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/d_merge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_shard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_conn_registry.cpp"
        ], 
        "symbol": "mongo::MockConnRegistry::get()", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
        ], 
        "symbol": "mongo::MockRemoteDBServer::MockRemoteDBServer(std::string const&)", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
        ], 
        "symbol": "mongo::MockRemoteDBServer::shutdown()", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_conn_registry.cpp"
        ], 
        "symbol": "mongo::MockConnRegistry::getConnStrHook()", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "typeinfo for mongo::SocketException", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_connectHookMutex", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::PoolForHost::_maxPerHost", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
        ], 
        "symbol": "mongo::MockRemoteDBServer::reboot()", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_conn_registry.cpp"
        ], 
        "symbol": "mongo::MockConnRegistry::removeServer(std::string const&)", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_conn_registry.cpp"
        ], 
        "symbol": "mongo::MockConnRegistry::addServer(mongo::MockRemoteDBServer*)", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_connectHook", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::clearGlobalAuthorizationManager()", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
        ], 
        "symbol": "mongo::AuthzManagerExternalStateMock::AuthzManagerExternalStateMock()", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
        ], 
        "symbol": "mongo::MockRemoteDBServer::getServerAddress() const", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::AuthorizationManager(mongo::AuthzManagerExternalState*)", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::setGlobalAuthorizationManager(mongo::AuthorizationManager*)", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/shard_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/s/type_settings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/type_settings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/type_settings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/type_settings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/type_settings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_settings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/type_settings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/type_settings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_settings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/type_settings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_settings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/type_settings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_settings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/type_settings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_settings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/type_settings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/s/type_settings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_settings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_settings_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/db/field_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/write_error_detail.cpp"
        ], 
        "symbol": "mongo::WriteErrorDetail::getErrMessage() const", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batch_write_exec.cpp"
        ], 
        "symbol": "mongo::BatchWriteExec::BatchWriteExec(mongo::NSTargeter*, mongo::ShardResolver*, mongo::MultiCommandDispatch*)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_delete_document.cpp"
        ], 
        "symbol": "mongo::BatchedDeleteDocument::setLimit(int)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_request.cpp"
        ], 
        "symbol": "mongo::BatchedCommandRequest::isVerboseWC() const", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::getOk() const", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_request.cpp"
        ], 
        "symbol": "mongo::BatchedCommandRequest::setWriteConcern(mongo::BSONObj const&)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_request.cpp"
        ], 
        "symbol": "mongo::BatchedCommandRequest::getWriteConcern() const", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_request.cpp"
        ], 
        "symbol": "mongo::BatchedCommandRequest::getTargetingNS() const", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/write_error_detail.cpp"
        ], 
        "symbol": "mongo::WriteErrorDetail::getErrCode() const", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_update_request.cpp"
        ], 
        "symbol": "mongo::BatchedUpdateRequest::addToUpdates(mongo::BatchedUpdateDocument*)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::setOk(int)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_request.cpp"
        ], 
        "symbol": "mongo::BatchedCommandRequest::isWriteConcernSet() const", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::setErrMessage(mongo::StringData const&)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_delete_request.cpp"
        ], 
        "symbol": "mongo::BatchedDeleteRequest::setWriteConcern(mongo::BSONObj const&)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_delete_request.cpp"
        ], 
        "symbol": "mongo::BatchedDeleteRequest::BatchedDeleteRequest()", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_insert_request.cpp"
        ], 
        "symbol": "mongo::BatchedInsertRequest::BatchedInsertRequest()", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::BatchedCommandResponse()", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/config_coordinator.cpp"
        ], 
        "symbol": "mongo::ConfigCoordinator::executeBatch(mongo::BatchedCommandRequest const&, mongo::BatchedCommandResponse*, bool)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/wc_error_detail.cpp"
        ], 
        "symbol": "mongo::WCErrorDetail::getErrMessage() const", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::setErrCode(int)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_delete_document.cpp"
        ], 
        "symbol": "mongo::BatchedDeleteDocument::BatchedDeleteDocument()", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::getErrDetails() const", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/config_coordinator.cpp"
        ], 
        "symbol": "mongo::ConfigCoordinator::ConfigCoordinator(mongo::MultiCommandDispatch*, std::vector<mongo::ConnectionString, std::allocator<mongo::ConnectionString> > const&)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/wc_error_detail.cpp"
        ], 
        "symbol": "mongo::WCErrorDetail::getErrCode() const", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batch_write_exec.cpp"
        ], 
        "symbol": "mongo::BatchWriteExec::executeBatch(mongo::BatchedCommandRequest const&, mongo::BatchedCommandResponse*)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_delete_request.cpp"
        ], 
        "symbol": "mongo::BatchedDeleteRequest::addToDeletes(mongo::BatchedDeleteDocument*)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batch_write_exec.cpp"
        ], 
        "symbol": "mongo::BatchWriteExec::releaseStats()", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::getErrMessage() const", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_delete_document.cpp"
        ], 
        "symbol": "mongo::BatchedDeleteDocument::setQuery(mongo::BSONObj const&)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_request.cpp"
        ], 
        "symbol": "mongo::BatchedCommandRequest::isInsertIndexRequest() const", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_update_document.cpp"
        ], 
        "symbol": "mongo::BatchedUpdateDocument::setUpdateExpr(mongo::BSONObj const&)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::isErrDetailsSet() const", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_update_document.cpp"
        ], 
        "symbol": "mongo::BatchedUpdateDocument::setUpsert(bool)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_update_document.cpp"
        ], 
        "symbol": "mongo::BatchedUpdateDocument::setQuery(mongo::BSONObj const&)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_update_request.cpp"
        ], 
        "symbol": "mongo::BatchedUpdateRequest::BatchedUpdateRequest()", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_request.cpp"
        ], 
        "symbol": "vtable for mongo::BatchedCommandRequest", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_update_request.cpp"
        ], 
        "symbol": "mongo::BatchedUpdateRequest::setWriteConcern(mongo::BSONObj const&)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_request.cpp"
        ], 
        "symbol": "mongo::BatchedCommandRequest::sizeWriteOps() const", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::~BatchedCommandResponse()", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::getErrCode() const", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_update_document.cpp"
        ], 
        "symbol": "mongo::BatchedUpdateDocument::setMulti(bool)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::isWriteConcernErrorSet() const", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_fillServers(std::string)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_request.cpp"
        ], 
        "symbol": "mongo::BatchedCommandRequest::getNS() const", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_update_document.cpp"
        ], 
        "symbol": "mongo::BatchedUpdateDocument::BatchedUpdateDocument()", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_insert_request.cpp"
        ], 
        "symbol": "mongo::BatchedInsertRequest::addToDocuments(mongo::BSONObj const&)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::setN(long long)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::getWriteConcernError() const", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_request.cpp"
        ], 
        "symbol": "mongo::BatchedCommandRequest::setNS(mongo::StringData const&)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/s/cluster_write.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::parse(std::string const&, std::string&)", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::go()", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(std::string const&, double)", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::~BackgroundJob()", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::inShutdown()", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::BackgroundJob(bool)", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "typeinfo for mongo::BackgroundJob", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/writeback_listener.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_legacy.cpp"
        ], 
        "symbol": "mongo::IndexLegacy::getMissingField(mongo::Collection*, mongo::BSONObj const&)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::KeyPattern(mongo::BSONObj const&)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNsFullyQualified(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::findIndexByPrefix(mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::splitChunk", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/fetch.cpp"
        ], 
        "symbol": "mongo::FetchStage::FetchStage(mongo::WorkingSet*, mongo::PlanStage*, mongo::MatchExpression const*)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(std::string const&, double)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::extendRangeBound(mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseResourcePattern(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::checkAuthForCommand(mongo::ClientBasic*, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::toKeyFormat(mongo::BSONObj const&)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/internal_runner.cpp"
        ], 
        "symbol": "mongo::InternalRunner::InternalRunner(std::string const&, mongo::PlanStage*, mongo::WorkingSet*)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnResource(mongo::ResourcePattern const&, mongo::ActionType)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::extractFields(mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/index_scan.cpp"
        ], 
        "symbol": "mongo::IndexScan::IndexScan(mongo::IndexScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_fillServers(std::string)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::clientReadable() const", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::splitVector", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::replaceFieldNames(mongo::BSONObj const&) const", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/d_split.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNsFullyQualified(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::splitChunk", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(mongo::ConnectionString const&, double)", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnResource(mongo::ResourcePattern const&, mongo::ActionType)", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/commands/cluster_merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_chunk_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/mongo_version_range.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/stringutils.cpp"
        ], 
        "symbol": "mongo::versionCmp(mongo::StringData, mongo::StringData)", 
        "object": "src/mongo/s/mongo_version_range.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/mongo_version_range.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/mongo_version_range.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/mongo_version_range.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/mongo_version_range.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/mongo_version_range.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/mongo_version_range.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/mongo_version_range.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/mongo_version_range.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/s/config_upgrade_v4_to_v5.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/config_upgrade_v4_to_v5.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/synchronization.cpp"
        ], 
        "symbol": "mongo::Notification::notifyOne()", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::join()", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::inShutdown()", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/range_deleter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "mongo::StartupTest::~StartupTest()", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::isSpecial() const", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "mongo::StartupTest::StartupTest()", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::getFieldNames(std::set<std::string, std::less<std::string>, std::allocator<std::string> >&) const", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::KeyPattern(mongo::BSONObj const&)", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::_okForStorage(bool, bool) const", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "typeinfo for mongo::StartupTest", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::extractSingleKey(mongo::BSONObj const&) const", 
        "object": "src/mongo/s/shardkey.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_database.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_database.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_database.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_database.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_database.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_database.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::RemoveSaver::RemoveSaver(std::string const&, std::string const&, std::string const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/elapsed_tracker.cpp"
        ], 
        "symbol": "mongo::ElapsedTracker::ElapsedTracker(int, int)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::grantInternalAuthorization()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::findById(mongo::Client&, char const*, mongo::BSONObj, mongo::BSONObj&, bool*, bool*)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::ExceptionInfo::append(mongo::BSONObjBuilder&, char const*, char const*) const", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "mongo::StartupTest::StartupTest()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/internal_runner.cpp"
        ], 
        "symbol": "mongo::InternalRunner::InternalRunner(std::string const&, mongo::PlanStage*, mongo::WorkingSet*)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::shutdown()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::KeyPattern(mongo::BSONObj const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalRead::GlobalRead(int)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::findIndexByPrefix(mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs.cpp"
        ], 
        "symbol": "mongo::theReplSet", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pagefault.cpp"
        ], 
        "symbol": "mongo::PageFaultException::touch()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "typeinfo for mongo::StartupTest", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pagefault.cpp"
        ], 
        "symbol": "mongo::PageFaultRetryableSection::~PageFaultRetryableSection()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/write_concern.cpp"
        ], 
        "symbol": "mongo::opReplicatedEnough(mongo::OpTime, int)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::numRecords() const", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/kill_current_op.cpp"
        ], 
        "symbol": "mongo::KillCurrentOp::checkForInterrupt(bool)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/replication_server_status.cpp"
        ], 
        "symbol": "mongo::anyReplEnabled()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastError(bool, bool, int, int)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::userCreateNS(char const*, mongo::BSONObj, std::string&, bool, bool*)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::assertWriteLocked(mongo::StringData const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_service.cpp"
        ], 
        "symbol": "mongo::getGlobalFailPointRegistry()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::SpinLock()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/fetch.cpp"
        ], 
        "symbol": "mongo::FetchStage::FetchStage(mongo::WorkingSet*, mongo::PlanStage*, mongo::MatchExpression const*)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(std::string const&, double)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::operator<<(mongo::logger::Tee*)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::FailPoint()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::extendRangeBound(mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::inferKeyPattern(mongo::BSONObj const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pagefault.cpp"
        ], 
        "symbol": "mongo::PageFaultRetryableSection::PageFaultRetryableSection()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::slowShouldFailOpenBlock()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNsFullyQualified(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::DurableInterface::_impl", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::LockMongoFilesShared::mmmutex", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::removeRange(mongo::KeyRange const&, bool, bool, mongo::Helpers::RemoveSaver*, bool, bool)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::killCurrentOp", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::isAuthEnabled() const", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalRead::~GlobalRead()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::internal", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/hasher.cpp"
        ], 
        "symbol": "mongo::BSONElementHasher::hash64(mongo::BSONElement const&, int)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::RemoveSaver::~RemoveSaver()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::dbexit(mongo::ExitCode, char const*)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::checkAuthForCommand(mongo::ClientBasic*, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::moveChunk", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::toKeyFormat(mongo::BSONObj const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/ramlog.cpp"
        ], 
        "symbol": "mongo::RamLog::get(std::string const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/write_concern.cpp"
        ], 
        "symbol": "mongo::waitForReplication(mongo::OpTime, int, int)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::isLocked()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnResource(mongo::ResourcePattern const&, mongo::ActionType)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::dataSize() const", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::~SpinLock()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_registry.cpp"
        ], 
        "symbol": "mongo::FailPointRegistry::addFailPoint(std::string const&, mongo::FailPoint*)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::setMessage(char const*, std::string, unsigned long long, int)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "mongo::StartupTest::~StartupTest()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::Record::likelyInPhysicalMemory() const", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs_config.cpp"
        ], 
        "symbol": "mongo::ReplSetConfig::getMajority() const", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::upsert(std::string const&, mongo::BSONObj const&, bool)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/index_scan.cpp"
        ], 
        "symbol": "mongo::IndexScan::IndexScan(mongo::IndexScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_fillServers(std::string)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::rec() const", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::DBWrite(mongo::StringData const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::getGlobalAuthorizationManager()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::Record::touch(bool) const", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::createCollection(mongo::StringData const&, bool, mongo::BSONObj const*, bool)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::shouldFailCloseBlock()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/elapsed_tracker.cpp"
        ], 
        "symbol": "mongo::ElapsedTracker::intervalHasElapsed()", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/oplog.cpp"
        ], 
        "symbol": "mongo::logOp(char const*, char const*, mongo::BSONObj const&, mongo::BSONObj*, bool*, bool, mongo::BSONObj const*)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::createIndex(mongo::BSONObj, bool, mongo::IndexCatalog::ShutdownBehavior)", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::extractSingleKey(mongo::BSONObj const&) const", 
        "object": "src/mongo/s/d_migrate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/s/type_changelog_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/type_changelog_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/type_changelog_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/type_changelog_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_changelog_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/type_changelog_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/type_changelog_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_changelog_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/type_changelog_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/type_changelog_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_changelog_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/type_changelog_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_changelog_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/type_changelog_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_changelog_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/type_changelog_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/s/type_changelog_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_changelog_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_changelog_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(std::string const&, double)", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::toString() const", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/s/metadata_loader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_config_version.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_config_version.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_config_version.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_config_version.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_config_version.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_config_version.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/s/type_mongos_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/s/type_mongos_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/s/type_mongos_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_mongos_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/type_mongos_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/s/type_mongos_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/s/type_mongos_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_mongos_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/s/type_mongos_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/s/type_mongos_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/s/type_mongos_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/s/type_mongos_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/type_mongos_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/type_mongos_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/s/type_mongos_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/s/type_mongos_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/type_mongos_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/type_mongos_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(std::string const&, double)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::Date_t::toString() const", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::jsTimeVirtualThreadSkew(long long)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::setThreadName(mongo::StringData)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::jsTime()", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::Array() const", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::checkAuthForCommand(mongo::ClientBasic*, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::testCommandsEnabled", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::join()", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::jsTimeVirtualSkew(long long)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_fillServers(std::string)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/distlock_test.cpp"
    }
]