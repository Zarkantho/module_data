[
    {
        "symbol": "mongo::Cloner::cloneFrom(mongo::Client::Context&, std::string const&, mongo::CloneOptions const&, std::string&, int*, std::set<std::string, std::less<std::string>, std::allocator<std::string> >*)", 
        "object": "src/mongo/db/cloner.cpp", 
        "used_by": [
            "src/mongo/db/repl/master_slave.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Cloner::Cloner()", 
        "object": "src/mongo/db/cloner.cpp", 
        "used_by": [
            "src/mongo/db/repl/rs_initialsync.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Cloner::copyCollectionFromRemote(std::string const&, std::string const&, std::string&)", 
        "object": "src/mongo/db/cloner.cpp", 
        "used_by": [
            "src/mongo/db/repl/rs_rollback.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Cloner::go(mongo::Client::Context&, std::string const&, mongo::CloneOptions const&, std::set<std::string, std::less<std::string>, std::allocator<std::string> >*, std::string&, int*)", 
        "object": "src/mongo/db/cloner.cpp", 
        "used_by": [
            "src/mongo/db/repl/rs_initialsync.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::~IndexCatalog()", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::IndexBuildBlock::IndexBuildBlock(mongo::IndexCatalog*, mongo::StringData const&, mongo::DiskLoc const&)", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/dbtests/indexupdatetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::IndexBuildBlock::~IndexBuildBlock()", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/dbtests/indexupdatetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::findIndexByName(mongo::StringData const&, bool)", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/dbtests/indexupdatetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::getDescriptor(int)", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/dbtests/indexcatalogtests.cpp", 
            "src/mongo/db/structure/collection.cpp", 
            "src/mongo/dbtests/query_stage_merge_sort.cpp", 
            "src/mongo/db/exec/2dnear.cpp", 
            "src/mongo/db/geo/haystack.cpp", 
            "src/mongo/db/prefetch.cpp", 
            "src/mongo/dbtests/query_stage_and.cpp", 
            "src/mongo/dbtests/query_stage_tests.cpp", 
            "src/mongo/db/query/get_runner.cpp", 
            "src/mongo/db/exec/text.cpp", 
            "src/mongo/db/query/stage_builder.cpp", 
            "src/mongo/dbtests/query_single_solution_runner.cpp", 
            "src/mongo/db/exec/stagedebug_cmd.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/commands/validate.cpp", 
            "src/mongo/db/commands/mr.cpp", 
            "src/mongo/db/commands/geonear.cpp", 
            "src/mongo/db/commands/rename_collection.cpp", 
            "src/mongo/dbtests/query_multi_plan_runner.cpp", 
            "src/mongo/db/exec/2d.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::checkNoIndexConflicts(mongo::BSONObj const&)", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::findIndexByKeyPattern(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/exec/s2near.cpp", 
            "src/mongo/db/dbhelpers.cpp", 
            "src/mongo/db/exec/stagedebug_cmd.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::numIndexesTotal() const", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection.cpp", 
            "src/mongo/db/commands/rename_collection.cpp", 
            "src/mongo/db/prefetch.cpp", 
            "src/mongo/db/commands/drop_indexes.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/index_rebuilder.cpp", 
            "src/mongo/db/commands/mr.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::ensureHaveIdIndex()", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/repl/oplog.cpp", 
            "src/mongo/dbtests/oplogstarttests.cpp", 
            "src/mongo/dbtests/repltests.cpp", 
            "src/mongo/db/database.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::numIndexesReady() const", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/query/get_runner.cpp", 
            "src/mongo/dbtests/indexcatalogtests.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/index_rebuilder.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::getIndex(mongo::IndexDescriptor const*)", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection.cpp", 
            "src/mongo/db/exec/2dnear.cpp", 
            "src/mongo/db/geo/haystack.cpp", 
            "src/mongo/db/prefetch.cpp", 
            "src/mongo/db/exec/index_scan.cpp", 
            "src/mongo/db/query/stage_builder.cpp", 
            "src/mongo/db/exec/stagedebug_cmd.cpp", 
            "src/mongo/db/commands/validate.cpp", 
            "src/mongo/db/exec/2d.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::dropIndex(int)", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/commands/drop_indexes.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::indexRecord(mongo::BSONObj const&, mongo::DiskLoc const&)", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::findIdIndex()", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection.cpp", 
            "src/mongo/db/db.cpp", 
            "src/mongo/db/query/idhack_runner.cpp", 
            "src/mongo/db/query/get_runner.cpp", 
            "src/mongo/db/dbhelpers.cpp", 
            "src/mongo/db/commands/dbhash.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::prepOneUnfinishedIndex()", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/index_rebuilder.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::markMultikey(mongo::IndexDescriptor const*, bool)", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/structure/btree/state.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::IndexCatalog(mongo::Collection*, mongo::NamespaceDetails*)", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::findIndexByPrefix(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/dbhelpers.cpp", 
            "src/mongo/s/d_split.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/s/d_migrate.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::blowAwayInProgressIndexEntries()", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/index_rebuilder.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::unindexRecord(mongo::BSONObj const&, mongo::DiskLoc const&, bool)", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::dropAllIndexes(bool)", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/compact.cpp", 
            "src/mongo/db/commands/drop_indexes.cpp", 
            "src/mongo/dbtests/indexupdatetests.cpp", 
            "src/mongo/db/database.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::ok() const", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/ops/update.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::fixIndexKey(mongo::BSONObj const&)", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/dbtests/indexupdatetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::getBtreeBasedIndex(mongo::IndexDescriptor const*)", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/dbhelpers.cpp", 
            "src/mongo/db/index/btree_based_builder.cpp", 
            "src/mongo/db/query/idhack_runner.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::getBtreeIndex(mongo::IndexDescriptor const*)", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/exec/index_scan.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::IndexBuildBlock::success()", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/dbtests/indexupdatetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::createIndex(mongo::BSONObj, bool)", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/compact.cpp", 
            "src/mongo/dbtests/indexcatalogtests.cpp", 
            "src/mongo/db/commands/rename_collection.cpp", 
            "src/mongo/dbtests/querytests.cpp", 
            "src/mongo/dbtests/counttests.cpp", 
            "src/mongo/db/commands/write_commands/batch_executor.cpp", 
            "src/mongo/db/commands/drop_indexes.cpp", 
            "src/mongo/s/d_migrate.cpp", 
            "src/mongo/dbtests/indexupdatetests.cpp", 
            "src/mongo/db/index_rebuilder.cpp", 
            "src/mongo/db/dbhelpers.cpp", 
            "src/mongo/db/index_builder.cpp", 
            "src/mongo/db/commands/mr.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexCatalog::_getAccessMethodName(mongo::BSONObj const&)", 
        "object": "src/mongo/db/catalog/index_catalog.cpp", 
        "used_by": [
            "src/mongo/db/index_legacy.cpp", 
            "src/mongo/db/exec/index_scan.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBuilder<mongo::BtreeData_V0>::BtreeBuilder(bool, mongo::BtreeInMemoryState*)", 
        "object": "src/mongo/db/structure/btree/btreebuilder.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_based_builder.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBuilder<mongo::BtreeData_V1>::BtreeBuilder(bool, mongo::BtreeInMemoryState*)", 
        "object": "src/mongo/db/structure/btree/btreebuilder.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_based_builder.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBuilder<mongo::BtreeData_V1>::commit(bool)", 
        "object": "src/mongo/db/structure/btree/btreebuilder.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_based_builder.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBuilder<mongo::BtreeData_V0>::addKey(mongo::BSONObj&, mongo::DiskLoc)", 
        "object": "src/mongo/db/structure/btree/btreebuilder.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_based_builder.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBuilder<mongo::BtreeData_V1>::addKey(mongo::BSONObj&, mongo::DiskLoc)", 
        "object": "src/mongo/db/structure/btree/btreebuilder.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_based_builder.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBuilder<mongo::BtreeData_V0>::commit(bool)", 
        "object": "src/mongo/db/structure/btree/btreebuilder.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_based_builder.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V0>::bt_insert(mongo::BtreeInMemoryState*, mongo::DiskLoc, mongo::DiskLoc, mongo::BSONObj const&, bool, bool) const", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_interface.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V1>::wouldCreateDup(mongo::BtreeInMemoryState const*, mongo::DiskLoc const&, mongo::KeyV1 const&, mongo::DiskLoc const&) const", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_interface.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V0>::locate(mongo::BtreeInMemoryState const*, mongo::DiskLoc const&, mongo::BSONObj const&, int&, bool&, mongo::DiskLoc const&, int) const", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_interface.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V0>::wouldCreateDup(mongo::BtreeInMemoryState const*, mongo::DiskLoc const&, mongo::KeyBson const&, mongo::DiskLoc const&) const", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_interface.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V1>::locate(mongo::BtreeInMemoryState const*, mongo::DiskLoc const&, mongo::BSONObj const&, int&, bool&, mongo::DiskLoc const&, int) const", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_interface.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V1>::advanceTo(mongo::BtreeInMemoryState const*, mongo::DiskLoc&, int&, mongo::BSONObj const&, int, bool, std::vector<mongo::BSONElement const*, std::allocator<mongo::BSONElement const*> > const&, std::vector<bool, std::allocator<bool> > const&, int) const", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_interface.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V0>::customLocate(mongo::BtreeInMemoryState const*, mongo::DiskLoc&, int&, mongo::BSONObj const&, int, bool, std::vector<mongo::BSONElement const*, std::allocator<mongo::BSONElement const*> > const&, std::vector<bool, std::allocator<bool> > const&, int, std::pair<mongo::DiskLoc, int>&)", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_interface.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V0>::dupKeyError(mongo::IndexDescriptor const*, mongo::KeyBson const&)", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_interface.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V1>::unindex(mongo::BtreeInMemoryState*, mongo::DiskLoc, mongo::BSONObj const&, mongo::DiskLoc) const", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_interface.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V1>::bt_insert(mongo::BtreeInMemoryState*, mongo::DiskLoc, mongo::DiskLoc, mongo::BSONObj const&, bool, bool) const", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_interface.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V0>::fullValidate(mongo::DiskLoc const&, mongo::BSONObj const&, long long*, bool, unsigned int) const", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_interface.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V0>::addBucket(mongo::BtreeInMemoryState*)", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_based_builder.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V0>::findSingle(mongo::BtreeInMemoryState const*, mongo::DiskLoc const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_access_method.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V1>::advance(mongo::DiskLoc const&, int&, int, char const*) const", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_interface.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V1>::addBucket(mongo::BtreeInMemoryState*)", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_based_builder.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V1>::dupKeyError(mongo::IndexDescriptor const*, mongo::KeyV1 const&)", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_interface.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V0>::advanceTo(mongo::BtreeInMemoryState const*, mongo::DiskLoc&, int&, mongo::BSONObj const&, int, bool, std::vector<mongo::BSONElement const*, std::allocator<mongo::BSONElement const*> > const&, std::vector<bool, std::allocator<bool> > const&, int) const", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_interface.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V0>::unindex(mongo::BtreeInMemoryState*, mongo::DiskLoc, mongo::BSONObj const&, mongo::DiskLoc) const", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_interface.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V1>::findSingle(mongo::BtreeInMemoryState const*, mongo::DiskLoc const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_access_method.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V1>::customLocate(mongo::BtreeInMemoryState const*, mongo::DiskLoc&, int&, mongo::BSONObj const&, int, bool, std::vector<mongo::BSONElement const*, std::allocator<mongo::BSONElement const*> > const&, std::vector<bool, std::allocator<bool> > const&, int, std::pair<mongo::DiskLoc, int>&)", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_interface.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V0>::advance(mongo::DiskLoc const&, int&, int, char const*) const", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_interface.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BtreeBucket<mongo::BtreeData_V1>::fullValidate(mongo::DiskLoc const&, mongo::BSONObj const&, long long*, bool, unsigned int) const", 
        "object": "src/mongo/db/structure/btree/btree.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_interface.cpp"
        ]
    }, 
    {
        "symbol": "mongo::CappedIterator::CappedIterator(mongo::Collection const*, mongo::DiskLoc const&, bool, mongo::CollectionScanParams::Direction const&)", 
        "object": "src/mongo/db/structure/collection_iterator.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FlatIterator::FlatIterator(mongo::Collection const*, mongo::DiskLoc const&, mongo::CollectionScanParams::Direction const&)", 
        "object": "src/mongo/db/structure/collection_iterator.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Extent::dump()", 
        "object": "src/mongo/db/storage/extent.cpp", 
        "used_by": [
            "src/mongo/db/commands/validate.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Extent::initialSize(int)", 
        "object": "src/mongo/db/storage/extent.cpp", 
        "used_by": [
            "src/mongo/dbtests/pdfiletests.cpp", 
            "src/mongo/db/database.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Extent::followupSize(int, int)", 
        "object": "src/mongo/db/storage/extent.cpp", 
        "used_by": [
            "src/mongo/dbtests/pdfiletests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Extent::markEmpty()", 
        "object": "src/mongo/db/storage/extent.cpp", 
        "used_by": [
            "src/mongo/db/compact.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Extent::validates(mongo::DiskLoc, mongo::BSONArrayBuilder*)", 
        "object": "src/mongo/db/storage/extent.cpp", 
        "used_by": [
            "src/mongo/db/compact.cpp", 
            "src/mongo/db/commands/validate.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Extent::maxSize()", 
        "object": "src/mongo/db/storage/extent.cpp", 
        "used_by": [
            "src/mongo/dbtests/pdfiletests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::getJournalCommitInterval()", 
        "object": "src/mongo/db/storage_options.cpp", 
        "used_by": [
            "src/mongo/db/commands/parameters.cpp"
        ]
    }, 
    {
        "symbol": "mongo::setJournalCommitInterval(unsigned int)", 
        "object": "src/mongo/db/storage_options.cpp", 
        "used_by": [
            "src/mongo/db/commands/parameters.cpp"
        ]
    }, 
    {
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/storage_options.cpp", 
        "used_by": [
            "src/mongo/db/mongod_options.cpp", 
            "src/mongo/dbtests/namespacetests.cpp", 
            "src/mongo/dbtests/runner_registry.cpp", 
            "src/mongo/db/dur_journal.cpp", 
            "src/mongo/dbtests/query_stage_fetch.cpp", 
            "src/mongo/db/query/get_runner.cpp", 
            "src/mongo/dbtests/extsorttests.cpp", 
            "src/mongo/db/storage/data_file.cpp", 
            "src/mongo/db/database_holder.cpp", 
            "src/mongo/db/repl/rs_initialsync.cpp", 
            "src/mongo/db/repl/rs.cpp", 
            "src/mongo/db/dur_preplogbuffer.cpp", 
            "src/mongo/dbtests/oplogstarttests.cpp", 
            "src/mongo/db/auth/authz_manager_external_state_d.cpp", 
            "src/mongo/db/database.cpp", 
            "src/mongo/db/index_builder.cpp", 
            "src/mongo/db/repl/sync_source_feedback.cpp", 
            "src/mongo/db/db.cpp", 
            "src/mongo/db/commands/write_commands/batch_executor.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/dbhelpers.cpp", 
            "src/mongo/db/commands/rename_collection.cpp", 
            "src/mongo/db/introspect.cpp", 
            "src/mongo/db/query/new_find.cpp", 
            "src/mongo/db/repl/master_slave.cpp", 
            "src/mongo/dbtests/query_stage_merge_sort.cpp", 
            "src/mongo/dbtests/replsettests.cpp", 
            "src/mongo/dbtests/query_stage_sort.cpp", 
            "src/mongo/dbtests/query_stage_collscan.cpp", 
            "src/mongo/dbtests/documentsourcetests.cpp", 
            "src/mongo/db/pipeline/document_source_cursor.cpp", 
            "src/mongo/dbtests/query_multi_plan_runner.cpp", 
            "src/mongo/db/commands/pipeline_command.cpp", 
            "src/mongo/tools/tool_options.cpp", 
            "src/mongo/db/dur.cpp", 
            "src/mongo/db/durop.cpp", 
            "src/mongo/db/client.cpp", 
            "src/mongo/db/prefetch.cpp", 
            "src/mongo/db/repl/rs_config.cpp", 
            "src/mongo/dbtests/queryutiltests.cpp", 
            "src/mongo/tools/tool.cpp", 
            "src/mongo/dbtests/counttests.cpp", 
            "src/mongo/dbtests/query_single_solution_runner.cpp", 
            "src/mongo/db/repl/replication_server_status.cpp", 
            "src/mongo/dbtests/dbhelper_tests.cpp", 
            "src/mongo/db/commands/find_and_modify.cpp", 
            "src/mongo/db/extsort.cpp", 
            "src/mongo/dbtests/perftests.cpp", 
            "src/mongo/db/commands/touch.cpp", 
            "src/mongo/dbtests/clienttests.cpp", 
            "src/mongo/db/pipeline/pipeline_d.cpp", 
            "src/mongo/dbtests/query_stage_tests.cpp", 
            "src/mongo/dbtests/basictests.cpp", 
            "src/mongo/dbtests/indexcatalogtests.cpp", 
            "src/mongo/dbtests/query_stage_and.cpp", 
            "src/mongo/db/commands/collection_to_capped.cpp", 
            "src/mongo/db/repl/oplog.cpp", 
            "src/mongo/db/repl/sync.cpp", 
            "src/mongo/db/storage/durable_mapped_file.cpp", 
            "src/mongo/s/d_migrate.cpp", 
            "src/mongo/db/dbcommands_admin.cpp", 
            "src/mongo/dbtests/querytests.cpp", 
            "src/mongo/db/modules/subscription/src/snmp/snmp.cpp", 
            "src/mongo/db/ops/count.cpp", 
            "src/mongo/db/index_rebuilder.cpp", 
            "src/mongo/db/commands/mr.cpp", 
            "src/mongo/tools/dump.cpp", 
            "src/mongo/db/structure/collection.cpp", 
            "src/mongo/dbtests/mmaptests.cpp", 
            "src/mongo/db/commands/test_commands.cpp", 
            "src/mongo/db/repl/rs_sync.cpp", 
            "src/mongo/db/dur_recover.cpp", 
            "src/mongo/db/clientcursor.cpp", 
            "src/mongo/db/repl/rs_rollback.cpp", 
            "src/mongo/db/compact.cpp", 
            "src/mongo/db/ttl.cpp", 
            "src/mongo/dbtests/indexupdatetests.cpp", 
            "src/mongo/db/commands/apply_ops.cpp", 
            "src/mongo/s/d_split.cpp", 
            "src/mongo/dbtests/pdfiletests.cpp", 
            "src/mongo/db/dbeval.cpp", 
            "src/mongo/db/catalog/ondisk/namespace_index.cpp", 
            "src/mongo/dbtests/repltests.cpp", 
            "src/mongo/dbtests/matchertests.cpp", 
            "src/mongo/dbtests/framework_options.cpp"
        ]
    }, 
    {
        "symbol": "mongo::isJournalingEnabled()", 
        "object": "src/mongo/db/storage_options.cpp", 
        "used_by": [
            "src/mongo/db/commands/parameters.cpp"
        ]
    }, 
    {
        "symbol": "typeinfo for mongo::DBDirectClient", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/dbtests/merge_chunk_tests.cpp", 
            "src/mongo/dbtests/sharding.cpp", 
            "src/mongo/dbtests/config_upgrade_tests.cpp", 
            "src/mongo/dbtests/config_server_fixture.cpp"
        ]
    }, 
    {
        "symbol": "mongo::exitCleanly(mongo::ExitCode)", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/db/db.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DBDirectClient::query(std::string const&, mongo::Query, int, int, mongo::BSONObj const*, int, int)", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/dbtests/merge_chunk_tests.cpp", 
            "src/mongo/db/ttl.cpp", 
            "src/mongo/dbtests/config_server_fixture.cpp", 
            "src/mongo/dbtests/sharding.cpp", 
            "src/mongo/dbtests/dbhelper_tests.cpp", 
            "src/mongo/db/commands/drop_indexes.cpp", 
            "src/mongo/dbtests/config_upgrade_tests.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/commands/mr.cpp", 
            "src/mongo/db/restapi.cpp", 
            "src/mongo/dbtests/clienttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::createDirectClient()", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/scripting/engine.cpp", 
            "src/mongo/scripting/v8_db.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DBDirectClient::_lookupAvailableOptions()", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/dbtests/merge_chunk_tests.cpp", 
            "src/mongo/dbtests/sharding.cpp", 
            "src/mongo/dbtests/config_upgrade_tests.cpp", 
            "src/mongo/dbtests/config_server_fixture.cpp"
        ]
    }, 
    {
        "symbol": "mongo::lockFile", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/dbtests/framework.cpp"
        ]
    }, 
    {
        "symbol": "mongo::_diaglog", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/db/db.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/mongod_options.cpp"
        ]
    }, 
    {
        "symbol": "mongo::mongoAbort(char const*)", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/db/dur.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DBDirectClient::call(mongo::Message&, mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/dbtests/merge_chunk_tests.cpp", 
            "src/mongo/dbtests/sharding.cpp", 
            "src/mongo/dbtests/config_upgrade_tests.cpp", 
            "src/mongo/dbtests/config_server_fixture.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BSONElementManipulator::SetNumber(double)", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/db/namespace_details.cpp"
        ]
    }, 
    {
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/dbtests/repltests.cpp", 
            "src/mongo/dbtests/runner_registry.cpp", 
            "src/mongo/db/commands/find_and_modify.cpp", 
            "src/mongo/dbtests/query_stage_fetch.cpp", 
            "src/mongo/db/repl/master_slave.cpp", 
            "src/mongo/s/d_merge.cpp", 
            "src/mongo/db/commands/drop_indexes.cpp", 
            "src/mongo/dbtests/perftests.cpp", 
            "src/mongo/db/modules/subscription/src/snmp/serverstatus_client.cpp", 
            "src/mongo/dbtests/query_stage_sort.cpp", 
            "src/mongo/dbtests/query_stage_collscan.cpp", 
            "src/mongo/dbtests/clienttests.cpp", 
            "src/mongo/dbtests/documentsourcetests.cpp", 
            "src/mongo/dbtests/btreebuildertests.cpp", 
            "src/mongo/db/pipeline/pipeline_d.cpp", 
            "src/mongo/dbtests/query_stage_merge_sort.cpp", 
            "src/mongo/db/repl/rs_config.cpp", 
            "src/mongo/dbtests/query_multi_plan_runner.cpp", 
            "src/mongo/dbtests/dbhelper_tests.cpp", 
            "src/mongo/dbtests/jstests.cpp", 
            "src/mongo/dbtests/query_stage_tests.cpp", 
            "src/mongo/dbtests/replsettests.cpp", 
            "src/mongo/db/repl/rs.cpp", 
            "src/mongo/db/restapi.cpp", 
            "src/mongo/db/ttl.cpp", 
            "src/mongo/dbtests/oplogstarttests.cpp", 
            "src/mongo/dbtests/directclienttests.cpp", 
            "src/mongo/db/auth/authz_manager_external_state_d.cpp", 
            "src/mongo/db/database.cpp", 
            "src/mongo/dbtests/query_stage_and.cpp", 
            "src/mongo/dbtests/extsorttests.cpp", 
            "src/mongo/dbtests/queryutiltests.cpp", 
            "src/mongo/dbtests/indexupdatetests.cpp", 
            "src/mongo/dbtests/gridfstest.cpp", 
            "src/mongo/dbtests/perf/perftest.cpp", 
            "src/mongo/db/repl/oplog.cpp", 
            "src/mongo/dbtests/commandtests.cpp", 
            "src/mongo/dbtests/updatetests.cpp", 
            "src/mongo/tools/tool.cpp", 
            "src/mongo/dbtests/querytests.cpp", 
            "src/mongo/db/repl/write_concern.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/dbtests/query_single_solution_runner.cpp", 
            "src/mongo/db/commands/mr.cpp", 
            "src/mongo/db/db.cpp", 
            "src/mongo/db/commands/apply_ops.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DBDirectClient::count(std::string const&, mongo::BSONObj const&, int, int, int)", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/dbtests/merge_chunk_tests.cpp", 
            "src/mongo/dbtests/config_upgrade_tests.cpp", 
            "src/mongo/db/db.cpp", 
            "src/mongo/dbtests/clienttests.cpp", 
            "src/mongo/dbtests/indexupdatetests.cpp", 
            "src/mongo/dbtests/replsettests.cpp", 
            "src/mongo/db/commands/mr.cpp", 
            "src/mongo/db/repl/rs_config.cpp", 
            "src/mongo/dbtests/sharding.cpp", 
            "src/mongo/dbtests/config_server_fixture.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BSONElementManipulator::SetLong(long long)", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/db/namespace_details.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DiagLog::flush()", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/db/db.cpp", 
            "src/mongo/db/dbcommands.cpp"
        ]
    }, 
    {
        "symbol": "mongo::inShutdown()", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/client/dbclientcursor.cpp", 
            "src/mongo/util/net/listen.cpp", 
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/db/auth/user_cache_invalidator_job.cpp", 
            "src/mongo/db/repl/bgsync.cpp", 
            "src/mongo/db/range_deleter.cpp", 
            "src/mongo/db/dur_journal.cpp", 
            "src/mongo/db/storage/durable_mapped_file.cpp", 
            "src/mongo/db/repl/write_concern.cpp", 
            "src/mongo/db/stats/snapshots.cpp", 
            "src/mongo/util/concurrency/task.cpp", 
            "src/mongo/client/dbclient_rs.cpp", 
            "src/mongo/s/writeback_listener.cpp", 
            "src/mongo/client/distlock.cpp", 
            "src/mongo/db/clientcursor.cpp", 
            "src/mongo/s/balance.cpp", 
            "src/mongo/util/net/listen.cpp", 
            "src/mongo/client/dbclient_rs.cpp", 
            "src/mongo/client/dbclientcursor.cpp", 
            "src/mongo/s/shardconnection.cpp", 
            "src/mongo/db/dur.cpp", 
            "src/mongo/db/ttl.cpp", 
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/db/client.cpp", 
            "src/mongo/client/connpool.cpp", 
            "src/mongo/util/net/message_server_port.cpp", 
            "src/mongo/db/db.cpp", 
            "src/mongo/db/modules/subscription/src/snmp/snmp.cpp", 
            "src/mongo/s/strategy_shard.cpp", 
            "src/mongo/util/concurrency/task.cpp", 
            "src/mongo/s/config_server_checker_service.cpp", 
            "src/mongo/db/storage/data_file.cpp", 
            "src/mongo/client/connpool.cpp"
        ]
    }, 
    {
        "symbol": "mongo::assembleResponse(mongo::Message&, mongo::DbResponse&, mongo::HostAndPort const&)", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/db/db.cpp"
        ]
    }, 
    {
        "symbol": "mongo::dbexit(mongo::ExitCode, char const*)", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/s/config.cpp", 
            "src/mongo/db/catalog/ondisk/namespace_index.cpp", 
            "src/mongo/db/db.cpp", 
            "src/mongo/dbtests/framework.cpp", 
            "src/mongo/db/dbcommands_generic.cpp", 
            "src/mongo/db/repl/master_slave.cpp", 
            "src/mongo/util/net/message_server_port.cpp", 
            "src/mongo/db/repl/rs.cpp", 
            "src/mongo/tools/tool.cpp", 
            "src/mongo/s/d_migrate.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DiagLog::setLevel(int)", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/mongod_options.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DBDirectClient::killCursor(long long)", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/dbtests/merge_chunk_tests.cpp", 
            "src/mongo/dbtests/sharding.cpp", 
            "src/mongo/dbtests/config_upgrade_tests.cpp", 
            "src/mongo/dbtests/config_server_fixture.cpp"
        ]
    }, 
    {
        "symbol": "mongo::dbExecCommand", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/db/db.cpp"
        ]
    }, 
    {
        "symbol": "non-virtual thunk to mongo::DBDirectClient::call(mongo::Message&, mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/dbtests/merge_chunk_tests.cpp", 
            "src/mongo/dbtests/sharding.cpp", 
            "src/mongo/dbtests/config_upgrade_tests.cpp", 
            "src/mongo/dbtests/config_server_fixture.cpp"
        ]
    }, 
    {
        "symbol": "mongo::acquirePathLock(bool)", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/db/db.cpp", 
            "src/mongo/tools/tool.cpp", 
            "src/mongo/dbtests/framework.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BSONElementManipulator::initTimestamp()", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/dbtests/jsobjtests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::replHasDatabases()", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/db/repl/heartbeat.cpp"
        ]
    }, 
    {
        "symbol": "mongo::killCurrentOp", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/db/commands/index_stats.cpp", 
            "src/mongo/db/write_concern.cpp", 
            "src/mongo/db/query/new_find.cpp", 
            "src/mongo/db/extsort.cpp", 
            "src/mongo/db/commands/validate.cpp", 
            "src/mongo/dbtests/replsettests.cpp", 
            "src/mongo/db/commands/touch.cpp", 
            "src/mongo/db/commands/test_commands.cpp", 
            "src/mongo/db/dur_recover.cpp", 
            "src/mongo/db/clientcursor.cpp", 
            "src/mongo/db/compact.cpp", 
            "src/mongo/db/client.cpp", 
            "src/mongo/db/curop.cpp", 
            "src/mongo/db/interrupt_status_mongod.cpp", 
            "src/mongo/dbtests/indexupdatetests.cpp", 
            "src/mongo/db/index_builder.cpp", 
            "src/mongo/s/d_migrate.cpp", 
            "src/mongo/db/commands/storage_details.cpp", 
            "src/mongo/db/db.cpp", 
            "src/mongo/dbtests/querytests.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/index/btree_based_builder.cpp", 
            "src/mongo/db/commands/mr.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Database::closeDatabase(std::string const&, std::string const&)", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/db/db.cpp", 
            "src/mongo/db/database_holder.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DBDirectClient::say(mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/dbtests/merge_chunk_tests.cpp", 
            "src/mongo/dbtests/sharding.cpp", 
            "src/mongo/dbtests/config_upgrade_tests.cpp", 
            "src/mongo/dbtests/config_server_fixture.cpp"
        ]
    }, 
    {
        "symbol": "non-virtual thunk to mongo::DBDirectClient::say(mongo::Message&, bool, std::string*)", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/dbtests/merge_chunk_tests.cpp", 
            "src/mongo/dbtests/sharding.cpp", 
            "src/mongo/dbtests/config_upgrade_tests.cpp", 
            "src/mongo/dbtests/config_server_fixture.cpp"
        ]
    }, 
    {
        "symbol": "mongo::getDatabaseNames(std::vector<std::string, std::allocator<std::string> >&, std::string const&)", 
        "object": "src/mongo/db/instance.cpp", 
        "used_by": [
            "src/mongo/db/db.cpp", 
            "src/mongo/db/auth/authz_manager_external_state_d.cpp", 
            "src/mongo/db/database.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/index_rebuilder.cpp", 
            "src/mongo/db/repl/rs.cpp"
        ]
    }, 
    {
        "symbol": "mongo::inDBRepair", 
        "object": "src/mongo/db/pdfile.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_based_builder.cpp"
        ]
    }, 
    {
        "symbol": "mongo::allocateSpaceForANewRecord(char const*, mongo::NamespaceDetails*, int, bool)", 
        "object": "src/mongo/db/pdfile.cpp", 
        "used_by": [
            "src/mongo/db/compact.cpp", 
            "src/mongo/dbtests/indexupdatetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::dbSize(char const*)", 
        "object": "src/mongo/db/pdfile.cpp", 
        "used_by": [
            "src/mongo/db/dbcommands.cpp"
        ]
    }, 
    {
        "symbol": "mongo::dropDatabase(std::string const&)", 
        "object": "src/mongo/db/pdfile.cpp", 
        "used_by": [
            "src/mongo/db/repl/master_slave.cpp", 
            "src/mongo/db/dbcommands.cpp"
        ]
    }, 
    {
        "symbol": "mongo::dbHolderUnchecked()", 
        "object": "src/mongo/db/pdfile.cpp", 
        "used_by": [
            "src/mongo/db/ttl.cpp", 
            "src/mongo/db/client.cpp", 
            "src/mongo/db/introspect.cpp", 
            "src/mongo/db/repl/master_slave.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/restapi.cpp", 
            "src/mongo/db/database.cpp"
        ]
    }, 
    {
        "symbol": "mongo::addRecordToRecListInExtent(mongo::Record*, mongo::DiskLoc)", 
        "object": "src/mongo/db/pdfile.cpp", 
        "used_by": [
            "src/mongo/db/compact.cpp", 
            "src/mongo/dbtests/indexupdatetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::userCreateNS(char const*, mongo::BSONObj, std::string&, bool, bool*)", 
        "object": "src/mongo/db/pdfile.cpp", 
        "used_by": [
            "src/mongo/db/repl/oplog.cpp", 
            "src/mongo/dbtests/namespacetests.cpp", 
            "src/mongo/db/commands/rename_collection.cpp", 
            "src/mongo/dbtests/querytests.cpp", 
            "src/mongo/db/introspect.cpp", 
            "src/mongo/db/commands/collection_to_capped.cpp", 
            "src/mongo/dbtests/queryutiltests.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/dbtests/replsettests.cpp", 
            "src/mongo/dbtests/query_stage_collscan.cpp", 
            "src/mongo/s/d_migrate.cpp"
        ]
    }, 
    {
        "symbol": "mongo::_deleteDataFiles(char const*)", 
        "object": "src/mongo/db/pdfile.cpp", 
        "used_by": [
            "src/mongo/db/durop.cpp"
        ]
    }, 
    {
        "symbol": "mongo::dropAllDatabasesExceptLocal()", 
        "object": "src/mongo/db/pdfile.cpp", 
        "used_by": [
            "src/mongo/db/repl/rs_initialsync.cpp"
        ]
    }, 
    {
        "symbol": "mongo::isValidNS(mongo::StringData const&)", 
        "object": "src/mongo/db/pdfile.cpp", 
        "used_by": [
            "src/mongo/dbtests/basictests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::repairDatabase(std::string, std::string&, bool, bool)", 
        "object": "src/mongo/db/pdfile.cpp", 
        "used_by": [
            "src/mongo/db/db.cpp", 
            "src/mongo/db/dbcommands.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/db/storage/record.cpp", 
        "used_by": [
            "src/mongo/db/commands/index_stats.cpp", 
            "src/mongo/dbtests/repltests.cpp", 
            "src/mongo/db/exec/working_set_common.cpp", 
            "src/mongo/db/exec/oplogstart.cpp", 
            "src/mongo/dbtests/namespacetests.cpp", 
            "src/mongo/db/commands/rename_collection.cpp", 
            "src/mongo/db/query/idhack_runner.cpp", 
            "src/mongo/dbtests/query_stage_fetch.cpp", 
            "src/mongo/db/commands/drop_indexes.cpp", 
            "src/mongo/dbtests/replsettests.cpp", 
            "src/mongo/db/exec/stagedebug_cmd.cpp", 
            "src/mongo/db/commands/validate.cpp", 
            "src/mongo/db/storage/index_details.cpp", 
            "src/mongo/dbtests/query_stage_collscan.cpp", 
            "src/mongo/db/commands/touch.cpp", 
            "src/mongo/db/index/btree_access_method.cpp", 
            "src/mongo/db/index/haystack_access_method.cpp", 
            "src/mongo/db/geo/haystack.cpp", 
            "src/mongo/dbtests/dbhelper_tests.cpp", 
            "src/mongo/db/structure/collection_info_cache.cpp", 
            "src/mongo/dbtests/query_stage_sort.cpp", 
            "src/mongo/db/namespace_details.cpp", 
            "src/mongo/db/compact.cpp", 
            "src/mongo/db/exec/2dnear.cpp", 
            "src/mongo/db/prefetch.cpp", 
            "src/mongo/db/database.cpp", 
            "src/mongo/dbtests/query_stage_and.cpp", 
            "src/mongo/db/ops/update.cpp", 
            "src/mongo/db/exec/collection_scan.cpp", 
            "src/mongo/dbtests/queryutiltests.cpp", 
            "src/mongo/dbtests/indexupdatetests.cpp", 
            "src/mongo/db/exec/2dcommon.cpp", 
            "src/mongo/s/d_split.cpp", 
            "src/mongo/db/commands/geonear.cpp", 
            "src/mongo/s/d_migrate.cpp", 
            "src/mongo/db/repl/oplog.cpp", 
            "src/mongo/db/commands/storage_details.cpp", 
            "src/mongo/dbtests/querytests.cpp", 
            "src/mongo/db/exec/text.cpp", 
            "src/mongo/db/query/stage_builder.cpp", 
            "src/mongo/db/dbhelpers.cpp", 
            "src/mongo/tools/dump.cpp", 
            "src/mongo/db/exec/2d.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Record::touch(bool) const", 
        "object": "src/mongo/db/storage/record.cpp", 
        "used_by": [
            "src/mongo/db/pagefault.cpp", 
            "src/mongo/db/query/plan_executor.cpp", 
            "src/mongo/db/clientcursor.cpp", 
            "src/mongo/dbtests/query_stage_fetch.cpp", 
            "src/mongo/db/query/multi_plan_runner.cpp", 
            "src/mongo/s/d_migrate.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Record::likelyInPhysicalMemory() const", 
        "object": "src/mongo/db/storage/record.cpp", 
        "used_by": [
            "src/mongo/s/d_migrate.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DiskLoc::rec() const", 
        "object": "src/mongo/db/storage/record.cpp", 
        "used_by": [
            "src/mongo/db/compact.cpp", 
            "src/mongo/db/commands/index_stats.cpp", 
            "src/mongo/db/exec/fetch.cpp", 
            "src/mongo/db/query/plan_executor.cpp", 
            "src/mongo/db/exec/oplogstart.cpp", 
            "src/mongo/dbtests/namespacetests.cpp", 
            "src/mongo/db/query/idhack_runner.cpp", 
            "src/mongo/dbtests/indexupdatetests.cpp", 
            "src/mongo/db/index/btree_interface.cpp", 
            "src/mongo/dbtests/query_stage_collscan.cpp", 
            "src/mongo/dbtests/query_stage_fetch.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/exec/2dcommon.cpp", 
            "src/mongo/db/commands/storage_details.cpp", 
            "src/mongo/db/query/multi_plan_runner.cpp", 
            "src/mongo/s/d_migrate.cpp", 
            "src/mongo/db/commands/validate.cpp", 
            "src/mongo/tools/dump.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Record::_accessing() const", 
        "object": "src/mongo/db/storage/record.cpp", 
        "used_by": [
            "src/mongo/db/compact.cpp", 
            "src/mongo/db/commands/index_stats.cpp", 
            "src/mongo/db/index/btree_interface.cpp", 
            "src/mongo/db/structure/collection.cpp", 
            "src/mongo/db/exec/oplogstart.cpp", 
            "src/mongo/dbtests/namespacetests.cpp", 
            "src/mongo/dbtests/query_stage_collscan.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/commands/storage_details.cpp", 
            "src/mongo/dbtests/indexupdatetests.cpp", 
            "src/mongo/db/namespace_details.cpp", 
            "src/mongo/db/commands/validate.cpp", 
            "src/mongo/tools/dump.cpp", 
            "src/mongo/db/index/btree_access_method.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Record::MemoryTrackingEnabled", 
        "object": "src/mongo/db/storage/record.cpp", 
        "used_by": [
            "src/mongo/db/mongod_options.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Record::accessed()", 
        "object": "src/mongo/db/storage/record.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DiskLoc::drec() const", 
        "object": "src/mongo/db/storage/record.cpp", 
        "used_by": [
            "src/mongo/db/commands/storage_details.cpp", 
            "src/mongo/dbtests/namespacetests.cpp", 
            "src/mongo/db/namespace_details.cpp", 
            "src/mongo/db/commands/validate.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Record::likelyInPhysicalMemory(char const*)", 
        "object": "src/mongo/db/storage/record.cpp", 
        "used_by": [
            "src/mongo/db/exec/fetch.cpp", 
            "src/mongo/db/query/idhack_runner.cpp", 
            "src/mongo/db/query/multi_plan_runner.cpp", 
            "src/mongo/db/query/plan_executor.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DiskLoc::ext() const", 
        "object": "src/mongo/db/storage/record.cpp", 
        "used_by": [
            "src/mongo/db/compact.cpp", 
            "src/mongo/db/exec/oplogstart.cpp", 
            "src/mongo/dbtests/namespacetests.cpp", 
            "src/mongo/db/commands/rename_collection.cpp", 
            "src/mongo/dbtests/query_stage_collscan.cpp", 
            "src/mongo/db/commands/collection_to_capped.cpp", 
            "src/mongo/db/namespace_details.cpp", 
            "src/mongo/db/commands/validate.cpp", 
            "src/mongo/tools/dump.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DeletedRecord::_accessing() const", 
        "object": "src/mongo/db/storage/record.cpp", 
        "used_by": [
            "src/mongo/db/commands/storage_details.cpp", 
            "src/mongo/dbtests/namespacetests.cpp", 
            "src/mongo/db/commands/validate.cpp", 
            "src/mongo/db/namespace_details.cpp"
        ]
    }, 
    {
        "symbol": "mongo::KeyV1::dataSize() const", 
        "object": "src/mongo/db/structure/btree/key.cpp", 
        "used_by": [
            "src/mongo/dbtests/jsobjtests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::KeyV1Owned::KeyV1Owned(mongo::BSONObj const&)", 
        "object": "src/mongo/db/structure/btree/key.cpp", 
        "used_by": [
            "src/mongo/dbtests/perftests.cpp", 
            "src/mongo/db/index/btree_interface.cpp", 
            "src/mongo/dbtests/jsobjtests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::KeyV1::woCompare(mongo::KeyV1 const&, mongo::Ordering const&) const", 
        "object": "src/mongo/db/structure/btree/key.cpp", 
        "used_by": [
            "src/mongo/dbtests/jsobjtests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::KeyV1::woEqual(mongo::KeyV1 const&) const", 
        "object": "src/mongo/db/structure/btree/key.cpp", 
        "used_by": [
            "src/mongo/dbtests/perftests.cpp", 
            "src/mongo/dbtests/jsobjtests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::KeyV1::toBson() const", 
        "object": "src/mongo/db/structure/btree/key.cpp", 
        "used_by": [
            "src/mongo/db/commands/index_stats.cpp", 
            "src/mongo/db/index/btree_interface.cpp", 
            "src/mongo/dbtests/jsobjtests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::oldCompare(mongo::BSONObj const&, mongo::BSONObj const&, mongo::Ordering const&)", 
        "object": "src/mongo/db/structure/btree/key.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_based_builder.cpp"
        ]
    }, 
    {
        "symbol": "mongo::KeyBson::woCompare(mongo::KeyBson const&, mongo::Ordering const&) const", 
        "object": "src/mongo/db/structure/btree/key.cpp", 
        "used_by": [
            "src/mongo/dbtests/jsobjtests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::NamespaceDetails::cappedAlloc(mongo::StringData const&, int)", 
        "object": "src/mongo/db/cap.cpp", 
        "used_by": [
            "src/mongo/db/namespace_details.cpp"
        ]
    }, 
    {
        "symbol": "mongo::NamespaceDetails::cappedTruncateAfter(char const*, mongo::DiskLoc, bool)", 
        "object": "src/mongo/db/cap.cpp", 
        "used_by": [
            "src/mongo/dbtests/namespacetests.cpp", 
            "src/mongo/db/repl/rs_rollback.cpp", 
            "src/mongo/db/commands/test_commands.cpp"
        ]
    }, 
    {
        "symbol": "mongo::NamespaceDetails::emptyCappedCollection(char const*)", 
        "object": "src/mongo/db/cap.cpp", 
        "used_by": [
            "src/mongo/db/repl/rs_initialsync.cpp", 
            "src/mongo/db/repl/rs_rollback.cpp", 
            "src/mongo/db/commands/test_commands.cpp"
        ]
    }, 
    {
        "symbol": "mongo::NamespaceDetails::cappedCheckMigrate()", 
        "object": "src/mongo/db/cap.cpp", 
        "used_by": [
            "src/mongo/db/catalog/ondisk/namespace_index.cpp"
        ]
    }, 
    {
        "symbol": "mongo::NamespaceDetails::cappedFirstDeletedInCurExtent()", 
        "object": "src/mongo/db/cap.cpp", 
        "used_by": [
            "src/mongo/db/namespace_details.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExtentManager::getExtent(mongo::DiskLoc const&, bool) const", 
        "object": "src/mongo/db/storage/extent_manager.cpp", 
        "used_by": [
            "src/mongo/db/compact.cpp", 
            "src/mongo/db/structure/collection.cpp", 
            "src/mongo/db/commands/storage_details.cpp", 
            "src/mongo/tools/dump.cpp", 
            "src/mongo/db/commands/touch.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExtentManager::~ExtentManager()", 
        "object": "src/mongo/db/storage/extent_manager.cpp", 
        "used_by": [
            "src/mongo/db/database.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExtentManager::flushFiles(bool)", 
        "object": "src/mongo/db/storage/extent_manager.cpp", 
        "used_by": [
            "src/mongo/db/repl/rs_initialsync.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExtentManager::init(mongo::NamespaceDetails*)", 
        "object": "src/mongo/db/storage/extent_manager.cpp", 
        "used_by": [
            "src/mongo/db/database.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExtentManager::recordFor(mongo::DiskLoc const&) const", 
        "object": "src/mongo/db/storage/extent_manager.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExtentManager::reset()", 
        "object": "src/mongo/db/storage/extent_manager.cpp", 
        "used_by": [
            "src/mongo/db/database.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExtentManager::freeExtents(mongo::DiskLoc, mongo::DiskLoc)", 
        "object": "src/mongo/db/storage/extent_manager.cpp", 
        "used_by": [
            "src/mongo/db/compact.cpp", 
            "src/mongo/db/database.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExtentManager::init()", 
        "object": "src/mongo/db/storage/extent_manager.cpp", 
        "used_by": [
            "src/mongo/db/database.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExtentManager::ExtentManager(mongo::StringData const&, mongo::StringData const&, mongo::NamespaceDetails*, bool)", 
        "object": "src/mongo/db/storage/extent_manager.cpp", 
        "used_by": [
            "src/mongo/db/database.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExtentManager::quantizeExtentSize(int)", 
        "object": "src/mongo/db/storage/extent_manager.cpp", 
        "used_by": [
            "src/mongo/dbtests/pdfiletests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExtentManager::getFile(int, int, bool)", 
        "object": "src/mongo/db/storage/extent_manager.cpp", 
        "used_by": [
            "src/mongo/db/db.cpp", 
            "src/mongo/db/dbcommands.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExtentManager::getNextExtent(mongo::Extent*) const", 
        "object": "src/mongo/db/storage/extent_manager.cpp", 
        "used_by": [
            "src/mongo/tools/dump.cpp", 
            "src/mongo/db/structure/collection.cpp", 
            "src/mongo/db/commands/storage_details.cpp", 
            "src/mongo/db/commands/touch.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExtentManager::increaseStorageSize(std::string const&, mongo::NamespaceDetails*, int, int)", 
        "object": "src/mongo/db/storage/extent_manager.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExtentManager::fileSize() const", 
        "object": "src/mongo/db/storage/extent_manager.cpp", 
        "used_by": [
            "src/mongo/db/dbcommands.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExtentManager::getNextRecordInExtent(mongo::DiskLoc const&) const", 
        "object": "src/mongo/db/storage/extent_manager.cpp", 
        "used_by": [
            "src/mongo/db/compact.cpp", 
            "src/mongo/db/commands/storage_details.cpp"
        ]
    }, 
    {
        "symbol": "mongo::RecordStore::RecordStore(mongo::StringData const&)", 
        "object": "src/mongo/db/structure/record_store.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection.cpp"
        ]
    }, 
    {
        "symbol": "mongo::RecordStore::init(mongo::NamespaceDetails*, mongo::ExtentManager*, bool)", 
        "object": "src/mongo/db/structure/record_store.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection.cpp"
        ]
    }, 
    {
        "symbol": "mongo::RecordStore::insertRecord(char const*, int, int)", 
        "object": "src/mongo/db/structure/record_store.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection.cpp"
        ]
    }, 
    {
        "symbol": "mongo::RecordStore::recordFor(mongo::DiskLoc const&) const", 
        "object": "src/mongo/db/structure/record_store.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_interface.cpp", 
            "src/mongo/db/index/btree_access_method.cpp"
        ]
    }, 
    {
        "symbol": "mongo::RecordStore::insertRecord(mongo::DocWriter const*, int)", 
        "object": "src/mongo/db/structure/record_store.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection.cpp"
        ]
    }, 
    {
        "symbol": "mongo::RecordStore::deleteRecord(mongo::DiskLoc const&)", 
        "object": "src/mongo/db/structure/record_store.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection.cpp"
        ]
    }
]