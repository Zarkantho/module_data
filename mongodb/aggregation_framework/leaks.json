[
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::Suite(std::string const&)", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::log()", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Suite", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/temp_dir.cpp"
        ], 
        "symbol": "mongo::unittest::TempDir::~TempDir()", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::getcurns", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogstreamBuilder const&)", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::remove(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/snappy/snappy.cc"
        ], 
        "symbol": "snappy::RawUncompress(char const*, unsigned long, char*)", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::is_empty(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/snappy/snappy.cc"
        ], 
        "symbol": "snappy::Compress(char const*, unsigned long, std::string*)", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::file_size(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::join()", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/temp_dir.cpp"
        ], 
        "symbol": "mongo::unittest::TempDir::TempDir(std::string const&)", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::create_directories(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::demangleName(std::type_info const&)", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/snappy/snappy.cc"
        ], 
        "symbol": "snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*)", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::~Suite()", 
        "object": "src/mongo/db/sorter/sorter_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/field_path.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/field_path.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/field_path.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/db/pipeline/document_source_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/db/pipeline/document_source_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/document_source_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_skip.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_out.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_out.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/pipeline/document_source_out.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/document_source_out.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::getcurns", 
        "object": "src/mongo/db/pipeline/document_source_out.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_out.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogstreamBuilder const&)", 
        "object": "src/mongo/db/pipeline/document_source_out.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/db/pipeline/document_source_out.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/pipeline/document_source_out.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/db/pipeline/document_source_out.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/document_source_out.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/pipeline/document_source_out.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_out.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/pipeline/document_source_out.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/pipeline/document_source_out.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::typeName(mongo::BSONType)", 
        "object": "src/mongo/db/pipeline/document_source_out.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/pipeline/document_source_out.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastErrorString(mongo::BSONObj const&)", 
        "object": "src/mongo/db/pipeline/document_source_out.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/db/pipeline/document_source_unwind.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/db/pipeline/document_source_unwind.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/document_source_unwind.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/document_source_unwind.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_unwind.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_unwind.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::typeName(mongo::BSONType)", 
        "object": "src/mongo/db/pipeline/document_source_unwind.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/db/pipeline/document_source.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "typeinfo for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/document_source.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/document_source.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/document_source.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/db/pipeline/document_source.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/pipeline/document_source.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/db/pipeline/document_source_limit.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_limit.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/document_source_limit.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/db/pipeline/document_source_limit.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/document.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/pipeline/document.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document.cpp"
    }, 
    {
        "sources": [
            "src/third_party/murmurhash3/MurmurHash3.cpp"
        ], 
        "symbol": "MurmurHash3_x86_32(void const*, int, unsigned int, void*)", 
        "object": "src/mongo/db/pipeline/document.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/pipeline/document.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/accumulator_push.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/accumulator_min_max.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/db/pipeline/document_source_geo_near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/document_source_geo_near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_geo_near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/db/pipeline/document_source_geo_near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_geo_near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/document_source_geo_near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_geo_near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_geo_near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/pipeline/document_source_geo_near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/db/pipeline/document_source_bson_array.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_bson_array.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_bson_array.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/document_source_bson_array.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/document_source_bson_array.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_bson_array.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/db/pipeline/document_source_bson_array.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_bson_array.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/pipeline/document_source_bson_array.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclientcursor.cpp"
        ], 
        "symbol": "mongo::DBClientCursor::more()", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclientcursor.cpp"
        ], 
        "symbol": "mongo::DBClientCursor::_finishConsInit()", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclientcursor.cpp"
        ], 
        "symbol": "mongo::DBClientCursor::initLazy(bool)", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclientcursor.cpp"
        ], 
        "symbol": "mongo::DBClientCursor::next()", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclientcursor.cpp"
        ], 
        "symbol": "mongo::DBClientCursor::initLazyFinish(bool&)", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclientcursor.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientCursor", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(mongo::ConnectionString const&, double)", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclientcursor.cpp"
        ], 
        "symbol": "mongo::DBClientCursor::~DBClientCursor()", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::typeName(mongo::BSONType)", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/expression.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/expression.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/expression.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/expression.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/pipeline/expression.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/db/pipeline/expression.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/db/pipeline/expression.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/expression.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/expression.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::typeName(mongo::BSONType)", 
        "object": "src/mongo/db/pipeline/expression.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/pipeline/expression.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "typeinfo for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/expression.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/pipeline/expression.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::typeName(mongo::BSONType)", 
        "object": "src/mongo/db/pipeline/value.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/value.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/value.cpp"
    }, 
    {
        "sources": [
            "src/third_party/murmurhash3/MurmurHash3.cpp"
        ], 
        "symbol": "MurmurHash3_x86_32(void const*, int, unsigned int, void*)", 
        "object": "src/mongo/db/pipeline/value.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/value.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/pipeline/value.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/pipeline/value.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::hash_combine(unsigned long&) const", 
        "object": "src/mongo/db/pipeline/value.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/value.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/pipeline/value.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/value.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/db/pipeline/value.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::time_t_to_String_short(long)", 
        "object": "src/mongo/db/pipeline/value.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/pipeline/value.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/pipeline/value.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::RCString::create(mongo::StringData)", 
        "object": "src/mongo/db/pipeline/value.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardedConnectionInfo::addHook()", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/canonical_query.cpp"
        ], 
        "symbol": "mongo::CanonicalQuery::canonicalize(std::string const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::CanonicalQuery**)", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::shardingState", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::getVersion(std::string const&) const", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::~ClientCursor()", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/ondisk/namespace_index.cpp"
        ], 
        "symbol": "mongo::NamespaceIndex::details(mongo::StringData const&)", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::ClientCursor(mongo::Runner*, int, mongo::BSONObj)", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/get_runner.cpp"
        ], 
        "symbol": "mongo::getRunner(mongo::CanonicalQuery*, mongo::Runner**, unsigned long)", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/accumulator_sum.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/accumulator_sum.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::killCurrentOp", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::getcurns", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/kill_current_op.cpp"
        ], 
        "symbol": "mongo::KillCurrentOp::checkForInterrupt(bool)", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogstreamBuilder const&)", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::remove(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/snappy/snappy.cc"
        ], 
        "symbol": "snappy::RawUncompress(char const*, unsigned long, char*)", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/snappy/snappy.cc"
        ], 
        "symbol": "snappy::Compress(char const*, unsigned long, std::string*)", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::file_size(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::create_directories(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/snappy/snappy.cc"
        ], 
        "symbol": "snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*)", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/extsort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::getcurns", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogstreamBuilder const&)", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::remove(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/third_party/snappy/snappy.cc"
        ], 
        "symbol": "snappy::RawUncompress(char const*, unsigned long, char*)", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/third_party/snappy/snappy.cc"
        ], 
        "symbol": "snappy::Compress(char const*, unsigned long, std::string*)", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::file_size(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::create_directories(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/third_party/snappy/snappy.cc"
        ], 
        "symbol": "snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*)", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::getcurns", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogstreamBuilder const&)", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::remove(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/snappy/snappy.cc"
        ], 
        "symbol": "snappy::RawUncompress(char const*, unsigned long, char*)", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/snappy/snappy.cc"
        ], 
        "symbol": "snappy::Compress(char const*, unsigned long, std::string*)", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::file_size(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "typeinfo for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::create_directories(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/third_party/snappy/snappy.cc"
        ], 
        "symbol": "snappy::GetUncompressedLength(char const*, unsigned long, unsigned long*)", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/accumulator_add_to_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/pipeline/document_source_match.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/db/pipeline/document_source_match.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/pipeline/document_source_match.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/matcher.cpp"
        ], 
        "symbol": "mongo::Matcher2::matches(mongo::BSONObj const&, mongo::MatchDetails*) const", 
        "object": "src/mongo/db/pipeline/document_source_match.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_match.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::getGtLtOp(int) const", 
        "object": "src/mongo/db/pipeline/document_source_match.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_match.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/pipeline/document_source_match.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/document_source_match.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/document_source_match.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_match.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/db/pipeline/document_source_match.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_match.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/pipeline/document_source_match.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/matcher.cpp"
        ], 
        "symbol": "mongo::Matcher2::Matcher2(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/pipeline/document_source_match.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::getScanAndOrder() const", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::isScanAndOrderSet() const", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::ClientCursorPin(long long)", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::scanAndOrder", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBRead::DBRead(mongo::StringData const&)", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/new_find.cpp"
        ], 
        "symbol": "mongo::MaxBytesToReturnToClientAtOnce", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::getAllPlansAt(unsigned long) const", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::clauses", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::erase(long long)", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::isClausesSet() const", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::sizeAllPlans() const", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::isIndexBoundsSet() const", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::sizeClauses() const", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::isAllPlansSet() const", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBRead::~DBRead()", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::isIsMultiKeySet() const", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::getClausesAt(unsigned long) const", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::indexBounds", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::isCursorSet() const", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::getIndexBounds() const", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::getCursor() const", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::c() const", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::cursor", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::allPlans", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::~ClientCursorPin()", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::isMultiKey", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::deleteUnderlying()", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/accumulator_avg.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/db/pipeline/document_source_project.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "typeinfo for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/document_source_project.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_project.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_project.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/document_source_project.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/document_source_project.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_project.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/db/pipeline/document_source_project.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_project.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/pipeline/document_source_project.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/db/pipeline/document_source_command_shards.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_command_shards.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_command_shards.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/document_source_command_shards.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/document_source_command_shards.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_command_shards.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/db/pipeline/document_source_command_shards.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_command_shards.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/pipeline/document_source_command_shards.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::insert", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionType const&)", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::Array() const", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/lite_parsed_query.cpp"
        ], 
        "symbol": "mongo::LiteParsedQuery::cmdOptionMaxTimeMS", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::remove", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseResourcePattern(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/resource_pattern.cpp"
        ], 
        "symbol": "mongo::ResourcePattern::toString() const", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::typeName(mongo::BSONType)", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "typeinfo for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/pipeline.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/db/pipeline/document_source_redact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/db/pipeline/document_source_redact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/pipeline/document_source_redact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/pipeline/document_source_redact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/pipeline/document_source_redact.cpp"
    }
]