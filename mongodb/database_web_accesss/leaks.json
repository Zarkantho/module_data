[
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/clientlistplugin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::CachedBSONObj::_tooBig", 
        "object": "src/mongo/db/clientlistplugin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/progress_meter.cpp"
        ], 
        "symbol": "mongo::ProgressMeter::toString() const", 
        "object": "src/mongo/db/clientlistplugin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/clientlistplugin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::ensureStarted()", 
        "object": "src/mongo/db/clientlistplugin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/string_data.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::StringData const&)", 
        "object": "src/mongo/db/clientlistplugin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::clients", 
        "object": "src/mongo/db/clientlistplugin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/clientlistplugin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lockstate.cpp"
        ], 
        "symbol": "mongo::LockState::reportState()", 
        "object": "src/mongo/db/clientlistplugin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/clientlistplugin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::clientsMutex", 
        "object": "src/mongo/db/clientlistplugin.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/clientlistplugin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/clientlistplugin.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/clientlistplugin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/clientlistplugin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/clientlistplugin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::Listener(std::string const&, std::string const&, int, bool)", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "typeinfo for mongo::Listener", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::~Listener()", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::no_arg", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::Arg::parse_string(char const*, int, void*)", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "typeinfo for mongo::SocketException", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::Socket::unsafe_recv(char*, int)", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::Socket::close()", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::Consume(pcrecpp::StringPiece*, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::Socket::setTimeout(double)", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::Socket::doSSLHandshake(char const*, int)", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::Init(std::string const&, pcrecpp::RE_Options const*)", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::Socket::send(char const*, int, char const*)", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::acceptedMP(mongo::MessagingPort*)", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::~RE()", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/util/net/miniwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_append", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::grantInternalAuthorization()", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::Arg::parse_string(char const*, int, void*)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_finish", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_init", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::releaseUser(mongo::User*)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::jsonString(mongo::JsonStringFormat, int) const", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::shutdown()", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::getAuthorizationManager()", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/buildinfo.cpp"
        ], 
        "symbol": "mongo::sysInfo()", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::addAndAuthorizeUser(mongo::UserName const&)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::prettyHostName()", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user.cpp"
        ], 
        "symbol": "mongo::User::getCredentials() const", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::_commandsByBestName", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version_reporting.cpp"
        ], 
        "symbol": "mongo::openSSLVersion(std::string const&, std::string const&)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::~Listener()", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::no_arg", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/ramlog.cpp"
        ], 
        "symbol": "mongo::RamLog::get(std::string const&)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::initAndListen()", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/ramlog.cpp"
        ], 
        "symbol": "mongo::RamLog::toHTML(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::Init(std::string const&, pcrecpp::RE_Options const*)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::acceptedMP(mongo::MessagingPort*)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::setupSockets()", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::SockAddr::isLocalHost() const", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::htmlHelp(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&) const", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version.cpp"
        ], 
        "symbol": "mongo::mongodVersion()", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Command::execCommand(mongo::Command*, mongo::Client&, int, char const*, mongo::BSONObj&, mongo::BSONObjBuilder&, bool)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/buildinfo.cpp"
        ], 
        "symbol": "mongo::gitVersion()", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::acquireUser(mongo::UserName const&, mongo::User**)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::findCommand(std::string const&)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::~RE()", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::Consume(pcrecpp::StringPiece*, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::_webCommands", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user_name.cpp"
        ], 
        "symbol": "mongo::UserName::UserName(mongo::StringData const&, mongo::StringData const&)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/dbwebserver.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/master_slave.cpp"
        ], 
        "symbol": "mongo::replAllDead", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/background.cpp"
        ], 
        "symbol": "mongo::BackgroundOperation::dump(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&)", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::jsonString(mongo::JsonStringFormat, int) const", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::getAuthorizationManager()", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/replication_server_status.cpp"
        ], 
        "symbol": "mongo::replSettings", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::dbHolderUnchecked()", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::hasAnyPrivilegeDocuments() const", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs.cpp"
        ], 
        "symbol": "mongo::replSet", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::clientCursorsById", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/master_slave.cpp"
        ], 
        "symbol": "mongo::replInfo", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::query(std::string const&, mongo::Query, int, int, mongo::BSONObj const*, int, int)", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::readlocktry::readlocktry(int)", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/restapi.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::readlocktry::~readlocktry()", 
        "object": "src/mongo/db/restapi.cpp"
    }
]