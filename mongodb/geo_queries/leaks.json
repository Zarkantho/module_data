[
    {
        "sources": [
            "src/third_party/s2/s2polyline.cc"
        ], 
        "symbol": "S2Polyline::MayIntersect(S2Cell const&) const", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regionunion.cc"
        ], 
        "symbol": "S2RegionUnion::Add(S2Region*)", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cell.cc"
        ], 
        "symbol": "vtable for S2Cell", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polyline.cc"
        ], 
        "symbol": "S2Polyline::S2Polyline()", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cap.cc"
        ], 
        "symbol": "vtable for S2Cap", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cell.cc"
        ], 
        "symbol": "S2Cell::MayIntersect(S2Cell const&) const", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygon.cc"
        ], 
        "symbol": "S2Polygon::Intersects(S2Polygon const*) const", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polyline.cc"
        ], 
        "symbol": "S2Polyline::~S2Polyline()", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygon.cc"
        ], 
        "symbol": "S2Polygon::S2Polygon()", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2region.cc"
        ], 
        "symbol": "S2Region::~S2Region()", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygon.cc"
        ], 
        "symbol": "S2Polygon::Contains(S2Polygon const*) const", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygon.cc"
        ], 
        "symbol": "S2Polygon::Contains(Vector3<double> const&) const", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygon.cc"
        ], 
        "symbol": "S2Polygon::IntersectWithPolyline(S2Polyline const*, std::vector<S2Polyline*, std::allocator<S2Polyline*> >*) const", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polyline.cc"
        ], 
        "symbol": "S2Polyline::NearlyCoversPolyline(S2Polyline const&, S1Angle const&) const", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regionunion.cc"
        ], 
        "symbol": "S2RegionUnion::S2RegionUnion()", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygon.cc"
        ], 
        "symbol": "S2Polygon::MayIntersect(S2Cell const&) const", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::getGtLtOp(int) const", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygon.cc"
        ], 
        "symbol": "S2Polygon::~S2Polygon()", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polyline.cc"
        ], 
        "symbol": "S2Polyline::Intersects(S2Polyline const*) const", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cap.cc"
        ], 
        "symbol": "S2Cap::MayIntersect(S2Cell const&) const", 
        "object": "src/mongo/db/geo/geoquery.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/geo/shapes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/geo/shapes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/geo/shapes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/geo/shapes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/geo/shapes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/geo/shapes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/geo/shapes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/geo/shapes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/geo/shapes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cell.cc"
        ], 
        "symbol": "vtable for S2Cell", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(std::string const&)", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polyline.cc"
        ], 
        "symbol": "S2Polyline::S2Polyline()", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polyline.cc"
        ], 
        "symbol": "S2Polyline::~S2Polyline()", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygon.cc"
        ], 
        "symbol": "S2Polygon::S2Polygon()", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2region.cc"
        ], 
        "symbol": "S2Region::~S2Region()", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygon.cc"
        ], 
        "symbol": "S2Polygon::Contains(Vector3<double> const&) const", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygon.cc"
        ], 
        "symbol": "S2Polygon::~S2Polygon()", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/geo/geoparser_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2loop.cc"
        ], 
        "symbol": "S2Loop::IsValid() const", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2latlng.cc"
        ], 
        "symbol": "S2LatLng::ToPoint() const", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygonbuilder.cc"
        ], 
        "symbol": "S2PolygonBuilder::S2PolygonBuilder(S2PolygonBuilderOptions const&)", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2loop.cc"
        ], 
        "symbol": "S2Loop::~S2Loop()", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cell.cc"
        ], 
        "symbol": "vtable for S2Cell", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/base/logging.cc"
        ], 
        "symbol": "google_base::DateLogger::DateLogger()", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cell.cc"
        ], 
        "symbol": "S2Cell::Init(S2CellId const&)", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polyline.cc"
        ], 
        "symbol": "S2Polyline::S2Polyline()", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cap.cc"
        ], 
        "symbol": "vtable for S2Cap", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2loop.cc"
        ], 
        "symbol": "S2Loop::Contains(S2Loop const*) const", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2loop.cc"
        ], 
        "symbol": "S2Loop::Normalize()", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygonbuilder.cc"
        ], 
        "symbol": "S2PolygonBuilder::~S2PolygonBuilder()", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/base/logging.cc"
        ], 
        "symbol": "google_base::DateLogger::HumanDate()", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::Array() const", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polyline.cc"
        ], 
        "symbol": "S2Polyline::IsValid(std::vector<Vector3<double>, std::allocator<Vector3<double> > > const&)", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygon.cc"
        ], 
        "symbol": "S2Polygon::S2Polygon()", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2latlng.cc"
        ], 
        "symbol": "S2LatLng::Normalized() const", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygonbuilder.cc"
        ], 
        "symbol": "S2PolygonBuilder::AddLoop(S2Loop const*)", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polyline.cc"
        ], 
        "symbol": "S2Polyline::Init(std::vector<Vector3<double>, std::allocator<Vector3<double> > > const&)", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2loop.cc"
        ], 
        "symbol": "S2Loop::S2Loop(std::vector<Vector3<double>, std::allocator<Vector3<double> > > const&)", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cap.cc"
        ], 
        "symbol": "S2Cap::FromAxisAngle(Vector3<double> const&, S1Angle const&)", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2region.cc"
        ], 
        "symbol": "S2Region::~S2Region()", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2loop.cc"
        ], 
        "symbol": "S2Loop::Invert()", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygonbuilder.cc"
        ], 
        "symbol": "S2PolygonBuilderOptions::set_xor_edges(bool)", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygonbuilder.cc"
        ], 
        "symbol": "S2PolygonBuilder::AssemblePolygon(S2Polygon*, std::vector<std::pair<Vector3<double>, Vector3<double> >, std::allocator<std::pair<Vector3<double>, Vector3<double> > > >*)", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygonbuilder.cc"
        ], 
        "symbol": "S2PolygonBuilderOptions::set_validate(bool)", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygon.cc"
        ], 
        "symbol": "S2Polygon::~S2Polygon()", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cellid.cc"
        ], 
        "symbol": "S2CellId::FromPoint(Vector3<double> const&)", 
        "object": "src/mongo/db/geo/geoparser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_names.cpp"
        ], 
        "symbol": "mongo::IndexNames::findPluginName(mongo::BSONObj const&)", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::MsgAssertionException", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index/haystack_access_method.cpp"
        ], 
        "symbol": "mongo::HaystackAccessMethod::searchCommand(mongo::BSONObj const&, double, mongo::BSONObj const&, mongo::BSONObjBuilder*, unsigned int)", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::help(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&) const", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseResourcePattern(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::checkAuthForCommand(mongo::ClientBasic*, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getDescriptor(int)", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getIndex(mongo::IndexDescriptor const*)", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_names.cpp"
        ], 
        "symbol": "mongo::IndexNames::GEO_HAYSTACK", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/db/geo/haystack.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regioncoverer.cc"
        ], 
        "symbol": "S2RegionCoverer::S2RegionCoverer()", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regioncoverer.cc"
        ], 
        "symbol": "S2RegionCoverer::set_max_cells(int)", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cell.cc"
        ], 
        "symbol": "vtable for S2Cell", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/base/logging.cc"
        ], 
        "symbol": "google_base::DateLogger::DateLogger()", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2.cc"
        ], 
        "symbol": "S2::kAvgEdge", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polyline.cc"
        ], 
        "symbol": "S2Polyline::S2Polyline()", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cellid.cc"
        ], 
        "symbol": "S2CellId::kNumFaces", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/base/logging.cc"
        ], 
        "symbol": "google_base::DateLogger::HumanDate()", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regioncoverer.cc"
        ], 
        "symbol": "S2RegionCoverer::set_max_level(int)", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2.cc"
        ], 
        "symbol": "S2::kMaxCellLevel", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polyline.cc"
        ], 
        "symbol": "S2Polyline::~S2Polyline()", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygon.cc"
        ], 
        "symbol": "S2Polygon::S2Polygon()", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cellid.cc"
        ], 
        "symbol": "S2CellId::ToString() const", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cellid.cc"
        ], 
        "symbol": "S2CellId::level() const", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2region.cc"
        ], 
        "symbol": "S2Region::~S2Region()", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regioncoverer.cc"
        ], 
        "symbol": "S2RegionCoverer::set_min_level(int)", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regioncoverer.cc"
        ], 
        "symbol": "S2RegionCoverer::~S2RegionCoverer()", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s1angle.cc"
        ], 
        "symbol": "S1Angle::S1Angle(Vector3<double> const&, Vector3<double> const&)", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cellid.cc"
        ], 
        "symbol": "S2CellId::kMaxLevel", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygon.cc"
        ], 
        "symbol": "S2Polygon::~S2Polygon()", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polyline.cc"
        ], 
        "symbol": "S2Polyline::Project(Vector3<double> const&, int*) const", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cellid.cc"
        ], 
        "symbol": "S2CellId::kPosBits", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2polygon.cc"
        ], 
        "symbol": "S2Polygon::Project(Vector3<double> const&) const", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regioncoverer.cc"
        ], 
        "symbol": "S2RegionCoverer::GetCovering(S2Region const&, std::vector<S2CellId, std::allocator<S2CellId> >*)", 
        "object": "src/mongo/db/geo/s2common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/geo/hash_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/geo/hash_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/db/geo/hash_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/geo/hash_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/random.cpp"
        ], 
        "symbol": "mongo::PseudoRandom::nextInt32()", 
        "object": "src/mongo/db/geo/hash_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/random.cpp"
        ], 
        "symbol": "mongo::PseudoRandom::PseudoRandom(int)", 
        "object": "src/mongo/db/geo/hash_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/geo/hash_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/geo/hash_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/geo/hash_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/geo/hash_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/geo/hash_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/geo/hash_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/geo/hash_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/geo/hash_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/geo/hash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/geo/hash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/geo/hash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/geo/hash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/geo/hash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/geo/hash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/geo/hash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/geo/hash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/db/geo/hash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/geo/hash.cpp"
    }
]