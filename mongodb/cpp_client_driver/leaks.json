[
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::running() const", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::wait(unsigned int)", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::convertExceptionCode(int)", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::go()", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::cancel()", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::~BackgroundJob()", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONArrayIteratorSorted::BSONArrayIteratorSorted(mongo::BSONArray const&)", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "typeinfo for mongo::BackgroundJob", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/bson_validate.cpp"
        ], 
        "symbol": "mongo::validateBSON(char const*, unsigned long long)", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::BackgroundJob(bool)", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/client/dbclient_rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/client/clientAndShell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/client/clientAndShell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/client/clientAndShell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/client/clientAndShell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/client/clientAndShell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/clientAndShell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/client/clientAndShell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::Socket::connect(mongo::SockAddr&)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/message_port.cpp"
        ], 
        "symbol": "mongo::MessagingPort::MessagingPort(double, mongo::logger::LogSeverity)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "typeinfo for mongo::SocketException", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_init", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/util/bson_extract.cpp"
        ], 
        "symbol": "mongo::bsonExtractBooleanFieldWithDefault(mongo::BSONObj const&, mongo::StringData const&, bool, bool*)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/message_port.cpp"
        ], 
        "symbol": "mongo::MessagingPort::shutdown()", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(std::string const&)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/ssl_manager.cpp"
        ], 
        "symbol": "mongo::sslGlobalParams", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::Socket::isStillConnected()", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/auth_helpers.cpp"
        ], 
        "symbol": "mongo::auth::createPasswordDigest(mongo::StringData const&, mongo::StringData const&)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/message_port.cpp"
        ], 
        "symbol": "mongo::MessagingPort::recv(mongo::Message&)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::wasserted(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_finish", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::Socket::secure(mongo::SSLManagerInterface*, std::string const&)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::SockAddr::getAddr() const", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/message_port.cpp"
        ], 
        "symbol": "mongo::MessagingPort::say(mongo::Message&, int)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::SockAddr::SockAddr(char const*, int)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/ssl_manager.cpp"
        ], 
        "symbol": "mongo::getSSLManager()", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::Backoff::nextSleepMillis()", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "vtable for mongo::SocketException", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::UserException", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/message_port.cpp"
        ], 
        "symbol": "mongo::MessagingPort::piggyBack(mongo::Message&, int)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/util/bson_extract.cpp"
        ], 
        "symbol": "mongo::bsonExtractStringField(mongo::BSONObj const&, mongo::StringData const&, std::string*)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_append", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/message_port.cpp"
        ], 
        "symbol": "mongo::MessagingPort::setSocketTimeout(double)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/message_port.cpp"
        ], 
        "symbol": "mongo::MessagingPort::call(mongo::Message&, mongo::Message&)", 
        "object": "src/mongo/client/dbclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::jsonString(mongo::JsonStringFormat, int) const", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::UserException", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::UserException::appendPrefix(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&) const", 
        "object": "src/mongo/client/syncclusterconnection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/dbmessage.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/dbmessage.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/dbmessage.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/bson_validate.cpp"
        ], 
        "symbol": "mongo::validateBSON(char const*, unsigned long long)", 
        "object": "src/mongo/db/dbmessage.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/dbmessage.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/dbmessage.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/dbmessage.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/dbmessage.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/initializer.cpp"
        ], 
        "symbol": "mongo::runGlobalInitializers(int, char const* const*, char const* const*)", 
        "object": "src/mongo/client/init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::PeriodicTask::startRunningPeriodicTasks()", 
        "object": "src/mongo/client/init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::PeriodicTask::stopRunningPeriodicTasks(int)", 
        "object": "src/mongo/client/init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/client/init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/client/gridfs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/client/gridfs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/client/gridfs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/client/gridfs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/client/gridfs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/client/gridfs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/client/gridfs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::status(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/client/gridfs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::jsTime()", 
        "object": "src/mongo/client/gridfs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/gridfs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/client/gridfs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/client/gridfs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/client/gridfs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/client/gridfs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/client/gridfs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::UserException", 
        "object": "src/mongo/client/gridfs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/client/gridfs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/client/gridfs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/client/examples/second.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::jsonString(mongo::JsonStringFormat, int) const", 
        "object": "src/mongo/client/examples/second.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/client/examples/second.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/examples/second.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/client/examples/second.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/client/examples/second.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/client/examples/second.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/client/examples/second.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/client/examples/clientTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/client/examples/clientTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/client/examples/clientTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/client/examples/clientTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/client/examples/clientTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/client/examples/clientTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/examples/clientTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/client/examples/clientTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/client/examples/clientTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/client/examples/clientTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/client/examples/clientTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/client/examples/clientTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/client/examples/clientTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::getcurns", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogstreamBuilder const&)", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::UserException", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/client/dbclientcursor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/client/examples/whereExample.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/client/examples/whereExample.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::jsonString(mongo::JsonStringFormat, int) const", 
        "object": "src/mongo/client/examples/whereExample.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/examples/whereExample.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/client/examples/whereExample.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/client/examples/whereExample.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/client/examples/whereExample.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/client/examples/whereExample.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/client/sasl_client_authenticate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/client/sasl_client_authenticate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/client/sasl_client_authenticate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/client/sasl_client_authenticate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/base64.cpp"
        ], 
        "symbol": "mongo::base64::decode(std::string const&)", 
        "object": "src/mongo/client/sasl_client_authenticate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/sasl_client_authenticate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/client/sasl_client_authenticate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/client/sasl_client_authenticate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/client/sasl_client_authenticate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/util/bson_extract.cpp"
        ], 
        "symbol": "mongo::bsonExtractField(mongo::BSONObj const&, mongo::StringData const&, mongo::BSONElement*)", 
        "object": "src/mongo/client/sasl_client_authenticate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/client/sasl_client_authenticate.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "typeinfo for mongo::SocketException", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::thread()", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::globalTicketHolder", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_service.cpp"
        ], 
        "symbol": "mongo::getGlobalFailPointRegistry()", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::setMode(mongo::FailPoint::Mode, unsigned int, mongo::BSONObj const&)", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::ListeningSockets::get()", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::join()", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_registry.cpp"
        ], 
        "symbol": "mongo::FailPointRegistry::getFailPoint(std::string const&) const", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/message_server_port.cpp"
        ], 
        "symbol": "mongo::createServer(mongo::MessageServer::Options const&, mongo::MessageHandler*)", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::UserException::appendPrefix(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&) const", 
        "object": "src/mongo/client/scoped_db_conn_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/client/examples/authTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/client/examples/authTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/client/examples/authTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/client/examples/authTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/client/examples/authTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/examples/authTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/client/examples/authTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/client/examples/authTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/client/examples/authTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/client/examples/authTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/client/examples/authTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/client/examples/first.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/client/examples/first.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::jsonString(mongo::JsonStringFormat, int) const", 
        "object": "src/mongo/client/examples/first.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/examples/first.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/client/examples/first.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/client/examples/first.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/client/examples/first.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/client/examples/first.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/lasterror.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/lasterror.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/lasterror.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/lasterror.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::prettyHostName()", 
        "object": "src/mongo/db/lasterror.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/lasterror.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/lasterror.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/lasterror.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/db/lasterror.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/db/lasterror.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/lasterror.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/client/examples/tutorial.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/client/examples/tutorial.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/client/examples/tutorial.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/client/examples/tutorial.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/client/examples/tutorial.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/client/examples/tutorial.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/examples/tutorial.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/client/examples/tutorial.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::UserException::appendPrefix(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&) const", 
        "object": "src/mongo/client/examples/tutorial.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/client/examples/tutorial.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/client/examples/tutorial.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/client/examples/tutorial.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/client/examples/tutorial.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/client/examples/tutorial.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/client/examples/tutorial.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "typeinfo for mongo::SocketException", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::PeriodicTask::~PeriodicTask()", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::PeriodicTask::PeriodicTask()", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "vtable for mongo::SocketException", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "typeinfo for mongo::PeriodicTask", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/client/connpool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/client/examples/httpClientTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/examples/httpClientTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/httpclient.cpp"
        ], 
        "symbol": "mongo::HttpClient::get(std::string const&, mongo::HttpClient::Result*)", 
        "object": "src/mongo/client/examples/httpClientTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/ssl_manager.cpp"
        ], 
        "symbol": "mongo::sslGlobalParams", 
        "object": "src/mongo/client/examples/httpClientTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/client/examples/httpClientTest.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/client/examples/rs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/client/examples/rs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/client/examples/rs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/client/examples/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/client/examples/rs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::join()", 
        "object": "src/mongo/client/examples/rs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/client/examples/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/client/examples/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/examples/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/client/examples/rs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/client/examples/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/client/examples/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/client/examples/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/client/examples/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/client/examples/rs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/logfile.cpp"
        ], 
        "symbol": "mongo::LogFile::~LogFile()", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(std::string const&)", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::close()", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmicros(long long)", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::remove(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "vtable for mongo::MemoryMappedFile", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/logfile.cpp"
        ], 
        "symbol": "mongo::LogFile::writeAt(unsigned long long, void const*, unsigned long)", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::MemoryMappedFile()", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/logfile.cpp"
        ], 
        "symbol": "mongo::LogFile::LogFile(std::string const&, bool)", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::LockMongoFilesShared::mmmutex", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::LockMongoFilesShared::era", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/logfile.cpp"
        ], 
        "symbol": "mongo::LogFile::readAt(unsigned long long, void*, unsigned long)", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/logfile.cpp"
        ], 
        "symbol": "mongo::LogFile::synchronousAppend(void const*, unsigned long)", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::map(char const*)", 
        "object": "src/mongo/client/examples/mongoperf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/grid.cpp"
        ], 
        "symbol": "mongo::Grid::getDBConfig(mongo::StringData const&, bool, std::string const&)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/version_manager.cpp", 
            "src/mongo/s/default_version.cpp"
        ], 
        "symbol": "mongo::VersionManager::forceRemoteCheckShardVersionCB(std::string const&)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "typeinfo for mongo::SocketException", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LabeledLevel)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::getChunkManagerIfExists(std::string const&, bool, bool)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/version_manager.cpp", 
            "src/mongo/s/default_version.cpp"
        ], 
        "symbol": "mongo::versionManager", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/version_manager.cpp", 
            "src/mongo/s/default_version.cpp"
        ], 
        "symbol": "mongo::VersionManager::isVersionableCB(mongo::DBClientBase*)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardconnection.cpp"
        ], 
        "symbol": "mongo::ShardConnection::kill()", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/version_manager.cpp", 
            "src/mongo/s/default_version.cpp"
        ], 
        "symbol": "mongo::VersionManager::checkShardVersionCB(mongo::DBClientBase*, std::string const&, bool, int)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/grid.cpp"
        ], 
        "symbol": "mongo::grid", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woSortOrder(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/matcher.cpp"
        ], 
        "symbol": "mongo::Matcher2::Matcher2(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::compatibleWith(mongo::ChunkManager const&, mongo::Shard const&) const", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::reload()", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::exception const&)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::getShardsForQuery(std::set<mongo::Shard, std::less<mongo::Shard>, std::allocator<mongo::Shard> >&, mongo::BSONObj const&) const", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::UserException", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardconnection.cpp"
        ], 
        "symbol": "mongo::ShardConnection::ShardConnection(std::string const&, std::string const&, boost::shared_ptr<mongo::ChunkManager const>)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/matcher.cpp"
        ], 
        "symbol": "mongo::Matcher2::matches(mongo::BSONObj const&, mongo::MatchDetails*) const", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardconnection.cpp"
        ], 
        "symbol": "mongo::ShardConnection::ShardConnection(mongo::Shard const&, std::string const&, boost::shared_ptr<mongo::ChunkManager const>)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::getVersion() const", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardconnection.cpp"
        ], 
        "symbol": "mongo::ShardConnection::_finishInit()", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/lite_parsed_query.cpp"
        ], 
        "symbol": "mongo::LiteParsedQuery::isTextScoreMeta(mongo::BSONElement)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::getChunkManagerOrPrimary(std::string const&, boost::shared_ptr<mongo::ChunkManager const>&, boost::shared_ptr<mongo::Shard>&)", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/client/parallel.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_replica_set.cpp"
        ], 
        "symbol": "mongo::MockReplicaSet::getReplConfig() const", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_remote_db_server.cpp"
        ], 
        "symbol": "mongo::MockRemoteDBServer::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_replica_set.cpp"
        ], 
        "symbol": "mongo::MockReplicaSet::MockReplicaSet(std::string const&, unsigned long)", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_conn_registry.cpp"
        ], 
        "symbol": "mongo::MockConnRegistry::getConnStrHook()", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_replica_set.cpp"
        ], 
        "symbol": "mongo::MockReplicaSet::getSecondaries() const", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_replica_set.cpp"
        ], 
        "symbol": "mongo::MockReplicaSet::setConfig(std::map<std::string, mongo::ReplSetConfig::MemberCfg, std::less<std::string>, std::allocator<std::pair<std::string const, mongo::ReplSetConfig::MemberCfg> > > const&)", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_replica_set.cpp"
        ], 
        "symbol": "mongo::MockReplicaSet::getSetName() const", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_conn_registry.cpp"
        ], 
        "symbol": "mongo::MockConnRegistry::get()", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_replica_set.cpp"
        ], 
        "symbol": "mongo::MockReplicaSet::getNode(std::string const&)", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_replica_set.cpp"
        ], 
        "symbol": "mongo::MockReplicaSet::getHosts() const", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_replica_set.cpp"
        ], 
        "symbol": "mongo::MockReplicaSet::kill(std::string const&)", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_replica_set.cpp"
        ], 
        "symbol": "mongo::MockReplicaSet::getPrimary() const", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/dbtests/mock/mock_replica_set.cpp"
        ], 
        "symbol": "mongo::MockReplicaSet::~MockReplicaSet()", 
        "object": "src/mongo/client/dbclient_rs_test.cpp"
    }
]