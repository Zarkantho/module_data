[
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Null()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Script::New(v8::Handle<v8::String>, v8::ScriptOrigin*, v8::ScriptData*, v8::Handle<v8::String>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Int32::Value() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Context::Enter()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::SetInternalField(int, v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::IsArray() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::IsObject() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::IsBoolean() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::TryCatch::Exception() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Date::NumberValue() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/v8threads.cc"
        ], 
        "symbol": "v8::Locker::~Locker()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Function::NewInstance(int, v8::Handle<v8::Value>*) const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::New()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::String::Utf8Value::Utf8Value(v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Number::Value() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::V8::GlobalizeReference(v8::internal::Object**)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::IsFunction() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::ToNumber() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Function::NewInstance() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Context::Global()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::jsonString(mongo::JsonStringFormat, int) const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::GetOwnPropertyNames()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/string_data.cpp"
        ], 
        "symbol": "mongo::StringData::Hasher::operator()(mongo::StringData const&) const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Script::Compile(v8::Handle<v8::String>, v8::Handle<v8::Value>, v8::Handle<v8::String>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Script::Run()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Function::SetName(v8::Handle<v8::String>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::TryCatch::TryCatch()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/base64.cpp"
        ], 
        "symbol": "mongo::base64::encode(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&, char const*, int)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::ObjectTemplate::SetNamedPropertyHandler(v8::Handle<v8::Value> (*)(v8::Local<v8::String>, v8::AccessorInfo const&), v8::Handle<v8::Value> (*)(v8::Local<v8::String>, v8::Local<v8::Value>, v8::AccessorInfo const&), v8::Handle<v8::Integer> (*)(v8::Local<v8::String>, v8::AccessorInfo const&), v8::Handle<v8::Boolean> (*)(v8::Local<v8::String>, v8::AccessorInfo const&), v8::Handle<v8::Array> (*)(v8::AccessorInfo const&), v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBClientWithCommands", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::Set(unsigned int, v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::TryCatch::Message() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::HandleScope::HandleScope()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Template::Set(v8::Handle<v8::String>, v8::Handle<v8::Data>, v8::PropertyAttribute)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::String::New(char const*, int)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::FunctionTemplate::GetFunction()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::V8::AddGCPrologueCallback(void (*)(v8::GCType, v8::GCCallbackFlags), v8::GCType)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Message::GetScriptResourceName() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/shell/mongo.cpp"
        ], 
        "symbol": "mongo::JSFiles::types", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::CheckedGetInternalField(int)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::V8::LowMemoryNotification()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::Has(unsigned int)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::IsExternal() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::TryCatch::CanContinue() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init(std::string const&)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::Delete(unsigned int)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::External::Value() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::String::Utf8Value::~Utf8Value()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::False()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::ToInteger() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::FunctionTemplate::Inherit(v8::Handle<v8::FunctionTemplate>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::V8::MakeWeak(v8::internal::Object**, void*, void (*)(v8::Persistent<v8::Value>, void*))", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Integer::New(int)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::Delete(v8::Handle<v8::String>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Context::HasOutOfMemoryException()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::Get(unsigned int)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::InternalFieldCount()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::V8::AdjustAmountOfExternalAllocatedMemory(long)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::StrictEquals(v8::Handle<v8::Value>) const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Message::GetLineNumber() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::HasOwnProperty(v8::Handle<v8::String>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::ToInt32() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::True()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Array::Length() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::V8::TerminateExecution(v8::Isolate*)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Number::New(double)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::IsNumber() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::ObjectTemplate::SetIndexedPropertyHandler(v8::Handle<v8::Value> (*)(unsigned int, v8::AccessorInfo const&), v8::Handle<v8::Value> (*)(unsigned int, v8::Local<v8::Value>, v8::AccessorInfo const&), v8::Handle<v8::Integer> (*)(unsigned int, v8::AccessorInfo const&), v8::Handle<v8::Boolean> (*)(unsigned int, v8::AccessorInfo const&), v8::Handle<v8::Array> (*)(v8::AccessorInfo const&), v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::TryCatch::HasCaught() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Message::GetStartPosition() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/v8threads.cc"
        ], 
        "symbol": "v8::Locker::Locker(v8::Isolate*)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Function::Call(v8::Handle<v8::Object>, int, v8::Handle<v8::Value>*)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::Uint32Value() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::ToBoolean() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::FunctionTemplate::HasInstance(v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/string_data.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::StringData const&)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::interrupt()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::Get(v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::ObjectTemplate::SetCallAsFunctionHandler(v8::Handle<v8::Value> (*)(v8::Arguments const&), v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::ToString() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::HandleScope::CreateHandle(v8::internal::Object*)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Array::New(int)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Context::New(v8::ExtensionConfiguration*, v8::Handle<v8::ObjectTemplate>, v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::V8::DisposeGlobal(v8::internal::Object**)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::join()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/log_manager.cpp"
        ], 
        "symbol": "mongo::logger::LogManager::getNamedDomain(std::string const&)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::V8::GetVersion()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::V8::IgnoreOutOfMemoryException()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Isolate::Dispose()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Isolate::Exit()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::V8::IsExecutionTerminating(v8::Isolate*)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::HandleScope::RawClose(v8::internal::Object**)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::V8::AddGCEpilogueCallback(void (*)(v8::GCType, v8::GCCallbackFlags), v8::GCType)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::FunctionTemplate::New(v8::Handle<v8::Value> (*)(v8::Arguments const&), v8::Handle<v8::Value>, v8::Handle<v8::Signature>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::IsRegExp() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::TryCatch::~TryCatch()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Boolean::Value() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Message::GetEndPosition() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::GetHiddenValue(v8::Handle<v8::String>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::HandleScope::~HandleScope()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Integer::Value() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::Set(v8::Handle<v8::Value>, v8::Handle<v8::Value>, v8::PropertyAttribute)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Isolate::New()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBClientBase", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/base64.cpp"
        ], 
        "symbol": "mongo::base64::decode(std::string const&)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Undefined()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::ObjectTemplate::SetInternalFieldCount(int)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMillis64()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::FunctionTemplate::InstanceTemplate()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::HeapStatistics::HeapStatistics()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Date::New(double)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::SetHiddenValue(v8::Handle<v8::String>, v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::IsDate() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/shell/mongo.cpp"
        ], 
        "symbol": "mongo::JSFiles::assert", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::FunctionTemplate::PrototypeTemplate()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::V8::GetHeapStatistics(v8::HeapStatistics*)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::Has(v8::Handle<v8::String>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::FunctionTemplate::SetClassName(v8::Handle<v8::String>)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Isolate::Enter()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclientcursor.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBClientCursor", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::ForceSet(v8::Handle<v8::Value>, v8::Handle<v8::Value>, v8::PropertyAttribute)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::External::New(void*)", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::ToObject() const", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Context::Exit()", 
        "object": "src/mongo/scripting/engine_v8.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/scripting/bson_template_evaluator.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/scripting/bson_template_evaluator.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/scripting/bson_template_evaluator.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/scripting/bson_template_evaluator.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/scripting/bson_template_evaluator.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/scripting/bson_template_evaluator.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::CpuProfileNode::GetSelfTime() const", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::CpuProfileNode::GetFunctionName() const", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::String::New(char const*, int)", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::CpuProfileNode::GetScriptResourceName() const", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::CpuProfile::GetTopDownRoot() const", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::String::Utf8Value::Utf8Value(v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::CpuProfileNode::GetChildrenCount() const", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::String::Utf8Value::~Utf8Value()", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::CpuProfiler::StopProfiling(v8::Handle<v8::String>, v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::CpuProfiler::StartProfiling(v8::Handle<v8::String>)", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::CpuProfileNode::GetLineNumber() const", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::CpuProfileNode::GetChild(int) const", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::CpuProfileNode::GetTotalTime() const", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/scripting/v8_profiler.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Null()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::IsBoolean() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::SetInternalField(int, v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/sasl_client_authenticate.cpp"
        ], 
        "symbol": "mongo::saslCommandUserFieldName", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::IsArray() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::IsObject() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/sasl_client_authenticate.cpp"
        ], 
        "symbol": "mongo::saslCommandPasswordFieldName", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Function::NewInstance(int, v8::Handle<v8::Value>*) const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::New()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::String::Utf8Value::Utf8Value(v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::V8::GlobalizeReference(v8::internal::Object**)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::ToNumber() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Function::NewInstance() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclientcursor.cpp"
        ], 
        "symbol": "mongo::DBClientCursor::_finishConsInit()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::parse(std::string const&, std::string&)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::NumberValue() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Int32::Value() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::GetPrototype()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::Int32Value() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::HandleScope::HandleScope()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::String::New(char const*, int)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::FunctionTemplate::GetFunction()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::String::WriteAscii(char*, int, int, int) const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/text.cpp"
        ], 
        "symbol": "mongo::parseLL(char const*)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::IntegerValue() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::CheckedGetInternalField(int)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::TryCatch::TryCatch()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init(std::string const&)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::GetPropertyNames()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::External::Value() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::TryCatch::ReThrow()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::String::Utf8Value::~Utf8Value()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::False()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::ToInteger() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclientcursor.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientCursor", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::BooleanValue() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::V8::MakeWeak(v8::internal::Object**, void*, void (*)(v8::Persistent<v8::Value>, void*))", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Integer::New(int)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/s/d_state.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::haveLocalShardingInfo(std::string const&)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::ToInt32() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::True()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Array::Length() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::String::Utf8Length() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Array::CloneElementAt(unsigned int)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Number::New(double)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::IsNumber() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::IsFunction() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::createDirectClient()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Function::Call(v8::Handle<v8::Object>, int, v8::Handle<v8::Value>*)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::ToBoolean() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::FunctionTemplate::HasInstance(v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::InternalFieldCount()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::Get(v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::ToString() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::V8::DisposeGlobal(v8::internal::Object**)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::HandleScope::RawClose(v8::internal::Object**)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/base64.cpp"
        ], 
        "symbol": "mongo::base64::encode(char const*, int)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::GetRealNamedProperty(v8::Handle<v8::String>)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::HasRealNamedProperty(v8::Handle<v8::String>)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::connect(std::string&, double) const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::TryCatch::~TryCatch()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Boolean::Value() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::GetHiddenValue(v8::Handle<v8::String>)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::HandleScope::~HandleScope()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/sasl_client_authenticate.cpp"
        ], 
        "symbol": "mongo::saslCommandUserDBFieldName", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/base64.cpp"
        ], 
        "symbol": "mongo::base64::decode(std::string const&)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::ToUint32() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Undefined()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::ObjectTemplate::SetInternalFieldCount(int)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::FunctionTemplate::InstanceTemplate()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::SetHiddenValue(v8::Handle<v8::String>, v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::FunctionTemplate::PrototypeTemplate()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::HandleScope::CreateHandle(v8::internal::Object*)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::Has(v8::Handle<v8::String>)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::ForceSet(v8::Handle<v8::Value>, v8::Handle<v8::Value>, v8::PropertyAttribute)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/sasl_client_authenticate.cpp"
        ], 
        "symbol": "mongo::saslCommandMechanismFieldName", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::auth(mongo::BSONObj const&)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::External::New(void*)", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::ToObject() const", 
        "object": "src/mongo/scripting/v8_db.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::interrupt()", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMillis64()", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::join()", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/scripting/v8_deadline_monitor_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::path_traits::dispatch(boost::filesystem3::directory_entry const&, std::string&, std::codecvt<wchar_t, char, __mbstate_t> const&)", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::File()", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::open(char const*, bool, bool)", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::dir_itr_close(void*&, void*&)", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/shell/mongo.cpp"
        ], 
        "symbol": "mongo::JSFiles::query", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::directory_iterator_construct(boost::filesystem3::directory_iterator&, boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::status(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::directory_iterator_increment(boost::filesystem3::directory_iterator&, boost::system::error_code*)", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/shell/mongo.cpp"
        ], 
        "symbol": "mongo::JSFiles::mongo", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/shell/mongo.cpp"
        ], 
        "symbol": "mongo::JSFiles::utils_sh", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::~File()", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/shell/mongo.cpp"
        ], 
        "symbol": "mongo::JSFiles::mr", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::createDirectClient()", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::is_open() const", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/shell/mongo.cpp"
        ], 
        "symbol": "mongo::JSFiles::db", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/shell/mongo.cpp"
        ], 
        "symbol": "mongo::JSFiles::utils", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::len()", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::read(unsigned long long, char*, unsigned int)", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/shell/mongo.cpp"
        ], 
        "symbol": "mongo::JSFiles::collection", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::wchar_t_codecvt_facet()", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/shell/mongo.cpp"
        ], 
        "symbol": "mongo::JSFiles::writes", 
        "object": "src/mongo/scripting/engine.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/scripting/bson_template_evaluator_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::simpleCommand(std::string const&, mongo::BSONObj*, std::string const&)", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::FullMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init(std::string const&)", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::parse(std::string const&, std::string&)", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastError(bool, bool, int, int)", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::wasserted(char const*, char const*, unsigned int)", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::~RE()", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::no_arg", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::exception const&)", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::Init(std::string const&, pcrecpp::RE_Options const*)", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::connect(std::string&, double) const", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::auth(std::string const&, std::string const&, std::string const&, std::string&, bool)", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/scripting/bench.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Message::GetScriptResourceName() const", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Context::Enter()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::IsObject() const", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::TryCatch::Exception() const", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/v8threads.cc"
        ], 
        "symbol": "v8::Locker::~Locker()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Message::GetSourceLine() const", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::String::Utf8Value::Utf8Value(v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Context::Global()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Message::GetEndColumn() const", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::TryCatch::Message() const", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::HandleScope::HandleScope()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::String::New(char const*, int)", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::TryCatch::TryCatch()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::GetPropertyNames()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::External::Value() const", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::String::Utf8Value::~Utf8Value()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Message::GetLineNumber() const", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::ThrowException(v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::IsFunction() const", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::TryCatch::HasCaught() const", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/v8threads.cc"
        ], 
        "symbol": "v8::Locker::Locker(v8::Isolate*)", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Function::Call(v8::Handle<v8::Object>, int, v8::Handle<v8::Value>*)", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Context::Exit()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::join()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Isolate::Exit()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::HandleScope::RawClose(v8::internal::Object**)", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Message::GetStartColumn() const", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::TryCatch::~TryCatch()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::GetHiddenValue(v8::Handle<v8::String>)", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::HandleScope::~HandleScope()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Undefined()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::External::New(void*)", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Object::SetHiddenValue(v8::Handle<v8::String>, v8::Handle<v8::Value>)", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::HandleScope::CreateHandle(v8::internal::Object*)", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Isolate::Enter()", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Exception::Error(v8::Handle<v8::String>)", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/v8/src/api.cc"
        ], 
        "symbol": "v8::Value::ToObject() const", 
        "object": "src/mongo/scripting/v8_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/scripting/utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_append", 
        "object": "src/mongo/scripting/utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_finish", 
        "object": "src/mongo/scripting/utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_init", 
        "object": "src/mongo/scripting/utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/scripting/utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version.cpp"
        ], 
        "symbol": "mongo::versionString", 
        "object": "src/mongo/scripting/utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/scripting/utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/scripting/utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/scripting/utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/scripting/utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/scripting/utils.cpp"
    }
]