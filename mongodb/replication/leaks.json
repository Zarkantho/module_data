[
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::wait(unsigned int)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::go()", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::~BackgroundJob()", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::operator<<(mongo::logger::Tee*)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/security_key.cpp"
        ], 
        "symbol": "mongo::authenticateInternalUser(mongo::DBClientWithCommands*)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::isAuthEnabled() const", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::internal", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::checkAuthForCommand(mongo::ClientBasic*, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientConnection", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "typeinfo for mongo::BackgroundJob", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::_numConnections", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::getGlobalAuthorizationManager()", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::BackgroundJob(bool)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/repl/consensus.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::MongoFile::flushAll(bool)", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/timer_stats.cpp"
        ], 
        "symbol": "mongo::TimerHolder::~TimerHolder()", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/timer_stats.cpp"
        ], 
        "symbol": "mongo::TimerStats::getReport() const", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::SpinLock()", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::killCurrentOp", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/timer_stats.cpp"
        ], 
        "symbol": "mongo::TimerHolder::TimerHolder(mongo::TimerStats*)", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/timer_stats.cpp"
        ], 
        "symbol": "mongo::TimerHolder::recordMillis()", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/kill_current_op.cpp"
        ], 
        "symbol": "mongo::KillCurrentOp::checkForInterrupt(bool)", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/server_status.cpp"
        ], 
        "symbol": "mongo::ServerStatusMetric::ServerStatusMetric(std::string const&)", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::~SpinLock()", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::DurableInterface::_impl", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::convertExceptionCode(int)", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/write_concern.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::resync", 
        "object": "src/mongo/db/repl/resync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/db/repl/resync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/repl/resync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::checkAuthForCommand(mongo::ClientBasic*, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/resync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/db/repl/resync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/repl/resync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/repl/resync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/db/repl/resync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/db/repl/resync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::TempRelease::~TempRelease()", 
        "object": "src/mongo/db/repl/resync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/resync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::TempRelease::TempRelease()", 
        "object": "src/mongo/db/repl/resync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/db/repl/resync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/resync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/repl/resync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/db/repl/resync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/resync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/resync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/resync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::isAuthEnabled() const", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/security_key.cpp"
        ], 
        "symbol": "mongo::isInternalAuthSet()", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::getHostName()", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientConnection", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::getGlobalAuthorizationManager()", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/security_key.cpp"
        ], 
        "symbol": "mongo::authenticateInternalUser(mongo::DBClientWithCommands*)", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::_numConnections", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/server_status.cpp"
        ], 
        "symbol": "mongo::ServerStatusMetric::ServerStatusMetric(std::string const&)", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/repl/oplogreader.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::Task::Task()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "typeinfo for mongo::ServerParameter", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::grantInternalAuthorization()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::getSingleton(char const*, mongo::BSONObj&)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBRead::DBRead(mongo::StringData const&)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::shutdown()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::~BackgroundJob()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/isself.cpp"
        ], 
        "symbol": "mongo::HostAndPort::isSelf() const", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::SpinLock()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/optime.cpp"
        ], 
        "symbol": "mongo::OpTime::notifier", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::operator<<(mongo::logger::Tee*)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "vtable for mongo::task::Task", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::wasserted(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::shardingState", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::~ServerParameter()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientInterface::findOne(std::string const&, mongo::Query const&, mongo::BSONObj const*, int)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBRead::~DBRead()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "vtable for mongo::task::Server", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_pool.cpp"
        ], 
        "symbol": "mongo::threadpool::ThreadPool::~ThreadPool()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/message_port.cpp"
        ], 
        "symbol": "mongo::MessagingPort::closeAllSockets(unsigned int)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::getLast(char const*, mongo::BSONObj&)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::clearTmpCollections()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::putSingleton(char const*, mongo::BSONObj)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_pool.cpp"
        ], 
        "symbol": "mongo::threadpool::ThreadPool::ThreadPool(int)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/get_last_error.cpp"
        ], 
        "symbol": "mongo::getLastErrorDefault", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/optime.cpp"
        ], 
        "symbol": "mongo::OpTime::m", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::resetShardingState()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::time_t_to_String_short(long)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::~SpinLock()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::ServerParameter(mongo::ServerParameterSet*, std::string const&)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logReplSetReconfig(mongo::ClientBasic*, mongo::BSONObj const*, mongo::BSONObj const*)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp", 
            "src/mongo/db/client.cpp", 
            "src/mongo/client/clientAndShell.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getCurrent()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::DBWrite(mongo::StringData const&)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::getDatabaseNames(std::vector<std::string, std::allocator<std::string> >&, std::string const&)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/optime.cpp"
        ], 
        "symbol": "mongo::OpTime::last", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::reverseNaturalObj", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameterSet::getGlobal()", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::dbexit(mongo::ExitCode, char const*)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::BackgroundJob(bool)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/db/repl/rs.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::prettyHostName()", 
        "object": "src/mongo/db/repl/replset_web_handler.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbwebserver.cpp"
        ], 
        "symbol": "mongo::DbWebHandler::DbWebHandler(std::string const&, double, bool)", 
        "object": "src/mongo/db/repl/replset_web_handler.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/replset_web_handler.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/replset_web_handler.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/replset_web_handler.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/replset_web_handler.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/replset_web_handler.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::getSingleton(char const*, mongo::BSONObj&)", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/security_key.cpp"
        ], 
        "symbol": "mongo::isInternalAuthSet()", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::~BackgroundJob()", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/security_key.cpp"
        ], 
        "symbol": "mongo::authenticateInternalUser(mongo::DBClientWithCommands*)", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::isAuthEnabled() const", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::Server::send(boost::function<void ()>)", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::emptyCollection(char const*)", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientConnection", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::putSingleton(char const*, mongo::BSONObj)", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "typeinfo for mongo::BackgroundJob", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::_numConnections", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::getHostName()", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::getGlobalAuthorizationManager()", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/repl/sync_source_feedback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::insertDocument(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "typeinfo for mongo::SocketException", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getOrCreateCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::isCapped() const", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/db/repl/sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::RemoveSaver::RemoveSaver(std::string const&, std::string const&, std::string const&)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::RemoveSaver::goingToDelete(mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_lifecycle_impl.cpp"
        ], 
        "symbol": "mongo::UpdateLifecycleImpl::UpdateLifecycleImpl(bool, mongo::NamespaceString const&)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::getSingleton(char const*, mongo::BSONObj&)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_lifecycle_impl.cpp"
        ], 
        "symbol": "vtable for mongo::UpdateLifecycleImpl", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBRead::DBRead(mongo::StringData const&)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/internal_runner.cpp"
        ], 
        "symbol": "mongo::InternalRunner::InternalRunner(std::string const&, mongo::PlanStage*, mongo::WorkingSet*)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::TempRelease::TempRelease()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update.cpp"
        ], 
        "symbol": "mongo::update(mongo::UpdateRequest const&, mongo::OpDebug*)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::numRecords() const", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/cloner.cpp"
        ], 
        "symbol": "mongo::Cloner::copyCollectionFromRemote(std::string const&, std::string const&, std::string&)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/cap.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::cappedTruncateAfter(char const*, mongo::DiskLoc, bool)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::DurableInterface::_impl", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::OpDebug::reset()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::operator<<(mongo::logger::Tee*)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::TempRelease::~TempRelease()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::initialize()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBRead::~DBRead()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::RemoveSaver::~RemoveSaver()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::writelocktry::writelocktry(int)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::MongoFile::flushAll(bool)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/eof_runner.cpp"
        ], 
        "symbol": "mongo::EOFRunner::EOFRunner(mongo::CanonicalQuery*, std::string const&)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::writelocktry::~writelocktry()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::findOne(mongo::StringData const&, mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::_finishInit()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::nested()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::isW()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::isLocked()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/cap.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::emptyCappedCollection(char const*)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::isCapped() const", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/collection_scan.cpp"
        ], 
        "symbol": "mongo::CollectionScan::CollectionScan(mongo::CollectionScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::time_t_to_String_short(long)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::findCommand(std::string const&)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::findOne(mongo::StringData const&, mongo::BSONObj const&, mongo::BSONObj&, bool)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::dropCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::getGlobalAuthorizationManager()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::reverseNaturalObj", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/delete.cpp"
        ], 
        "symbol": "mongo::deleteObjects(mongo::StringData const&, mongo::BSONObj, bool, bool, bool)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::_timeTracker", 
        "object": "src/mongo/db/repl/rs_rollback.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::simpleCommand(std::string const&, mongo::BSONObj*, std::string const&)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastErrorHolder::disableForCommand()", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::operator<<(mongo::logger::Tee*)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::internal", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::replSetConfigure", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::lastError", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::checkAuthForCommand(mongo::ClientBasic*, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::testCommandsEnabled", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::gotHandshake(mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::replSetStateChange", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMillis64()", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::replSetGetStatus", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/repl/replset_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::Task::Task()", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::Server::doWork()", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::Task::setUp()", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::~BackgroundJob()", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::operator<<(mongo::logger::Tee*)", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "vtable for mongo::task::Task", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "typeinfo for mongo::task::Server", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/security_key.cpp"
        ], 
        "symbol": "mongo::authenticateInternalUser(mongo::DBClientWithCommands*)", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::isAuthEnabled() const", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "vtable for mongo::task::Server", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::Task::run()", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientConnection", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::_numConnections", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::getGlobalAuthorizationManager()", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/isself.cpp"
        ], 
        "symbol": "mongo::HostAndPort::isSelf() const", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/repl/manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::startupWarningsLog", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgassertedNoTrace(int, char const*)", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/isself.cpp"
        ], 
        "symbol": "mongo::HostAndPort::isSelf() const", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::operator<<(mongo::logger::Tee*)", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::putSingletonGod(char const*, mongo::BSONObj, bool)", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::count(std::string const&, mongo::BSONObj const&, int, int, int)", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::Array() const", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/security_key.cpp"
        ], 
        "symbol": "mongo::authenticateInternalUser(mongo::DBClientWithCommands*)", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::isAuthEnabled() const", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientInterface::findOne(std::string const&, mongo::Query const&, mongo::BSONObj const*, int)", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientConnection", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::_numConnections", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::md5() const", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::getGlobalAuthorizationManager()", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/repl/rs_config.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::getSingleton(char const*, mongo::BSONObj&)", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/isself.cpp"
        ], 
        "symbol": "mongo::HostAndPort::isSelf() const", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::operator<<(mongo::logger::Tee*)", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::replSetConfigure", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::checkAuthForCommand(mongo::ClientBasic*, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::getHostName()", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/rs_initiate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "mongo::StartupTest::StartupTest()", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::getSingleton(char const*, mongo::BSONObj&)", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "typeinfo for mongo::StartupTest", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/ramlog.cpp"
        ], 
        "symbol": "mongo::RamLog::get(std::string const&)", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/ramlog.cpp"
        ], 
        "symbol": "mongo::RamLog::toHTML(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&)", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::time_t_to_String_short(long)", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "mongo::StartupTest::~StartupTest()", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::readlocktry::readlocktry(int)", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::readlocktry::~readlocktry()", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/repl/health.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/repl/repl_start.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/db/repl/repl_start.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/db/repl/repl_start.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/repl/repl_start.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/db/repl/repl_start.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/repl/repl_start.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/db/repl/repl_start.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/repl/repl_start.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/repl/repl_start.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/repl_start.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/db/repl/repl_start.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/repl_start.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/write_concern_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/write_concern_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/write_concern_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/write_concern_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/write_concern_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/write_concern_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/write_concern_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/server_status.cpp"
        ], 
        "symbol": "mongo::ServerStatusSection::ServerStatusSection(std::string const&)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/server_status.cpp"
        ], 
        "symbol": "mongo::OpCounterServerStatusSection::OpCounterServerStatusSection(std::string const&, mongo::OpCounters*)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/counters.cpp"
        ], 
        "symbol": "mongo::replOpCounters", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/internal_runner.cpp"
        ], 
        "symbol": "mongo::InternalRunner::InternalRunner(std::string const&, mongo::PlanStage*, mongo::WorkingSet*)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastErrorHolder::disableForCommand()", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::jsTime()", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(std::string const&, double)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::wasserted(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::lastError", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::checkAuthForCommand(mongo::ClientBasic*, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/eof_runner.cpp"
        ], 
        "symbol": "mongo::EOFRunner::EOFRunner(mongo::CanonicalQuery*, std::string const&)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBClientBase", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::isLocked()", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/collection_scan.cpp"
        ], 
        "symbol": "mongo::CollectionScan::CollectionScan(mongo::CollectionScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBClientConnection", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/repl/replication_server_status.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::Task::Task()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::setSoTimeout(double)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::jsTime()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_service.cpp"
        ], 
        "symbol": "mongo::getGlobalFailPointRegistry()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::~BackgroundJob()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::SpinLock()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::Task::halt()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::operator<<(mongo::logger::Tee*)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "vtable for mongo::task::Task", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::slowShouldFailOpenBlock()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/security_key.cpp"
        ], 
        "symbol": "mongo::authenticateInternalUser(mongo::DBClientWithCommands*)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::ScopedFailPoint::getData() const", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::isAuthEnabled() const", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::internal", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::Server::send(boost::function<void ()>)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::Task::run()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::checkAuthForCommand(mongo::ClientBasic*, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "typeinfo for mongo::task::Task", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::ScopedFailPoint::~ScopedFailPoint()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientConnection", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::repeat(mongo::task::Task*, unsigned int)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::_numConnections", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::~SpinLock()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_registry.cpp"
        ], 
        "symbol": "mongo::FailPointRegistry::addFailPoint(std::string const&, mongo::FailPoint*)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::fork(mongo::task::Task*)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::ScopedFailPoint::ScopedFailPoint(mongo::FailPoint*)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::getGlobalAuthorizationManager()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::FailPoint()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::replHasDatabases()", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/heartbeat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::grantInternalAuthorization()", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::update(std::string const&, mongo::Query, mongo::BSONObj, bool, bool)", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::go()", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::~BackgroundJob()", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/fsync.cpp"
        ], 
        "symbol": "mongo::lockedForWriting()", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "typeinfo for mongo::BackgroundJob", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::inShutdown()", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::BackgroundJob(bool)", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/repl/write_concern.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/timer_stats.cpp"
        ], 
        "symbol": "mongo::TimerStats::getReport() const", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailedNoTrace(int)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::Task::run()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/murmurhash3/MurmurHash3.cpp"
        ], 
        "symbol": "MurmurHash3_x86_32(void const*, int, unsigned int, void*)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::DurableInterface::_impl", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::reset()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::Task::setUp()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_service.cpp"
        ], 
        "symbol": "mongo::getGlobalFailPointRegistry()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::~BackgroundJob()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::SpinLock()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::operator<<(mongo::logger::Tee*)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "vtable for mongo::task::Task", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::wasserted(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/timer_stats.cpp"
        ], 
        "symbol": "mongo::TimerHolder::TimerHolder(mongo::TimerStats*)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "typeinfo for mongo::task::Server", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::slowShouldFailOpenBlock()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::setMode(mongo::FailPoint::Mode, unsigned int, mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::ParallelBatchWriterMode::iAmABatchParticipant()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "vtable for mongo::task::Server", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::Server::send(boost::function<void ()>)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/prefetch.cpp"
        ], 
        "symbol": "mongo::prefetchPagesForReplicatedOp(mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/task.cpp"
        ], 
        "symbol": "mongo::task::Server::doWork()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/timer_stats.cpp"
        ], 
        "symbol": "mongo::TimerHolder::~TimerHolder()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/fsync.cpp"
        ], 
        "symbol": "mongo::filesLockedFsync", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::isLocked()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::shutdown()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::~SpinLock()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::time_t_to_String_short(long)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_registry.cpp"
        ], 
        "symbol": "mongo::FailPointRegistry::addFailPoint(std::string const&, mongo::FailPoint*)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_registry.cpp"
        ], 
        "symbol": "mongo::FailPointRegistry::getFailPoint(std::string const&) const", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_pool.cpp"
        ], 
        "symbol": "mongo::threadpool::ThreadPool::join()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp", 
            "src/mongo/db/client.cpp", 
            "src/mongo/client/clientAndShell.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getCurrent()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::dropCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::DBWrite(mongo::StringData const&)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::FailPoint()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::shouldFailCloseBlock()", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_pool.cpp"
        ], 
        "symbol": "mongo::threadpool::ThreadPool::schedule(boost::function<void ()>)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/server_status.cpp"
        ], 
        "symbol": "mongo::ServerStatusMetric::ServerStatusMetric(std::string const&)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::ParallelBatchWriterMode::_batchLock", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/db/repl/rs_sync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/timer_stats.cpp"
        ], 
        "symbol": "mongo::TimerStats::getReport() const", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::shutdown()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::go()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_service.cpp"
        ], 
        "symbol": "mongo::getGlobalFailPointRegistry()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::SpinLock()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::operator<<(mongo::logger::Tee*)", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/timer_stats.cpp"
        ], 
        "symbol": "mongo::TimerHolder::TimerHolder(mongo::TimerStats*)", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::slowShouldFailOpenBlock()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/timer_stats.cpp"
        ], 
        "symbol": "mongo::TimerHolder::~TimerHolder()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::shouldFailCloseBlock()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::~SpinLock()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::time_t_to_String_short(long)", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_registry.cpp"
        ], 
        "symbol": "mongo::FailPointRegistry::addFailPoint(std::string const&, mongo::FailPoint*)", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::inShutdown()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::FailPoint()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::ExceptionInfo::toString() const", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::reverseNaturalObj", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/server_status.cpp"
        ], 
        "symbol": "mongo::ServerStatusMetric::ServerStatusMetric(std::string const&)", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/repl/bgsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_lifecycle_impl.cpp"
        ], 
        "symbol": "mongo::UpdateLifecycleImpl::UpdateLifecycleImpl(bool, mongo::NamespaceString const&)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::findById(mongo::Collection*, mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/counters.cpp"
        ], 
        "symbol": "mongo::replOpCounters", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/optime.cpp"
        ], 
        "symbol": "mongo::OpTime::now(mongo::mutex::scoped_lock const&)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_lifecycle_impl.cpp"
        ], 
        "symbol": "vtable for mongo::UpdateLifecycleImpl", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update.cpp"
        ], 
        "symbol": "mongo::update(mongo::UpdateRequest const&, mongo::OpDebug*)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::MsgAssertionException", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/scripting/engine.cpp"
        ], 
        "symbol": "mongo::Scope::storedFuncMod()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::userCreateNS(char const*, mongo::BSONObj, std::string&, bool, bool*)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::assertWriteLocked(mongo::StringData const&)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::insertDocument(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::go()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::insertDocument(mongo::DocWriter const*, bool)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/optime.cpp"
        ], 
        "symbol": "mongo::OpTime::notifier", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbcommands.cpp"
        ], 
        "symbol": "mongo::_runCommands(char const*, mongo::BSONObj&, mongo::_BufBuilder<mongo::TrivialAllocator>&, mongo::BSONObjBuilder&, bool, int)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_builder.cpp"
        ], 
        "symbol": "mongo::IndexBuilder::IndexBuilder(mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::haveIdIndex() const", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::storageSize(int*, mongo::BSONArrayBuilder*) const", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands/dbhash.cpp"
        ], 
        "symbol": "mongo::logOpForDbHash(char const*, char const*, mongo::BSONObj const&, mongo::BSONObj*, mongo::BSONObj const*, bool)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientInterface::findOne(std::string const&, mongo::Query const&, mongo::BSONObj const*, int)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/counters.cpp"
        ], 
        "symbol": "mongo::globalOpCounters", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::MongoFile::flushAll(bool)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::findOne(mongo::StringData const&, mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::isW()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/optime.cpp"
        ], 
        "symbol": "mongo::OpTime::m", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::isCapped() const", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::UserException", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::OpDebug::reset()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_migrate.cpp"
        ], 
        "symbol": "mongo::logOpForSharding(char const*, char const*, mongo::BSONObj const&, mongo::BSONObj*, mongo::BSONObj const*, bool)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, mongo::Database*)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::ensureHaveIdIndex()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::DBWrite(mongo::StringData const&)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::getGlobalAuthorizationManager()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::logOp(char const*, char const*, mongo::BSONObj const&, mongo::BSONObj*, bool*)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/optime.cpp"
        ], 
        "symbol": "mongo::OpTime::last", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_builder.cpp"
        ], 
        "symbol": "mongo::IndexBuilder::~IndexBuilder()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::reverseNaturalObj", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::ErrorMsg::ErrorMsg(char const*, char)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_builder.cpp"
        ], 
        "symbol": "mongo::IndexBuilder::build(mongo::Client::Context&) const", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/delete.cpp"
        ], 
        "symbol": "mongo::deleteObjects(mongo::StringData const&, mongo::BSONObj, bool, bool, bool)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/db/repl/oplog.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "typeinfo for mongo::ServerParameter", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::findById(mongo::Client&, char const*, mongo::BSONObj, mongo::BSONObj&, bool*, bool*)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::getSingleton(char const*, mongo::BSONObj&)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/internal_runner.cpp"
        ], 
        "symbol": "mongo::InternalRunner::InternalRunner(std::string const&, mongo::PlanStage*, mongo::WorkingSet*)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::QuoteMeta(pcrecpp::StringPiece const&)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalRead::GlobalRead(int)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::TempRelease::TempRelease()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update.cpp"
        ], 
        "symbol": "mongo::update(mongo::UpdateRequest const&, mongo::OpDebug*)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::getcurns", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgassertedNoTrace(int, char const*)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::DurableInterface::_impl", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::reset()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::assertWriteLocked(mongo::StringData const&)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::dbHolderUnchecked()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::TempRelease::~TempRelease()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogstreamBuilder const&)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/cloner.cpp"
        ], 
        "symbol": "mongo::Cloner::cloneFrom(mongo::Client::Context&, std::string const&, mongo::CloneOptions const&, std::string&, int*, std::set<std::string, std::less<std::string>, std::allocator<std::string> >*)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclientcursor.cpp"
        ], 
        "symbol": "mongo::DBClientCursor::peek(std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> >&, int)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::~ServerParameter()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::writelocktry::~writelocktry()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalRead::~GlobalRead()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientInterface::findOne(std::string const&, mongo::Query const&, mongo::BSONObj const*, int)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_pool.cpp"
        ], 
        "symbol": "mongo::threadpool::ThreadPool::~ThreadPool()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::writelocktry::writelocktry(int)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::somethingWriteLocked()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::exists(std::string const&)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::NE", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::emptyCollection(char const*)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/eof_runner.cpp"
        ], 
        "symbol": "mongo::EOFRunner::EOFRunner(mongo::CanonicalQuery*, std::string const&)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::_finishInit()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::putSingleton(char const*, mongo::BSONObj)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_pool.cpp"
        ], 
        "symbol": "mongo::threadpool::ThreadPool::ThreadPool(int)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::nested()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::isLocked()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/collection_scan.cpp"
        ], 
        "symbol": "mongo::CollectionScan::CollectionScan(mongo::CollectionScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::OpDebug::reset()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::time_t_to_String_short(long)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::ServerParameter(mongo::ServerParameterSet*, std::string const&)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::duplicateUncasedName(bool, std::string const&, std::string const&, std::set<std::string, std::less<std::string>, std::allocator<std::string> >*)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::dropDatabase(std::string const&)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::getHostName()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_pool.cpp"
        ], 
        "symbol": "mongo::threadpool::ThreadPool::join()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_pool.cpp"
        ], 
        "symbol": "mongo::threadpool::ThreadPool::schedule(boost::function<void ()>)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameterSet::getGlobal()", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::dbexit(mongo::ExitCode, char const*)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/db/repl/master_slave.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "typeinfo for mongo::SocketException", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::numRecords() const", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/cloner.cpp"
        ], 
        "symbol": "mongo::Cloner::go(mongo::Client::Context&, std::string const&, mongo::CloneOptions const&, std::set<std::string, std::less<std::string>, std::allocator<std::string> >*, std::string&, int*)", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/extent_manager.cpp"
        ], 
        "symbol": "mongo::ExtentManager::flushFiles(bool)", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::operator<<(mongo::logger::Tee*)", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::initialize()", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::dropAllDatabasesExceptLocal()", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/cloner.cpp"
        ], 
        "symbol": "mongo::Cloner::Cloner()", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/cap.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::emptyCappedCollection(char const*)", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getDatabaseNames()", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::getGlobalAuthorizationManager()", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::reverseNaturalObj", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/repl/rs_initialsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/repl/repl_reads_ok.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/repl/repl_reads_ok.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/repl/repl_reads_ok.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/repl/repl_reads_ok.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/repl/repl_reads_ok.cpp"
    }
]