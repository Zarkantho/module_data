[
    {
        "sources": [
            "src/mongo/util/fail_point_service.cpp"
        ], 
        "symbol": "mongo::getGlobalFailPointRegistry()", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::rec() const", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::slowShouldFailOpenBlock()", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::FailPoint()", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::Record::likelyInPhysicalMemory(char const*)", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::shouldFailCloseBlock()", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_registry.cpp"
        ], 
        "symbol": "mongo::FailPointRegistry::addFailPoint(std::string const&, mongo::FailPoint*)", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::dottedField(unsigned long) const", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::equalsDottedField(mongo::StringData const&) const", 
        "object": "src/mongo/db/exec/fetch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/query/interval_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/query/interval_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/query/interval_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/query/interval_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/interval_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/query/interval_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/query/interval_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/interval_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/query/interval_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/interval_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/query/interval_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/query/interval_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/interval_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/interval_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/query/interval_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/query/interval_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/interval_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/interval_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_array.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_array.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_array.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_array.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_array.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/matcher/expression_array.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/matcher/expression_parser_tree.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_parser_tree.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_tree.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_parser_tree.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_tree.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_parser_tree.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/matcher/expression_parser_tree.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/matcher/expression_parser_tree.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cell.cc"
        ], 
        "symbol": "vtable for S2Cell", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Point::Point()", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2region.cc"
        ], 
        "symbol": "S2Region::~S2Region()", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/geoquery.cpp"
        ], 
        "symbol": "mongo::GeoQuery::parseFrom(mongo::BSONObj const&)", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/geoquery.cpp"
        ], 
        "symbol": "mongo::NearQuery::parseFrom(mongo::BSONObj const&)", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/matcher/expression_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONNULL", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/matcher/expression_parser_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/collection_metadata.cpp"
        ], 
        "symbol": "mongo::CollectionMetadata::keyBelongsToMe(mongo::BSONObj const&) const", 
        "object": "src/mongo/db/exec/shard_filter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::extractSingleKey(mongo::BSONObj const&) const", 
        "object": "src/mongo/db/exec/shard_filter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::KeyPattern(mongo::BSONObj const&)", 
        "object": "src/mongo/db/exec/shard_filter.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "typeinfo for mongo::ServerParameter", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::findIdIndex()", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::numIndexesReady() const", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::shardingState", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::~ServerParameter()", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::getCollectionMetadata(std::string const&)", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::ServerParameter(mongo::ServerParameterSet*, std::string const&, bool, bool)", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::deregisterRunner(mongo::Runner*)", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ExportedServerParameter<bool>::setFromString(std::string const&)", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getDescriptor(int)", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::isCapped() const", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection_info_cache.cpp"
        ], 
        "symbol": "mongo::CollectionInfoCache::getPlanCache() const", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameterSet::getGlobal()", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/query/get_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/query/single_solution_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/or.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/or.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/exec/or.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::dottedField(unsigned long) const", 
        "object": "src/mongo/db/exec/or.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::equalsDottedField(mongo::StringData const&) const", 
        "object": "src/mongo/db/exec/or.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/query/explain_plan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::~RE()", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator!=(mongo::Status const&) const", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONUndefined", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONNULL", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/matcher/expression_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "typeinfo for mongo::ServerParameter", 
        "object": "src/mongo/db/query/qlog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::ServerParameter(mongo::ServerParameterSet*, std::string const&, bool, bool)", 
        "object": "src/mongo/db/query/qlog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::~ServerParameter()", 
        "object": "src/mongo/db/query/qlog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameterSet::getGlobal()", 
        "object": "src/mongo/db/query/qlog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/qlog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ExportedServerParameter<bool>::setFromString(std::string const&)", 
        "object": "src/mongo/db/query/qlog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/query/internal_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::deregisterRunner(mongo::Runner*)", 
        "object": "src/mongo/db/query/internal_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::registerRunner(mongo::Runner*)", 
        "object": "src/mongo/db/query/internal_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/plan_cache_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(std::string const&)", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator!=(mongo::Status const&) const", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/query_planner_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Polygon::Polygon()", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Box::inside(mongo::Point, double) const", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getDescriptor(int)", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::GeoHash()", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Polygon::contains(mongo::Point const&) const", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Box::onBoundary(mongo::Point, double)", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Box::maxDim() const", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Box::intersects(mongo::Box const&) const", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Box::center() const", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::findIndexByKeyPattern(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Polygon::bounds()", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHashConverter::hash(double, double) const", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::distanceWithin(mongo::Point const&, mongo::Point const&, double)", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHashConverter::hash(mongo::Point const&) const", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::distance(mongo::Point const&, mongo::Point const&)", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::checkEarthBounds(mongo::Point const&)", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Polygon::contains(mongo::Point const&, double) const", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getIndex(mongo::IndexDescriptor const*)", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::spheredist_deg(mongo::Point const&, mongo::Point const&)", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Box::fudge(double)", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Point::Point(double, double)", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Box::truncate(double, double)", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::GeoHash(mongo::GeoHash const&)", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::operator=(mongo::GeoHash const&)", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Point::Point()", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Box::Box()", 
        "object": "src/mongo/db/exec/2d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Point::Point(mongo::BSONObj const&)", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Box::Box(mongo::Point, mongo::Point)", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::GeoHash()", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::up() const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::appendToBuilder(mongo::BSONObjBuilder*, char const*) const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::atMaxY() const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::atMinX() const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::GeoHash(mongo::BSONElement const&, unsigned int)", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::operator+(std::string const&) const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index/2d_access_method.cpp"
        ], 
        "symbol": "mongo::TwoDAccessMethod::getKeys(mongo::BSONObj const&, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> >&) const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHashConverter::sizeEdge(mongo::GeoHash const&) const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::constrains() const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHashConverter::unhashToPoint(mongo::GeoHash const&) const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::GeoHash(unsigned int, unsigned int, unsigned int)", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::move(int, int)", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::canRefine() const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHashConverter::unhashToPoint(mongo::BSONElement const&) const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::operator!=(mongo::GeoHash const&) const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::atMinY() const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::equalsDottedField(mongo::StringData const&) const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Point::Point(double, double)", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::rec() const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::GeoHash(mongo::GeoHash const&)", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::hasPrefix(mongo::GeoHash const&) const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::operator=(mongo::GeoHash const&)", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHashConverter::hash(mongo::BSONObj const&) const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::atMaxX() const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Box::Box()", 
        "object": "src/mongo/db/exec/2dcommon.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/ops/insert.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/ops/insert.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/optime.cpp"
        ], 
        "symbol": "mongo::OpTime::now(mongo::mutex::scoped_lock const&)", 
        "object": "src/mongo/db/ops/insert.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/db/ops/insert.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/ops/insert.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/ops/insert.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/optime.cpp"
        ], 
        "symbol": "mongo::OpTime::m", 
        "object": "src/mongo/db/ops/insert.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/ops/insert.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/ops/insert.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/ops/insert.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/ops/insert.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::updateSlaveLocation(mongo::CurOp&)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::setMaxTimeMicros(unsigned long long)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::killCurrentOp", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::ClientCursorPin(long long)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::ensureStarted()", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::appendCommandStatus(mongo::BSONObjBuilder&, mongo::Status const&)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::numRecords() const", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/kill_current_op.cpp"
        ], 
        "symbol": "mongo::KillCurrentOp::checkForInterrupt(bool)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbcommands.cpp"
        ], 
        "symbol": "mongo::_runCommands(char const*, mongo::BSONObj&, mongo::_BufBuilder<mongo::TrivialAllocator>&, mongo::BSONObjBuilder&, bool, int)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::shardingState", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::getCollectionMetadata(std::string const&)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::convertExceptionCode(int)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::getVersion(std::string const&) const", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::registerRunner(mongo::Runner*)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/repl_reads_ok.cpp"
        ], 
        "symbol": "mongo::replVerifyReadsOk(mongo::LiteParsedQuery const*)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::getRemainingMaxTimeMicros() const", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::getHostNameCached()", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::c() const", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::ClientCursor(mongo::Runner*, int, mongo::BSONObj)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::deleteUnderlying()", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::needCollectionMetadata(std::string const&) const", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::~ClientCursorPin()", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/db/query/new_find.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/exec/working_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/exec/working_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/exec/working_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/exec/working_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/exec/working_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/exec/working_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/working_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/exec/working_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/working_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/exec/working_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/exec/working_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/working_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/working_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/exec/working_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/exec/working_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/exec/working_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/interval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/interval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/interval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/query/interval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/interval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/interval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/interval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Point::Point(mongo::BSONObj const&)", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getDescriptor(int)", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cell.cc"
        ], 
        "symbol": "vtable for S2Cell", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Box::Box(double, double, double)", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Box::intersects(mongo::Box const&) const", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHashConverter::sizeEdge(mongo::GeoHash const&) const", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::findIndexByKeyPattern(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::constrains() const", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHashConverter::hash(double, double) const", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2region.cc"
        ], 
        "symbol": "S2Region::~S2Region()", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::distanceWithin(mongo::Point const&, mongo::Point const&, double)", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::distance(mongo::Point const&, mongo::Point const&)", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::checkEarthBounds(mongo::Point const&)", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getIndex(mongo::IndexDescriptor const*)", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::spheredist_deg(mongo::Point const&, mongo::Point const&)", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/hash.cpp"
        ], 
        "symbol": "mongo::GeoHash::GeoHash(mongo::GeoHash const&)", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Point::Point()", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Box::Box()", 
        "object": "src/mongo/db/exec/2dnear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::appendMaxForType(mongo::StringData const&, int)", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::getGtLtOp(mongo::BSONElement const&)", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::jsonString(mongo::JsonStringFormat, int) const", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::getGtLtOp(int) const", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::minKey", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index/btree_key_generator.cpp"
        ], 
        "symbol": "mongo::BtreeKeyGeneratorV1::BtreeKeyGeneratorV1(std::vector<char const*, std::allocator<char const*> >, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> >, bool)", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::clientReadable() const", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_names.cpp"
        ], 
        "symbol": "mongo::IndexNames::GEO_2DSPHERE", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::staticUndefined", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::staticNull", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::appendMinForType(mongo::StringData const&, int)", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index/btree_key_generator.cpp"
        ], 
        "symbol": "mongo::BtreeKeyGenerator::getKeys(mongo::BSONObj const&, std::set<mongo::BSONObj, mongo::BSONObjCmp, std::allocator<mongo::BSONObj> >*) const", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_names.cpp"
        ], 
        "symbol": "mongo::IndexNames::GEO_2D", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::maxKey", 
        "object": "src/mongo/db/queryutil.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/matcher/expression_parser_text_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/matcher/expression_parser_text_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/matcher/expression_parser_text_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/matcher/expression_parser_text_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/matcher/expression_parser_text_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_parser_text_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_parser_text_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/matcher/expression_parser_text_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/matcher/expression_parser_text_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/matcher/expression_parser_text_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/matcher/expression_parser_text_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_text_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/matcher/expression_parser_text_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/query/type_explain.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/query/type_explain.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_parser.cpp"
        ], 
        "symbol": "mongo::FieldParser::extract(mongo::BSONObj, mongo::BSONField<std::string> const&, std::string*, std::string*)", 
        "object": "src/mongo/db/query/type_explain.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_parser.cpp"
        ], 
        "symbol": "mongo::FieldParser::extract(mongo::BSONObj, mongo::BSONField<bool> const&, bool*, std::string*)", 
        "object": "src/mongo/db/query/type_explain.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/type_explain.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_parser.cpp"
        ], 
        "symbol": "mongo::FieldParser::extract(mongo::BSONObj, mongo::BSONField<long long> const&, long long*, std::string*)", 
        "object": "src/mongo/db/query/type_explain.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/type_explain.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/query/type_explain.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_parser.cpp"
        ], 
        "symbol": "mongo::FieldParser::extract(mongo::BSONObj, mongo::BSONField<mongo::BSONObj> const&, mongo::BSONObj*, std::string*)", 
        "object": "src/mongo/db/query/type_explain.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/type_explain.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/type_explain.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/type_explain.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/type_explain.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/exec/merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/exec/merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/exec/merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/exec/merge_sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_names.cpp"
        ], 
        "symbol": "mongo::IndexNames::findPluginName(mongo::BSONObj const&)", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_language.cpp"
        ], 
        "symbol": "mongo::fts::FTSLanguage::str() const", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cell.cc"
        ], 
        "symbol": "vtable for S2Cell", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_language.cpp"
        ], 
        "symbol": "mongo::fts::FTSLanguage::~FTSLanguage()", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::MsgAssertionException", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_query.cpp"
        ], 
        "symbol": "mongo::fts::FTSQuery::parse(std::string const&, std::string const&)", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::shardingState", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::getCollectionMetadata(std::string const&)", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::findIndexByKeyPattern(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_spec.cpp"
        ], 
        "symbol": "mongo::fts::FTSSpec::getIndexPrefix(mongo::BSONObj const&, mongo::BSONObj*) const", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_language.cpp"
        ], 
        "symbol": "mongo::fts::FTSLanguage::FTSLanguage(mongo::fts::FTSLanguage const&)", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2region.cc"
        ], 
        "symbol": "S2Region::~S2Region()", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getDescriptor(int)", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getIndex(mongo::IndexDescriptor const*)", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_language.cpp"
        ], 
        "symbol": "mongo::fts::FTSLanguage::operator=(mongo::fts::FTSLanguage const&)", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Point::Point()", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_language.cpp"
        ], 
        "symbol": "mongo::fts::FTSLanguage::FTSLanguage()", 
        "object": "src/mongo/db/query/stage_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/elapsed_tracker.cpp"
        ], 
        "symbol": "mongo::ElapsedTracker::ElapsedTracker(int, int)", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::Record::likelyInPhysicalMemory(char const*)", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/elapsed_tracker.cpp"
        ], 
        "symbol": "mongo::ElapsedTracker::intervalHasElapsed()", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator!=(mongo::Status const&) const", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::deregisterRunner(mongo::Runner*)", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::Record::touch(bool) const", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::suggestYieldMicros()", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection_info_cache.cpp"
        ], 
        "symbol": "mongo::CollectionInfoCache::getPlanCache() const", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/elapsed_tracker.cpp"
        ], 
        "symbol": "mongo::ElapsedTracker::resetLastTime()", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::rec() const", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::staticYield(int, mongo::StringData const&, mongo::Record const*)", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/query/plan_ranker.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/query/plan_ranker.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/query/plan_ranker.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/query/plan_ranker.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/plan_ranker.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/query/plan_ranker.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/plan_ranker.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/exec/collection_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/collection_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::getIterator(mongo::DiskLoc const&, bool, mongo::CollectionScanParams::Direction const&) const", 
        "object": "src/mongo/db/exec/collection_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/exec/collection_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/exec/collection_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/exec/collection_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/collection_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/exec/collection_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/exec/collection_scan.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/exec/collection_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/exec/collection_scan.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/exec/collection_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/exec/collection_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/db/exec/collection_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::dottedField(unsigned long) const", 
        "object": "src/mongo/db/exec/collection_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::equalsDottedField(mongo::StringData const&) const", 
        "object": "src/mongo/db/exec/collection_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/path.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::parse(mongo::StringData const&)", 
        "object": "src/mongo/db/matcher/path.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/path.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/path.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/path.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::getPart(unsigned long) const", 
        "object": "src/mongo/db/matcher/path.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/path.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/matcher/path.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::dottedField(unsigned long) const", 
        "object": "src/mongo/db/matcher/path.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_language.cpp"
        ], 
        "symbol": "mongo::fts::FTSLanguage::~FTSLanguage()", 
        "object": "src/mongo/db/matcher/expression_parser_text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_parser_text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/matcher/expression_parser_text.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/matcher/expression_parser_text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_language.cpp"
        ], 
        "symbol": "mongo::fts::FTSLanguage::makeFTSLanguage(std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_text.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/matcher/expression_parser_text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_parser_text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/matcher/expression_parser_text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/matcher/expression_parser_text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/matcher/expression_parser_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/matcher/expression_parser_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/matcher/expression_parser_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/matcher/expression_parser_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/matcher/expression_parser_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_parser_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_parser_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/matcher/expression_parser_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/matcher/expression_parser_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/matcher/expression_parser_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/matcher/expression_parser_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/matcher/expression_parser_geo_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/exec/working_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/working_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/working_set.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/exec/working_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/working_set.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/exec/working_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/exec/working_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/exec/working_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/query_solution.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2region.cc"
        ], 
        "symbol": "S2Region::~S2Region()", 
        "object": "src/mongo/db/query/query_solution.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/query_solution.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cell.cc"
        ], 
        "symbol": "vtable for S2Cell", 
        "object": "src/mongo/db/query/query_solution.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/query_solution.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/query/query_solution.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/query_solution.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/query_solution.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/query_solution.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/matcher/expression_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/query/planner_ixselect.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/query/planner_ixselect.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/query/planner_ixselect.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/planner_ixselect.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/query/planner_ixselect.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/planner_ixselect.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/planner_ixselect.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/query/planner_ixselect.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/geoquery.cpp"
        ], 
        "symbol": "mongo::GeometryContainer::hasFlatRegion() const", 
        "object": "src/mongo/db/query/planner_ixselect.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/planner_ixselect.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/geoquery.cpp"
        ], 
        "symbol": "mongo::GeometryContainer::hasS2Region() const", 
        "object": "src/mongo/db/query/planner_ixselect.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/planner_ixselect.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/planner_ixselect.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/query/lite_parsed_query.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/lite_parsed_query.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/lite_parsed_query.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::isFieldNamePrefixOf(mongo::BSONObj const&) const", 
        "object": "src/mongo/db/query/lite_parsed_query.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/lite_parsed_query.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/lite_parsed_query.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/lite_parsed_query.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/query/lite_parsed_query.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/lite_parsed_query.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/query/cached_plan_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/index_tag.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/index_tag.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index/btree_index_cursor.cpp"
        ], 
        "symbol": "mongo::BtreeIndexCursor::seek(std::vector<mongo::BSONElement const*, std::allocator<mongo::BSONElement const*> > const&, std::vector<bool, std::allocator<bool> > const&)", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getBtreeIndex(mongo::IndexDescriptor const*)", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::dottedField(unsigned long) const", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_names.cpp"
        ], 
        "symbol": "mongo::IndexNames::GEO_2D", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_names.cpp"
        ], 
        "symbol": "mongo::IndexNames::GEO_2DSPHERE", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getIndex(mongo::IndexDescriptor const*)", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::equalsDottedField(mongo::StringData const&) const", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::_getAccessMethodName(mongo::BSONObj const&)", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index/btree_index_cursor.cpp"
        ], 
        "symbol": "mongo::BtreeIndexCursor::skip(mongo::BSONObj const&, int, bool, std::vector<mongo::BSONElement const*, std::allocator<mongo::BSONElement const*> > const&, std::vector<bool, std::allocator<bool> > const&)", 
        "object": "src/mongo/db/exec/index_scan.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/match_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator!=(mongo::Status const&) const", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/lite_parsed_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_parser_geo.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2region.cc"
        ], 
        "symbol": "S2Region::~S2Region()", 
        "object": "src/mongo/db/matcher/expression_parser_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_geo.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cell.cc"
        ], 
        "symbol": "vtable for S2Cell", 
        "object": "src/mongo/db/matcher/expression_parser_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Point::Point()", 
        "object": "src/mongo/db/matcher/expression_parser_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_parser_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/geoquery.cpp"
        ], 
        "symbol": "mongo::GeoQuery::parseFrom(mongo::BSONObj const&)", 
        "object": "src/mongo/db/matcher/expression_parser_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/matcher/expression_parser_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/geoquery.cpp"
        ], 
        "symbol": "mongo::NearQuery::parseFrom(mongo::BSONObj const&)", 
        "object": "src/mongo/db/matcher/expression_parser_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_parser_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/matcher/expression_parser_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/matcher/expression_parser_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/matcher/expression_parser_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/query/parsed_projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/parsed_projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/parsed_projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/parsed_projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/parsed_projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/parsed_projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/parsed_projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/query/parsed_projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/matcher/expression_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/matcher/expression_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/matcher/expression_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/matcher/expression_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/matcher/expression_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/matcher/expression_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/matcher/expression_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/matcher/expression_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/matcher/expression_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/matcher/expression_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/matcher/expression_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/matcher/expression_parser_tree_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/geoquery.cpp"
        ], 
        "symbol": "mongo::GeoQuery::satisfiesPredicate(mongo::GeometryContainer const&) const", 
        "object": "src/mongo/db/matcher/expression_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_geo.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2region.cc"
        ], 
        "symbol": "S2Region::~S2Region()", 
        "object": "src/mongo/db/matcher/expression_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_geo.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cell.cc"
        ], 
        "symbol": "vtable for S2Cell", 
        "object": "src/mongo/db/matcher/expression_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Point::Point()", 
        "object": "src/mongo/db/matcher/expression_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/geoquery.cpp"
        ], 
        "symbol": "mongo::GeometryContainer::parseFrom(mongo::BSONObj const&)", 
        "object": "src/mongo/db/matcher/expression_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/matcher/expression_geo.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/exec/sort_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/matcher/expression_leaf.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::no_arg", 
        "object": "src/mongo/db/matcher/expression_leaf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_leaf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_leaf.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const", 
        "object": "src/mongo/db/matcher/expression_leaf.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::Init(std::string const&, pcrecpp::RE_Options const*)", 
        "object": "src/mongo/db/matcher/expression_leaf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_leaf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/matcher/expression_leaf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/matcher/expression_leaf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_leaf.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::~RE()", 
        "object": "src/mongo/db/matcher/expression_leaf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_leaf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/matcher/expression_leaf.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::getAuthenticatedUserNamesToken()", 
        "object": "src/mongo/db/matcher/expression_where.cpp"
    }, 
    {
        "sources": [
            "src/mongo/scripting/engine.cpp"
        ], 
        "symbol": "mongo::ScriptEngine::getPooledScope(std::string const&, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_where.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_where.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/matcher/expression_where.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp", 
            "src/mongo/db/client.cpp", 
            "src/mongo/client/clientAndShell.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getCurrent()", 
        "object": "src/mongo/db/matcher/expression_where.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_where.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_where.cpp"
    }, 
    {
        "sources": [
            "src/mongo/scripting/engine.cpp"
        ], 
        "symbol": "mongo::globalScriptEngine", 
        "object": "src/mongo/db/matcher/expression_where.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_where.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/matcher/expression_where.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/matcher/expression_where.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/matcher/expression_where.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/matcher/expression_where.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/matcher/expression_where.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/matcher/expression_where.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_where.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/matcher/expression_where.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/matcher/expression_where.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/matcher/expression_where.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::getGtLtOp(int) const", 
        "object": "src/mongo/db/matcher/expression_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/matcher/expression_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/matcher/expression_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/matcher/expression_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::LT", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/index_bounds_builder_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/query/canonical_query.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/canonical_query.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/canonical_query.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/canonical_query.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/canonical_query.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/canonical_query.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/canonical_query.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/query/canonical_query.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::setPaddingFactor(double)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::compareWithBSONElement(mongo::BSONElement const&, bool) const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/elapsed_tracker.cpp"
        ], 
        "symbol": "mongo::ElapsedTracker::ElapsedTracker(int, int)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::reset()", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::modsAffectIndices() const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::remove()", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref_set.cpp"
        ], 
        "symbol": "mongo::FieldRefSet::fillFrom(std::vector<mongo::FieldRef*, std::allocator<mongo::FieldRef*> > const&)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::hasChildren() const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::parse(mongo::StringData const&)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/element.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::operator[](mongo::StringData const&) const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::populateDocumentWithQueryFields(mongo::CanonicalQuery const*, mongo::mutablebson::Document&) const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::leftChild() const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::getInPlaceUpdates(std::vector<mongo::mutablebson::DamageEvent, std::allocator<mongo::mutablebson::DamageEvent> >*, char const**, unsigned long*)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::MsgAssertionException", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::modOptions() const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::DurableInterface::_impl", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::insertDocument(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::~Document()", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::makeElementNewOID(mongo::StringData const&)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/oplog.cpp"
        ], 
        "symbol": "mongo::logOp(char const*, char const*, mongo::BSONObj const&, mongo::BSONObj*, bool*, bool, mongo::BSONObj const*)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::writeTo(mongo::BSONObjBuilder*) const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref_set.cpp"
        ], 
        "symbol": "mongo::FieldRefSet::toString() const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::makeOplogEntryQuery(mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::getType() const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::ok() const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::update(mongo::StringData const&, mongo::mutablebson::Document*, mongo::BSONObj*, mongo::FieldRefSet*)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::parent() const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/element.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::pushFront(mongo::mutablebson::Element)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref_set.cpp"
        ], 
        "symbol": "mongo::FieldRefSet::findConflicts(mongo::FieldRef const*, mongo::FieldRefSet*) const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::setLogOp(bool)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::deregisterRunner(mongo::Runner*)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::Document(mongo::BSONObj const&, mongo::mutablebson::Document::InPlaceMode)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::isDocReplacement() const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::rightSibling() const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::refreshIndexKeys(mongo::IndexPathSet const&)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::legalClientSystemNS(mongo::StringData const&, bool)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::getFieldName() const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref_set.cpp"
        ], 
        "symbol": "mongo::FieldRefSet::FieldRefSet()", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::reset(mongo::BSONObj const&, mongo::mutablebson::Document::InPlaceMode)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/element.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::toString() const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::UpdateDriver(mongo::UpdateDriver::Options const&)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::typeName(mongo::BSONType)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::dottedField(unsigned long) const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::leftSibling() const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::parse(mongo::BSONObj const&)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::setContext(mongo::ModifierInterface::ExecInfo::UpdateContext)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::Document()", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::~UpdateDriver()", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::createCollection(mongo::StringData const&, bool, mongo::BSONObj const*, bool)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::updateDocument(mongo::DiskLoc const&, mongo::BSONObj const&, bool, mongo::OpDebug*)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref_set.cpp"
        ], 
        "symbol": "mongo::FieldRefSet::keepShortest(mongo::FieldRef const*)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::registerRunner(mongo::Runner*)", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::getPart(unsigned long) const", 
        "object": "src/mongo/db/ops/update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/matcher/path_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/exec/projection_exec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_tree.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_tree.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/exec/and_sorted.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/and_sorted.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/and_sorted.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/and_sorted.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/exec/and_sorted.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/exec/and_sorted.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/exec/and_sorted.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::dottedField(unsigned long) const", 
        "object": "src/mongo/db/exec/and_sorted.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::equalsDottedField(mongo::StringData const&) const", 
        "object": "src/mongo/db/exec/and_sorted.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/exec/projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/exec/projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/exec/projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/exec/projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/exec/projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/db/exec/projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/exec/projection_exec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/exec/projection_exec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/projection_exec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/exec/projection_exec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/exec/projection_exec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/projection_exec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/exec/projection_exec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::couldBeArray() const", 
        "object": "src/mongo/db/exec/projection_exec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/projection_exec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/exec/projection_exec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/exec/projection_exec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/exec/projection_exec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/query/planner_ixselect_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/query/planner_ixselect_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/query/planner_ixselect_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/query/planner_ixselect_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/query/planner_ixselect_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/query/planner_ixselect_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/query/planner_ixselect_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/query/planner_ixselect_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/query/planner_ixselect_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/query/planner_ixselect_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/query/planner_ixselect_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/query/planner_ixselect_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/planner_ixselect_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/text.cpp"
        ], 
        "symbol": "mongo::StringSplitter::split(std::string const&, std::string const&)", 
        "object": "src/mongo/db/query/planner_ixselect_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONUndefined", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/matcher/expression_parser_leaf_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/path_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/path_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/path_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/path_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::getPart(unsigned long) const", 
        "object": "src/mongo/db/matcher/path_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/path_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/matcher/path_internal.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/matcher/expression_array_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/query/parsed_projection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/query/parsed_projection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/query/parsed_projection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/query/parsed_projection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/query/parsed_projection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/query/parsed_projection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/parsed_projection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/query/parsed_projection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/query/parsed_projection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/query/parsed_projection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/query/parsed_projection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/query/parsed_projection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/query/parsed_projection_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::findIdIndex()", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getBtreeBasedIndex(mongo::IndexDescriptor const*)", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::rec() const", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::KeyPattern(mongo::BSONObj const&)", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/collection_metadata.cpp"
        ], 
        "symbol": "mongo::CollectionMetadata::keyBelongsToMe(mongo::BSONObj const&) const", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::staticYield(int, mongo::StringData const&, mongo::Record const*)", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::Record::likelyInPhysicalMemory(char const*)", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::needCollectionMetadata(std::string const&) const", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::shardingState", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::suggestYieldMicros()", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::getCollectionMetadata(std::string const&)", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::extractSingleKey(mongo::BSONObj const&) const", 
        "object": "src/mongo/db/query/idhack_runner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/query_planner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/query_planner.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cell.cc"
        ], 
        "symbol": "vtable for S2Cell", 
        "object": "src/mongo/db/query/query_planner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/query/query_planner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/query_planner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/query/query_planner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/query_planner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/query/query_planner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/query_planner.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2region.cc"
        ], 
        "symbol": "S2Region::~S2Region()", 
        "object": "src/mongo/db/query/query_planner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/query/query_planner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/query_planner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/query/query_planner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/query/query_planner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Point::Point()", 
        "object": "src/mongo/db/query/query_planner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/query/query_planner.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/projection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/projection.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regioncoverer.cc"
        ], 
        "symbol": "S2RegionCoverer::S2RegionCoverer()", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regionintersection.cc"
        ], 
        "symbol": "S2RegionIntersection::~S2RegionIntersection()", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cell.cc"
        ], 
        "symbol": "vtable for S2Cell", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/base/logging.cc"
        ], 
        "symbol": "google_base::DateLogger::DateLogger()", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2.cc"
        ], 
        "symbol": "S2::kAvgEdge", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cap.cc"
        ], 
        "symbol": "vtable for S2Cap", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cellid.cc"
        ], 
        "symbol": "S2CellId::kNumFaces", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/base/logging.cc"
        ], 
        "symbol": "google_base::DateLogger::HumanDate()", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regioncoverer.cc"
        ], 
        "symbol": "S2RegionCoverer::set_max_level(int)", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cap.cc"
        ], 
        "symbol": "S2Cap::Complement() const", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regioncoverer.cc"
        ], 
        "symbol": "S2RegionCoverer::set_min_level(int)", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2.cc"
        ], 
        "symbol": "S2::kMaxCellLevel", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cellid.cc"
        ], 
        "symbol": "S2CellId::ToString() const", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cellid.cc"
        ], 
        "symbol": "S2CellId::level() const", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cap.cc"
        ], 
        "symbol": "S2Cap::FromAxisAngle(Vector3<double> const&, S1Angle const&)", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regionintersection.cc"
        ], 
        "symbol": "S2RegionIntersection::Init(std::vector<S2Region*, std::allocator<S2Region*> >*)", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2region.cc"
        ], 
        "symbol": "S2Region::~S2Region()", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2latlngrect.cc"
        ], 
        "symbol": "vtable for S2LatLngRect", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regionintersection.cc"
        ], 
        "symbol": "S2RegionIntersection::S2RegionIntersection()", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regioncoverer.cc"
        ], 
        "symbol": "S2RegionCoverer::~S2RegionCoverer()", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cellid.cc"
        ], 
        "symbol": "S2CellId::kMaxLevel", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regionintersection.cc"
        ], 
        "symbol": "S2RegionIntersection::Release(std::vector<S2Region*, std::allocator<S2Region*> >*)", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/s2common.cpp"
        ], 
        "symbol": "mongo::S2SearchUtil::distanceBetween(Vector3<double> const&, mongo::BSONObj const&, double*)", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Point::Point()", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::getFieldsDotted(mongo::StringData const&, std::set<mongo::BSONElement, mongo::BSONElementCmpWithoutField, std::allocator<mongo::BSONElement> >&, bool) const", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cellid.cc"
        ], 
        "symbol": "S2CellId::kPosBits", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::findIndexByKeyPattern(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2latlngrect.cc"
        ], 
        "symbol": "S2LatLngRect::Area() const", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regioncoverer.cc"
        ], 
        "symbol": "S2RegionCoverer::GetCovering(S2Region const&, std::vector<S2CellId, std::allocator<S2CellId> >*)", 
        "object": "src/mongo/db/exec/s2near.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::appendMaxForType(mongo::StringData const&, int)", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regioncoverer.cc"
        ], 
        "symbol": "S2RegionCoverer::S2RegionCoverer()", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/base/logging.cc"
        ], 
        "symbol": "google_base::DateLogger::DateLogger()", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2.cc"
        ], 
        "symbol": "S2::kAvgEdge", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cellid.cc"
        ], 
        "symbol": "S2CellId::kNumFaces", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/base/logging.cc"
        ], 
        "symbol": "google_base::DateLogger::HumanDate()", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regioncoverer.cc"
        ], 
        "symbol": "S2RegionCoverer::set_max_level(int)", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2.cc"
        ], 
        "symbol": "S2::kMaxCellLevel", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cellid.cc"
        ], 
        "symbol": "S2CellId::ToString() const", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/hasher.cpp"
        ], 
        "symbol": "mongo::BSONElementHasher::hash64(mongo::BSONElement const&, int)", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cellid.cc"
        ], 
        "symbol": "S2CellId::level() const", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/geoquery.cpp"
        ], 
        "symbol": "mongo::GeoQuery::getRegion() const", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2region.cc"
        ], 
        "symbol": "S2Region::~S2Region()", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2latlngrect.cc"
        ], 
        "symbol": "vtable for S2LatLngRect", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regioncoverer.cc"
        ], 
        "symbol": "S2RegionCoverer::set_min_level(int)", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regioncoverer.cc"
        ], 
        "symbol": "S2RegionCoverer::~S2RegionCoverer()", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::appendMinForType(mongo::StringData const&, int)", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cellid.cc"
        ], 
        "symbol": "S2CellId::kPosBits", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2latlngrect.cc"
        ], 
        "symbol": "S2LatLngRect::Area() const", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cellid.cc"
        ], 
        "symbol": "S2CellId::kMaxLevel", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2regioncoverer.cc"
        ], 
        "symbol": "S2RegionCoverer::GetCovering(S2Region const&, std::vector<S2CellId, std::allocator<S2CellId> >*)", 
        "object": "src/mongo/db/query/index_bounds_builder.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/exec/working_set_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/working_set_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/working_set_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/working_set_common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/exec/working_set_common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/exec/working_set_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/exec/working_set_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/db/exec/working_set_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/exec/working_set_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/exec/and_hash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/and_hash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/and_hash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/and_hash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/exec/and_hash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/exec/and_hash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/exec/and_hash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::dottedField(unsigned long) const", 
        "object": "src/mongo/db/exec/and_hash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::equalsDottedField(mongo::StringData const&) const", 
        "object": "src/mongo/db/exec/and_hash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/exec/oplogstart.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/ondisk/namespace_index.cpp"
        ], 
        "symbol": "mongo::NamespaceIndex::details(mongo::StringData const&)", 
        "object": "src/mongo/db/exec/oplogstart.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::rec() const", 
        "object": "src/mongo/db/exec/oplogstart.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::Record::_accessing() const", 
        "object": "src/mongo/db/exec/oplogstart.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/oplogstart.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/exec/oplogstart.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/exec/oplogstart.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::ext() const", 
        "object": "src/mongo/db/exec/oplogstart.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/exec/oplogstart.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/exec/oplogstart.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/db/exec/oplogstart.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_names.cpp"
        ], 
        "symbol": "mongo::IndexNames::findPluginName(mongo::BSONObj const&)", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_matcher.cpp"
        ], 
        "symbol": "mongo::fts::FTSMatcher::hasNegativeTerm(mongo::BSONObj const&) const", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_language.cpp"
        ], 
        "symbol": "mongo::fts::FTSLanguage::~FTSLanguage()", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::MsgAssertionException", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_spec.cpp"
        ], 
        "symbol": "mongo::fts::MAX_WEIGHT", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/stemmer.cpp"
        ], 
        "symbol": "mongo::fts::Stemmer::~Stemmer()", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_language.cpp"
        ], 
        "symbol": "mongo::fts::FTSLanguage::FTSLanguage(mongo::fts::FTSLanguage const&)", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_matcher.cpp"
        ], 
        "symbol": "mongo::fts::FTSMatcher::phrasesMatch(mongo::BSONObj const&) const", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_index_format.cpp"
        ], 
        "symbol": "mongo::fts::FTSIndexFormat::getIndexKey(double, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getDescriptor(int)", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::equalsDottedField(mongo::StringData const&) const", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_matcher.cpp"
        ], 
        "symbol": "mongo::fts::FTSMatcher::FTSMatcher(mongo::fts::FTSQuery const&, mongo::fts::FTSSpec const&)", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/db/exec/text.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/exec/sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/exec/sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index/btree_key_generator.cpp"
        ], 
        "symbol": "mongo::BtreeKeyGenerator::getKeys(mongo::BSONObj const&, std::set<mongo::BSONObj, mongo::BSONObjCmp, std::allocator<mongo::BSONObj> >*) const", 
        "object": "src/mongo/db/exec/sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index/btree_key_generator.cpp"
        ], 
        "symbol": "mongo::BtreeKeyGeneratorV1::BtreeKeyGeneratorV1(std::vector<char const*, std::allocator<char const*> >, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> >, bool)", 
        "object": "src/mongo/db/exec/sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/exec/sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/exec/sort.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/query/planner_analysis.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/planner_analysis.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/query/planner_analysis.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/planner_analysis.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/query/planner_analysis.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/planner_analysis.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/query/planner_analysis.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/query/planner_analysis.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/query/planner_analysis.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/planner_analysis.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/planner_analysis.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/planner_analysis.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/query/plan_cache.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/string_data.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::StringData const&)", 
        "object": "src/mongo/db/query/plan_cache.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/plan_cache.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/plan_cache.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/query/plan_enumerator.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/plan_enumerator.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/query/plan_enumerator.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/query/plan_enumerator.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/query/plan_enumerator.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/query/plan_enumerator.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/plan_enumerator.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/query/plan_executor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/plan_executor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/elapsed_tracker.cpp"
        ], 
        "symbol": "mongo::ElapsedTracker::intervalHasElapsed()", 
        "object": "src/mongo/db/query/plan_executor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::rec() const", 
        "object": "src/mongo/db/query/plan_executor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/elapsed_tracker.cpp"
        ], 
        "symbol": "mongo::ElapsedTracker::ElapsedTracker(int, int)", 
        "object": "src/mongo/db/query/plan_executor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::deregisterRunner(mongo::Runner*)", 
        "object": "src/mongo/db/query/plan_executor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/query/plan_executor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/elapsed_tracker.cpp"
        ], 
        "symbol": "mongo::ElapsedTracker::resetLastTime()", 
        "object": "src/mongo/db/query/plan_executor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::Record::touch(bool) const", 
        "object": "src/mongo/db/query/plan_executor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/query/plan_executor.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/query/plan_executor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::Record::likelyInPhysicalMemory(char const*)", 
        "object": "src/mongo/db/query/plan_executor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/query/plan_executor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/query/plan_executor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::staticYield(int, mongo::StringData const&, mongo::Record const*)", 
        "object": "src/mongo/db/query/plan_executor.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/query/plan_executor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::suggestYieldMicros()", 
        "object": "src/mongo/db/query/plan_executor.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/query/index_bounds_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/query/index_bounds_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/query/index_bounds_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/query/index_bounds_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/index_bounds_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/query/index_bounds_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/query/index_bounds_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/index_bounds_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/query/index_bounds_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/index_bounds_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/query/index_bounds_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/query/index_bounds_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/index_bounds_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/index_bounds_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/query/index_bounds_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/query/index_bounds_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/index_bounds_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/index_bounds_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/matcher/expression_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/matcher/expression_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/matcher/expression_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/matcher/expression_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/matcher/expression_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/matcher/expression_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/matcher/expression_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/matcher/expression_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/matcher/expression_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/matcher/expression_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/expression_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/matcher/expression_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/matcher/expression_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/expression_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/matcher/expression_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/planner_access.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/planner_access.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2cell.cc"
        ], 
        "symbol": "vtable for S2Cell", 
        "object": "src/mongo/db/query/planner_access.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/query/planner_access.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/planner_access.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/query/planner_access.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/planner_access.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/query/planner_access.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/planner_access.cpp"
    }, 
    {
        "sources": [
            "src/third_party/s2/s2region.cc"
        ], 
        "symbol": "S2Region::~S2Region()", 
        "object": "src/mongo/db/query/planner_access.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/query/planner_access.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/planner_access.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/query/planner_access.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/shapes.cpp"
        ], 
        "symbol": "mongo::Point::Point()", 
        "object": "src/mongo/db/query/planner_access.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/query/planner_access.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_names.cpp"
        ], 
        "symbol": "mongo::IndexNames::findPluginName(mongo::BSONObj const&)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_language.cpp"
        ], 
        "symbol": "mongo::fts::FTSLanguage::str() const", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_language.cpp"
        ], 
        "symbol": "mongo::fts::FTSLanguage::~FTSLanguage()", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index/fts_access_method.cpp"
        ], 
        "symbol": "typeinfo for mongo::FTSAccessMethod", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::MsgAssertionException", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_query.cpp"
        ], 
        "symbol": "mongo::fts::FTSQuery::parse(std::string const&, std::string const&)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseResourcePattern(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::checkAuthForCommand(mongo::ClientBasic*, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_spec.cpp"
        ], 
        "symbol": "mongo::fts::FTSSpec::getIndexPrefix(mongo::BSONObj const&, mongo::BSONObj*) const", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_language.cpp"
        ], 
        "symbol": "mongo::fts::FTSLanguage::FTSLanguage(mongo::fts::FTSLanguage const&)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getDescriptor(int)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getIndex(mongo::IndexDescriptor const*)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/ondisk/namespace_index.cpp"
        ], 
        "symbol": "mongo::NamespaceIndex::details(mongo::StringData const&)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_language.cpp"
        ], 
        "symbol": "mongo::fts::FTSLanguage::operator=(mongo::fts::FTSLanguage const&)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::findIndexByKeyPattern(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/fts/fts_language.cpp"
        ], 
        "symbol": "mongo::fts::FTSLanguage::FTSLanguage()", 
        "object": "src/mongo/db/exec/stagedebug_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/matcher/matcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/db/matcher/matcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/matcher/matcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/query/index_bounds.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/query/index_bounds.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::clientReadable() const", 
        "object": "src/mongo/db/query/index_bounds.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/query/index_bounds.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/index_bounds.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/query/index_bounds.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/query/index_bounds.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/query/index_bounds.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/query/index_bounds.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/query/index_bounds.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/query/index_bounds.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/ondisk/namespace_index.cpp"
        ], 
        "symbol": "mongo::NamespaceIndex::details(mongo::StringData const&)", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::registerRunner(mongo::Runner*)", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/db/ops/count.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/oplog.cpp"
        ], 
        "symbol": "mongo::logOp(char const*, char const*, mongo::BSONObj const&, mongo::BSONObj*, bool*, bool, mongo::BSONObj const*)", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::deleteDocument(mongo::DiskLoc const&, bool, bool, mongo::BSONObj*)", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/namespace_details.cpp"
        ], 
        "symbol": "mongo::legalClientSystemNS(mongo::StringData const&, bool)", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::registerRunner(mongo::Runner*)", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/string_data.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::StringData const&)", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection.cpp"
        ], 
        "symbol": "mongo::Collection::isCapped() const", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::getcurns", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::DurableInterface::_impl", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogstreamBuilder const&)", 
        "object": "src/mongo/db/ops/delete.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/ops/delete.cpp"
    }
]