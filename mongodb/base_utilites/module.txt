####### base_utilites ######


# Use this in a class to explicitly disallow copying of the class. This can prevent bugs where you
# were accidentally copying a class that wasn't safe to copy.
src/mongo/base/disallow_copying.h

# 64 bit atomic counter

src/mongo/base/counter.h
src/mongo/base/counter_test.cpp (not built in anywhere)

# Vector and map that delete pointers to elements on destruction. "owning" the memory means you are
# responsible for deleting it.

src/mongo/base/owned_pointer_map.h
src/mongo/base/owned_pointer_map_test.cpp (not built in anywhere)
src/mongo/base/owned_pointer_vector.h
src/mongo/base/owned_pointer_vector_test.cpp (not built in anywhere)

# Status to return errors. StatusWith can return either an error or a value, so we don't have to
# use return parameters as arguments to the function.

src/mongo/base/status-inl.h
src/mongo/base/status.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/base/status.h
src/mongo/base/status_test.cpp (not built in anywhere)
src/mongo/base/status_with.h
src/mongo/base/error_codes.err
src/mongo/base/generate_error_codes.py

# Number to string conversion
## Why use these: is this somehow fast/safe? somehow JSON-aware?

src/mongo/base/parse_number.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/base/parse_number.h
src/mongo/base/parse_number_test.cpp (not built in anywhere)

# The StringData class is a wrapper around a char* that can be constructed from either std::string
# and a char* without copying the buffer. This is because a StringData doesn't free the buffer, so
# unlike std::string it doesn't need to have its own copy.
## Why: use for speed? is this similar to other classes people might be
## familiar with from elsewhere?
src/mongo/base/string_data-inl.h
src/mongo/base/string_data.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/base/string_data.h
src/mongo/base/string_data_test.cpp (not built in anywhere)


