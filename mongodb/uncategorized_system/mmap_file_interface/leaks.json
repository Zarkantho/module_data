[
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::inShutdown()", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::somethingWriteLocked()", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lockstate.cpp"
        ], 
        "symbol": "mongo::LockState::Dump()", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file_allocator.cpp"
        ], 
        "symbol": "mongo::FileAllocator::requestAllocation(std::string const&, long&)", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::flush(bool)", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file_allocator.cpp"
        ], 
        "symbol": "mongo::FileAllocator::get()", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/durable_mapped_file.cpp"
        ], 
        "symbol": "mongo::DurableMappedFile::create(std::string const&, unsigned long long&, bool)", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/durable_mapped_file.cpp"
        ], 
        "symbol": "mongo::DurableMappedFile::open(std::string const&, bool)", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::DurableInterface::_impl", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::status(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/storage/data_file.cpp"
    }
]