[
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::operator==(mongo::ActionType const&) const", 
        "object": "src/mongo/db/auth/action_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/stringutils.cpp"
        ], 
        "symbol": "mongo::splitStringDelim(std::string const&, std::vector<std::string, std::allocator<std::string> >*, char)", 
        "object": "src/mongo/db/auth/action_set.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::parseActionFromString(std::string const&, mongo::ActionType*)", 
        "object": "src/mongo/db/auth/action_set.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::actionToString(mongo::ActionType const&)", 
        "object": "src/mongo/db/auth/action_set.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::toString() const", 
        "object": "src/mongo/db/auth/action_set.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::anyAction", 
        "object": "src/mongo/db/auth/action_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/action_set.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator!=(mongo::Status const&) const", 
        "object": "src/mongo/db/auth/action_set.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::update", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::insert", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::ErrorCodes::Error)", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::anyAction", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::remove", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/auth/action_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/auth/auth_index_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/auth_index_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/auth/auth_index_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/auth/auth_index_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/auth/auth_index_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/auth_index_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/auth/auth_index_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/auth/auth_index_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::ensureIndex(char const*, mongo::BSONObj, bool, char const*)", 
        "object": "src/mongo/db/auth/auth_index_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/auth/auth_index_d.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/auth/auth_index_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/auth_index_d.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/auth/auth_index_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/auth_index_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/auth/auth_index_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/auth/auth_index_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/auth/auth_index_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "typeinfo for mongo::ServerParameter", 
        "object": "src/mongo/db/auth/auth_server_parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::~ServerParameter()", 
        "object": "src/mongo/db/auth/auth_server_parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::ServerParameter(mongo::ServerParameterSet*, std::string const&, bool, bool)", 
        "object": "src/mongo/db/auth/auth_server_parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/auth/auth_server_parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameterSet::getGlobal()", 
        "object": "src/mongo/db/auth/auth_server_parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/auth_server_parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/auth/auth_server_parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ExportedServerParameter<bool>::setFromString(std::string const&)", 
        "object": "src/mongo/db/auth/auth_server_parameters.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::update", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/element.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::pushBack(mongo::mutablebson::Element)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::insert", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator!=(mongo::ErrorCodes::Error) const", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/util/bson_extract.cpp"
        ], 
        "symbol": "mongo::bsonExtractStringFieldWithDefault(mongo::BSONObj const&, mongo::StringData const&, mongo::StringData const&, std::string*)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::makeElementObject(mongo::StringData const&)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/element.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::appendString(mongo::StringData const&, mongo::StringData const&)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::ErrorCodes::Error) const", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::remove", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/element.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::appendObject(mongo::StringData const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::createIndex", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dropIndex", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::makeElementArray(mongo::StringData const&)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/string_data.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::StringData const&)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/auth/authorization_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/auth/authorization_manager_global.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::~ServerParameter()", 
        "object": "src/mongo/db/auth/authorization_manager_global.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::ServerParameter(mongo::ServerParameterSet*, std::string const&, bool, bool)", 
        "object": "src/mongo/db/auth/authorization_manager_global.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "typeinfo for mongo::ServerParameter", 
        "object": "src/mongo/db/auth/authorization_manager_global.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/auth/authorization_manager_global.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/auth/authorization_manager_global.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameterSet::getGlobal()", 
        "object": "src/mongo/db/auth/authorization_manager_global.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/auth/authorization_manager_global.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::reset()", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::insert", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::ErrorCodes::Error)", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::~Document()", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::writeTo(mongo::BSONObjBuilder*) const", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::Array() const", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator!=(mongo::Status const&) const", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::Document()", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::ErrorCodes::Error) const", 
        "object": "src/mongo/db/auth/authorization_manager_test.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::update", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::insert", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::revokeRole", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator!=(mongo::ErrorCodes::Error) const", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::changeOwnCustomData", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::remove", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::createIndex", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::changeOwnPassword", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::grantRole", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/auth/authorization_session.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::insert", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::ErrorCodes::Error)", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::ErrorCodes::Error) const", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::collMod", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dbStats", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::shutdown", 
        "object": "src/mongo/db/auth/authorization_session_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/auth/authz_documents_update_guard.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/auth/authz_manager_external_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/authz_manager_external_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::update(std::string const&, mongo::Query, mongo::BSONObj, bool, bool)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalRead::GlobalRead(int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::convertExceptionCode(int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::dropIndexes(std::string const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::ErrorCodes::Error) const", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::runCommand(std::string const&, mongo::BSONObj const&, mongo::BSONObj&, int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalRead::~GlobalRead()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::remove(std::string const&, mongo::Query, bool)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::query(boost::function<void (mongo::BSONObj const&)>, std::string const&, mongo::Query, mongo::BSONObj const*, int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::insert(std::string const&, mongo::BSONObj, int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::findOne(mongo::StringData const&, mongo::BSONObj const&, mongo::BSONObj&, bool)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::ensureIndex(std::string const&, mongo::BSONObj, bool, std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastErrorString(mongo::BSONObj const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::getDatabaseNames(std::vector<std::string, std::allocator<std::string> >&, std::string const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/string_data.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::StringData const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/element.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::pushBack(mongo::mutablebson::Element)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::hasChildren() const", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/element.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::appendBool(mongo::StringData const&, bool)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::~Document()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/util/bson_extract.cpp"
        ], 
        "symbol": "mongo::bsonExtractTypedField(mongo::BSONObj const&, mongo::StringData const&, mongo::BSONType, mongo::BSONElement*)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::makeElementObject(mongo::StringData const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/element.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::appendString(mongo::StringData const&, mongo::StringData const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::writeTo(mongo::BSONObjBuilder*) const", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::ErrorCodes::Error) const", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/element.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::appendObject(mongo::StringData const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::Document(mongo::BSONObj const&, mongo::mutablebson::Document::InPlaceMode)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailedWithStatus(int, mongo::Status const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::makeElementArray(mongo::StringData const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::Document()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_local.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/element.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::appendElement(mongo::BSONElement const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::convertExceptionCode(int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::~Document()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::writeTo(mongo::BSONObjBuilder*) const", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::makeOplogEntryQuery(mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::ErrorCodes::Error) const", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::update(mongo::StringData const&, mongo::mutablebson::Document*, mongo::BSONObj*, mongo::FieldRefSet*)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/expression_parser.cpp"
        ], 
        "symbol": "mongo::MatchExpressionParser::_parse(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::reset(mongo::BSONObj const&, mongo::mutablebson::Document::InPlaceMode)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::UpdateDriver(mongo::UpdateDriver::Options const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::parse(mongo::BSONObj const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::populateDocumentWithQueryFields(mongo::BSONObj const&, mongo::mutablebson::Document&) const", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::Document()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::~UpdateDriver()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/grid.cpp"
        ], 
        "symbol": "mongo::Grid::getDBConfig(mongo::StringData const&, bool, std::string const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(std::string const&, double)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/cluster_write.cpp"
        ], 
        "symbol": "mongo::clusterDelete(std::string const&, mongo::BSONObj const&, int, mongo::BSONObj const&, mongo::BatchedCommandResponse*)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/cluster_write.cpp"
        ], 
        "symbol": "mongo::clusterInsert(std::string const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::BatchedCommandResponse*)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_database.cpp"
        ], 
        "symbol": "mongo::DatabaseType::~DatabaseType()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_database.cpp"
        ], 
        "symbol": "mongo::DatabaseType::DatabaseType()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_database.cpp"
        ], 
        "symbol": "mongo::DatabaseType::parseBSON(mongo::BSONObj const&, std::string*)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_database.cpp"
        ], 
        "symbol": "mongo::DatabaseType::ConfigNS", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/cluster_write.cpp"
        ], 
        "symbol": "mongo::clusterCreateIndex(std::string const&, mongo::BSONObj, bool, mongo::BSONObj const&, mongo::BatchedCommandResponse*)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::convertExceptionCode(int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::getShard(std::string const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_database.cpp"
        ], 
        "symbol": "mongo::DatabaseType::isValid(std::string*) const", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::BatchedCommandResponse()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/grid.cpp"
        ], 
        "symbol": "mongo::grid", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::Array() const", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::configServer", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/distlock.cpp"
        ], 
        "symbol": "mongo::ScopedDistributedLock::acquire(long long, std::string*)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/distlock.cpp"
        ], 
        "symbol": "mongo::ScopedDistributedLock::ScopedDistributedLock(mongo::ConnectionString const&, std::string const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::getN() const", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batched_command_response.cpp"
        ], 
        "symbol": "mongo::BatchedCommandResponse::~BatchedCommandResponse()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_fillServers(std::string)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastErrorString(mongo::BSONObj const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/cluster_write.cpp"
        ], 
        "symbol": "mongo::clusterUpdate(std::string const&, mongo::BSONObj const&, mongo::BSONObj const&, bool, bool, mongo::BSONObj const&, mongo::BatchedCommandResponse*)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::readPref(mongo::ReadPreference, mongo::BSONArray const&)", 
        "object": "src/mongo/db/auth/authz_manager_external_state_s.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::isLocked()", 
        "object": "src/mongo/db/auth/authz_session_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/authz_session_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/auth/authz_session_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/auth/authz_session_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/auth/authz_session_external_state_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/auth/authz_session_external_state_server_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/auth/authz_session_external_state_server_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ExportedServerParameter<bool>::setFromString(std::string const&)", 
        "object": "src/mongo/db/auth/authz_session_external_state_server_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/auth/authz_session_external_state_server_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/auth/authz_session_external_state_server_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::~ServerParameter()", 
        "object": "src/mongo/db/auth/authz_session_external_state_server_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/auth/authz_session_external_state_server_common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/auth/authz_session_external_state_server_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameterSet::getGlobal()", 
        "object": "src/mongo/db/auth/authz_session_external_state_server_common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/auth/authz_session_external_state_server_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::ServerParameter(mongo::ServerParameterSet*, std::string const&, bool, bool)", 
        "object": "src/mongo/db/auth/authz_session_external_state_server_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/authz_session_external_state_server_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "typeinfo for mongo::ServerParameter", 
        "object": "src/mongo/db/auth/authz_session_external_state_server_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp", 
            "src/mongo/db/client.cpp", 
            "src/mongo/client/clientAndShell.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getCurrent()", 
        "object": "src/mongo/db/auth/authz_session_external_state_server_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/auth/privilege_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/auth/privilege_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_parser.cpp"
        ], 
        "symbol": "mongo::FieldParser::extract(mongo::BSONObj, mongo::BSONField<std::string> const&, std::string*, std::string*)", 
        "object": "src/mongo/db/auth/privilege_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_parser.cpp"
        ], 
        "symbol": "mongo::FieldParser::extract(mongo::BSONElement, mongo::BSONField<std::string> const&, std::string*, std::string*)", 
        "object": "src/mongo/db/auth/privilege_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_parser.cpp"
        ], 
        "symbol": "mongo::FieldParser::extract(mongo::BSONObj, mongo::BSONField<bool> const&, bool*, std::string*)", 
        "object": "src/mongo/db/auth/privilege_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/auth/privilege_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/privilege_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/auth/privilege_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/privilege_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/privilege_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/db/auth/privilege_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/privilege_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/auth/privilege_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::insert", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/auth/privilege_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/role_graph.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::ErrorCodes::Error) const", 
        "object": "src/mongo/db/auth/role_graph.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/auth/role_graph.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailedWithStatus(int, mongo::Status const&)", 
        "object": "src/mongo/db/auth/role_graph.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/auth/role_graph.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::collStats", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::cleanupOrphaned", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::getShardVersion", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::addShard", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::applicationMessage", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dropDatabase", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::touch", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::update", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::insert", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::planCacheRead", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::reIndex", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::logRotate", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::viewRole", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::removeShard", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::indexStats", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::getParameter", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::connPoolSync", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::invalidateUserCache", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::resync", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dropRole", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::planCacheWrite", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::repairDatabase", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::splitChunk", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::getLog", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::getCmdLineOpts", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::killCursors", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::cpuProfiler", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::validate", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::createRole", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::inprog", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::listDatabases", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::unlock", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::authSchemaUpgrade", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::remove", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::renameCollectionSameDB", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::createCollection", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::hostInfo", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dropCollection", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::createIndex", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::killop", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::storageDetails", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::replSetConfigure", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::netstat", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::fsync", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::moveChunk", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::listShards", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::changeCustomData", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::enableProfiler", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::shardingState", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::connPoolStats", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::serverStatus", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::viewUser", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::appendOplogNote", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::changePassword", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::splitVector", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::setParameter", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dbHash", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::collMod", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::createUser", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::convertToCapped", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::planCacheHint", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::top", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::cursorInfo", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::getShardMap", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::revokeRole", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dropUser", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dropIndex", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::diagLogging", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::flushRouterConfig", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::replSetStateChange", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dbStats", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::emptycapped", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::grantRole", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::writeBacksQueued", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::replSetGetStatus", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::enableSharding", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::shutdown", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::closeAllDatabases", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::compact", 
        "object": "src/mongo/db/auth/role_graph_builtin_roles.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::update", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::insert", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::remove", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator!=(mongo::Status const&) const", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::shutdown", 
        "object": "src/mongo/db/auth/role_graph_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/auth/role_graph_update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::parse(mongo::BSONObj const&)", 
        "object": "src/mongo/db/auth/role_graph_update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::~Document()", 
        "object": "src/mongo/db/auth/role_graph_update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/util/bson_extract.cpp"
        ], 
        "symbol": "mongo::bsonExtractTypedField(mongo::BSONObj const&, mongo::StringData const&, mongo::BSONType, mongo::BSONElement*)", 
        "object": "src/mongo/db/auth/role_graph_update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/auth/role_graph_update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::populateDocumentWithQueryFields(mongo::BSONObj const&, mongo::mutablebson::Document&) const", 
        "object": "src/mongo/db/auth/role_graph_update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::writeTo(mongo::BSONObjBuilder*) const", 
        "object": "src/mongo/db/auth/role_graph_update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::Document()", 
        "object": "src/mongo/db/auth/role_graph_update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::~UpdateDriver()", 
        "object": "src/mongo/db/auth/role_graph_update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::UpdateDriver(mongo::UpdateDriver::Options const&)", 
        "object": "src/mongo/db/auth/role_graph_update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/role_graph_update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/role_graph_update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::ErrorCodes::Error) const", 
        "object": "src/mongo/db/auth/role_graph_update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/role_graph_update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/role_graph_update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_driver.cpp"
        ], 
        "symbol": "mongo::UpdateDriver::update(mongo::StringData const&, mongo::mutablebson::Document*, mongo::BSONObj*, mongo::FieldRefSet*)", 
        "object": "src/mongo/db/auth/role_graph_update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/auth/role_graph_update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/auth/role_graph_update.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::createPasswordDigest(std::string const&, std::string const&)", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/sasl_client_authenticate.cpp"
        ], 
        "symbol": "mongo::saslCommandUserFieldName", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/sasl_client_authenticate.cpp"
        ], 
        "symbol": "mongo::saslCommandPasswordFieldName", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/sasl_client_authenticate.cpp"
        ], 
        "symbol": "mongo::saslCommandUserDBFieldName", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/sasl_client_authenticate.cpp"
        ], 
        "symbol": "mongo::saslCommandMechanismFieldName", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/sasl_client_authenticate.cpp"
        ], 
        "symbol": "mongo::saslCommandDigestPasswordFieldName", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::auth(mongo::BSONObj const&)", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/auth/security_key.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/auth/user_cache_invalidator_job.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::inShutdown()", 
        "object": "src/mongo/db/auth/user_cache_invalidator_job.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/auth/user_cache_invalidator_job.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ExportedServerParameter<int>::setFromString(std::string const&)", 
        "object": "src/mongo/db/auth/user_cache_invalidator_job.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::~BackgroundJob()", 
        "object": "src/mongo/db/auth/user_cache_invalidator_job.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/auth/user_cache_invalidator_job.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/db/auth/user_cache_invalidator_job.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/auth/user_cache_invalidator_job.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/db/auth/user_cache_invalidator_job.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "typeinfo for mongo::BackgroundJob", 
        "object": "src/mongo/db/auth/user_cache_invalidator_job.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/auth/user_cache_invalidator_job.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::~ServerParameter()", 
        "object": "src/mongo/db/auth/user_cache_invalidator_job.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/auth/user_cache_invalidator_job.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/auth/user_cache_invalidator_job.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameterSet::getGlobal()", 
        "object": "src/mongo/db/auth/user_cache_invalidator_job.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/auth/user_cache_invalidator_job.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::ServerParameter(mongo::ServerParameterSet*, std::string const&, bool, bool)", 
        "object": "src/mongo/db/auth/user_cache_invalidator_job.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "typeinfo for mongo::ServerParameter", 
        "object": "src/mongo/db/auth/user_cache_invalidator_job.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/auth/user_document_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/auth/user_document_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/auth/user_document_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/auth/user_document_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/auth/user_document_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/auth/user_document_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/user_document_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/user_document_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/auth/user_document_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/user_document_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/user_document_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/auth/user_document_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/auth/user_document_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator!=(mongo::Status const&) const", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/auth/user_document_parser_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/auth/user_management_commands_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/auth_helpers.cpp"
        ], 
        "symbol": "mongo::auth::createPasswordDigest(mongo::StringData const&, mongo::StringData const&)", 
        "object": "src/mongo/db/auth/user_management_commands_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/util/bson_extract.cpp"
        ], 
        "symbol": "mongo::bsonExtractTypedField(mongo::BSONObj const&, mongo::StringData const&, mongo::BSONType, mongo::BSONElement*)", 
        "object": "src/mongo/db/auth/user_management_commands_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/util/bson_extract.cpp"
        ], 
        "symbol": "mongo::bsonExtractBooleanFieldWithDefault(mongo::BSONObj const&, mongo::StringData const&, bool, bool*)", 
        "object": "src/mongo/db/auth/user_management_commands_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/auth/user_management_commands_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/user_management_commands_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/auth/user_management_commands_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/user_management_commands_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/util/bson_extract.cpp"
        ], 
        "symbol": "mongo::bsonExtractIntegerFieldWithDefault(mongo::BSONObj const&, mongo::StringData const&, long long, long long*)", 
        "object": "src/mongo/db/auth/user_management_commands_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/auth/user_management_commands_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/util/bson_extract.cpp"
        ], 
        "symbol": "mongo::bsonExtractStringField(mongo::BSONObj const&, mongo::StringData const&, std::string*)", 
        "object": "src/mongo/db/auth/user_management_commands_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/auth/user_management_commands_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/auth/user_management_commands_parser.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/auth/user_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/auth/user_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/auth/user_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/auth/user_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/auth/user_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/auth/user_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/auth/user_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/auth/user_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/auth/user_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/auth/user_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/auth/user_set_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/auth/user_set_test.cpp"
    }
]