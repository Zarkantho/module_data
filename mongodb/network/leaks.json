[
    {
        "sources": [
            "src/mongo/util/util.cpp", 
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::operator<<(mongo::logger::Tee*)", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp", 
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::warnings", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::inShutdown()", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp", 
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp", 
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp", 
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::errnoWithDescription(int)", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/util/net/sock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/util/net/sock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_service.cpp", 
            "src/mongo/util/fail_point_service.cpp"
        ], 
        "symbol": "mongo::getGlobalFailPointRegistry()", 
        "object": "src/mongo/util/net/sock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/util/net/sock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_registry.cpp", 
            "src/mongo/util/fail_point_registry.cpp"
        ], 
        "symbol": "mongo::FailPointRegistry::getFailPoint(std::string const&) const", 
        "object": "src/mongo/util/net/sock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/util/net/sock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/util/net/sock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/util/net/sock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/util/net/sock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/util/net/sock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/util/net/sock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/util/net/sock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/util/net/sock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/util/net/sock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp", 
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::setMode(mongo::FailPoint::Mode, unsigned int, mongo::BSONObj const&)", 
        "object": "src/mongo/util/net/sock_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp", 
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::operator<<(mongo::logger::Tee*)", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp", 
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::warnings", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::inShutdown()", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp", 
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp", 
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp", 
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::errnoWithDescription(int)", 
        "object": "src/mongo/util/net/listen.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::operator[](std::string const&) const", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp", 
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::setSources(mongo::optionenvironment::OptionSources)", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::get(std::string*) const", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp", 
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::absolute(boost::filesystem3::path const&, boost::filesystem3::path const&)", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::current_path(boost::system::error_code*)", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::requires(std::string const&)", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::count(std::string const&) const", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::addOptionChaining(std::string const&, std::string const&, mongo::optionenvironment::OptionType, std::string const&)", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::MsgAssertionException", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp", 
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::setImplicit(mongo::optionenvironment::Value)", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp", 
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/util/net/ssl_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::setThreadName(mongo::StringData)", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp", 
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastErrorHolder::reset(mongo::LastError*)", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp", 
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp", 
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::lastError", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::inShutdown()", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/counters.cpp"
        ], 
        "symbol": "mongo::networkCounter", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/counters.cpp"
        ], 
        "symbol": "mongo::NetworkCounter::hit(long long, long long)", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::dbexit(mongo::ExitCode, char const*)", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp", 
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/util/net/message_server_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/util/net/httpclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/util/net/httpclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/util/net/httpclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp", 
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::getcurns", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogstreamBuilder const&)", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp", 
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp", 
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::wait(unsigned int)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp", 
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::go()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_service.cpp", 
            "src/mongo/util/fail_point_service.cpp"
        ], 
        "symbol": "mongo::getGlobalFailPointRegistry()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp", 
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::~BackgroundJob()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp", 
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::SpinLock()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp", 
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::slowShouldFailOpenBlock()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp", 
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp", 
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::shouldFailCloseBlock()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp", 
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::~SpinLock()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_registry.cpp", 
            "src/mongo/util/fail_point_registry.cpp"
        ], 
        "symbol": "mongo::FailPointRegistry::addFailPoint(std::string const&, mongo::FailPoint*)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp", 
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp", 
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "typeinfo for mongo::BackgroundJob", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp", 
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::FailPoint()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp", 
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp", 
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::BackgroundJob(bool)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp", 
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp", 
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::errnoWithDescription(int)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp", 
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp", 
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp", 
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp", 
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::errnoWithDescription(int)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp", 
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::getcurns", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogstreamBuilder const&)", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/util/net/message_port.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp", 
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp", 
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::wait(unsigned int)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp", 
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::go()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_service.cpp", 
            "src/mongo/util/fail_point_service.cpp"
        ], 
        "symbol": "mongo::getGlobalFailPointRegistry()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp", 
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::~BackgroundJob()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp", 
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::SpinLock()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp", 
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::slowShouldFailOpenBlock()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp", 
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp", 
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::shouldFailCloseBlock()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/spin_lock.cpp", 
            "src/mongo/util/concurrency/spin_lock.cpp"
        ], 
        "symbol": "mongo::SpinLock::~SpinLock()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_registry.cpp", 
            "src/mongo/util/fail_point_registry.cpp"
        ], 
        "symbol": "mongo::FailPointRegistry::addFailPoint(std::string const&, mongo::FailPoint*)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp", 
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp", 
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "typeinfo for mongo::BackgroundJob", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp", 
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::FailPoint()", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp", 
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp", 
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::BackgroundJob(bool)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp", 
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp", 
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::errnoWithDescription(int)", 
        "object": "src/mongo/util/net/sock.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/util/net/httpclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/util/net/httpclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/util/net/httpclient.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp", 
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp", 
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp", 
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp", 
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::errnoWithDescription(int)", 
        "object": "src/mongo/util/net/ssl_manager.cpp"
    }
]