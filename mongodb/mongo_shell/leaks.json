[
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::path_traits::dispatch(boost::filesystem3::directory_entry const&, std::string&, std::codecvt<wchar_t, char, __mbstate_t> const&)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_finish", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_init", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::File()", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::open(char const*, bool, bool)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::dir_itr_close(void*&, void*&)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::write(unsigned long long, char const*, unsigned int)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::directory_iterator_construct(boost::filesystem3::directory_iterator&, boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::status(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::directory_iterator_increment(boost::filesystem3::directory_iterator&, boost::system::error_code*)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::~File()", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::wchar_t_codecvt_facet()", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::is_open() const", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::file_size(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::remove_all(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_append", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::create_directories(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::getHostName()", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::read(unsigned long long, char*, unsigned int)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::filename() const", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::current_path(boost::system::error_code*)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::errnoWithDescription(int)", 
        "object": "src/mongo/shell/shell_utils_extended.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::setDefault(mongo::optionenvironment::Value)", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::get(std::vector<std::string, std::allocator<std::string> >*) const", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::hidden()", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::MsgAssertionException", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::setImplicit(mongo::optionenvironment::Value)", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::operator[](std::string const&) const", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::get(std::string*) const", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::positional(int, int)", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::count(std::string const&) const", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::enableIPv6(bool)", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::addOptionChaining(std::string const&, std::string const&, mongo::optionenvironment::OptionType, std::string const&)", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::helpString() const", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version.cpp"
        ], 
        "symbol": "mongo::versionString", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/ssl_options.cpp"
        ], 
        "symbol": "mongo::addSSLClientOptions(mongo::optionenvironment::OptionSection*)", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/ssl_options.cpp"
        ], 
        "symbol": "mongo::storeSSLClientOptions(mongo::optionenvironment::Environment const&)", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/shell/shell_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/processinfo_darwin.cpp"
        ], 
        "symbol": "mongo::ProcessInfo::supported()", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::appendInfo(mongo::BSONObjBuilder&) const", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::parse(std::string const&, std::string&)", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::status(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::get(std::string const&, bool)", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBClientWithCommands", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/processinfo_darwin.cpp"
        ], 
        "symbol": "mongo::ProcessInfo::~ProcessInfo()", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/shell/mongo-server.cpp"
        ], 
        "symbol": "mongo::JSFiles::replsetbridge", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/process_id.cpp"
        ], 
        "symbol": "mongo::ProcessId::getCurrent()", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version_reporting.cpp"
        ], 
        "symbol": "mongo::appendBuildInfo(mongo::BSONObjBuilder&)", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/shell/mongo-server.cpp"
        ], 
        "symbol": "mongo::JSFiles::servers", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBClientBase", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/shell/mongo-server.cpp"
        ], 
        "symbol": "mongo::JSFiles::shardingtest", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/scripting/engine_v8.cpp"
        ], 
        "symbol": "mongo::ScriptEngine::getInterpreterVersionString()", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::connect(std::string&, double) const", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/processinfo_darwin.cpp"
        ], 
        "symbol": "mongo::ProcessInfo::getVirtualMemorySize()", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/processinfo_darwin.cpp"
        ], 
        "symbol": "mongo::ProcessInfo::getResidentSize()", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/processinfo_darwin.cpp"
        ], 
        "symbol": "mongo::ProcessInfo::ProcessInfo(mongo::ProcessId)", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/shell/mongo-server.cpp"
        ], 
        "symbol": "mongo::JSFiles::replsettest", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/shell/mongo-server.cpp"
        ], 
        "symbol": "mongo::JSFiles::servers_misc", 
        "object": "src/mongo/shell/shell_utils.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptionsParsed", 
        "object": "src/mongo/shell/shell_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::validate()", 
        "object": "src/mongo/shell/shell_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/shell/shell_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/shell/shell_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/shell/shell_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/shell/shell_options_init.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::path_traits::dispatch(boost::filesystem3::directory_entry const&, std::string&, std::codecvt<wchar_t, char, __mbstate_t> const&)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/process_id.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::ProcessId)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/server.cpp", 
            "src/mongo/client/clientAndShell.cpp"
        ], 
        "symbol": "mongo::dbexitCalled", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::dir_itr_close(void*&, void*&)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::getcurns", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::directory_iterator_construct(boost::filesystem3::directory_iterator&, boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogstreamBuilder const&)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::status(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::directory_iterator_increment(boost::filesystem3::directory_iterator&, boost::system::error_code*)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/clientAndShell.cpp"
        ], 
        "symbol": "mongo::shell_utils::mongoProgramOutputMutex", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::current_path(boost::system::error_code*)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::initial_path(boost::system::error_code*)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::operator/=(boost::filesystem3::path const&)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::create_directory(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::remove_all(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::copy_file(boost::filesystem3::path const&, boost::filesystem3::path const&, boost::filesystem3::copy_option::enum_type, boost::system::error_code*)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/process_id.cpp"
        ], 
        "symbol": "mongo::ProcessId::toString() const", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/process_id.cpp"
        ], 
        "symbol": "mongo::ProcessId::asLongLong() const", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::filename() const", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::wchar_t_codecvt_facet()", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::errnoWithDescription(int)", 
        "object": "src/mongo/shell/shell_utils_launcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/console.cpp"
        ], 
        "symbol": "mongo::Console::Console()", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/server.cpp", 
            "src/mongo/client/clientAndShell.cpp"
        ], 
        "symbol": "mongo::dbexitCalled", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/sasl_client_authenticate.cpp"
        ], 
        "symbol": "mongo::saslCommandUserFieldName", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/sasl_client_authenticate.cpp"
        ], 
        "symbol": "mongo::saslCommandPasswordFieldName", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "mongo::StartupTest::StartupTest()", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::File()", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::open(char const*, bool, bool)", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/stacktrace.cpp"
        ], 
        "symbol": "mongo::printStackTrace(std::ostream&)", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/scripting/engine.cpp"
        ], 
        "symbol": "mongo::ScriptEngine::_connectCallback", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "typeinfo for mongo::StartupTest", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/initializer.cpp"
        ], 
        "symbol": "mongo::runGlobalInitializersOrDie(int, char const* const*, char const* const*)", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::isShell", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/clientAndShell.cpp"
        ], 
        "symbol": "mongo::shell_utils::mongoProgramOutputMutex", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::rawOut(mongo::StringData const&)", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/message_event_utf8_encoder.cpp"
        ], 
        "symbol": "vtable for mongo::logger::MessageEventUnadornedEncoder", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/scripting/engine.cpp"
        ], 
        "symbol": "mongo::Scope::invoke(char const*, mongo::BSONObj const*, mongo::BSONObj const*, int)", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/message_log_domain.cpp"
        ], 
        "symbol": "mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>::attachAppender(std::auto_ptr<mongo::logger::Appender<mongo::logger::MessageEventEphemeral> >)", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/scripting/engine.cpp"
        ], 
        "symbol": "mongo::globalScriptEngine", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file.cpp"
        ], 
        "symbol": "mongo::File::~File()", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::~RE()", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/console.cpp"
        ], 
        "symbol": "mongo::Console::out()", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::no_arg", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version.cpp"
        ], 
        "symbol": "mongo::versionString", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::Init(std::string const&, pcrecpp::RE_Options const*)", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/log_manager.cpp"
        ], 
        "symbol": "mongo::logger::LogManager::getNamedDomain(std::string const&)", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp", 
            "src/mongo/client/clientOnly.cpp"
        ], 
        "symbol": "mongo::StartupTest::~StartupTest()", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/password.cpp"
        ], 
        "symbol": "mongo::askPassword()", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/scripting/engine_v8.cpp"
        ], 
        "symbol": "mongo::ScriptEngine::setup()", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/startup_test.cpp"
        ], 
        "symbol": "mongo::StartupTest::runTests()", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::errnoWithDescription(int)", 
        "object": "src/mongo/shell/dbshell.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/shell/shell_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::isEmpty() const", 
        "object": "src/mongo/shell/shell_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/shell/shell_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::getAllOptions(std::vector<mongo::optionenvironment::OptionDescription, std::allocator<mongo::optionenvironment::OptionDescription> >*) const", 
        "object": "src/mongo/shell/shell_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/shell/shell_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/shell/shell_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/shell/shell_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/shell/shell_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/shell/shell_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/shell/shell_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/shell/shell_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/shell/shell_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/shell/shell_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/shell/shell_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::equal(mongo::optionenvironment::Value const&) const", 
        "object": "src/mongo/shell/shell_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/shell/shell_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/shell/shell_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/shell/shell_options_test.cpp"
    }
]