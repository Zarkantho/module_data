[
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::Listener(std::string const&, std::string const&, int, bool)", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/stacktrace.cpp"
        ], 
        "symbol": "mongo::printStackTrace(std::ostream&)", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/message_port.cpp"
        ], 
        "symbol": "mongo::MessagingPort::recv(mongo::Message&)", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/initializer.cpp"
        ], 
        "symbol": "mongo::runGlobalInitializersOrDie(int, char const* const*, char const* const*)", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::rawOut(mongo::StringData const&)", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/message_port.cpp"
        ], 
        "symbol": "mongo::MessagingPort::shutdown()", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::connect(mongo::HostAndPort const&, std::string&)", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::accepted(boost::shared_ptr<mongo::Socket>, long long)", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/message_port.cpp"
        ], 
        "symbol": "mongo::MessagingPort::say(mongo::Message&, int)", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::~Listener()", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::SockAddr::toString(bool) const", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::ListeningSockets::get()", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientConnection", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::initAndListen()", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::_numConnections", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::setupSockets()", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "typeinfo for mongo::Listener", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/bson_validate.cpp"
        ], 
        "symbol": "mongo::validateBSON(char const*, unsigned long long)", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/message_port.cpp"
        ], 
        "symbol": "mongo::MessagingPort::call(mongo::Message&, mongo::Message&)", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/tools/bridge.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/text.cpp"
        ], 
        "symbol": "mongo::isValidUTF8(char const*)", 
        "object": "src/mongo/tools/bsondump.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/tools/bsondump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/tools/bsondump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/tools/bsondump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::jsonString(mongo::JsonStringFormat, int) const", 
        "object": "src/mongo/tools/bsondump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/bsondump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/bson_validate.cpp"
        ], 
        "symbol": "mongo::validateBSON(char const*, unsigned long long)", 
        "object": "src/mongo/tools/bsondump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/tools/bsondump.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/tools/bsondump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/tools/bsondump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/bsondump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/tools/bsondump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::setSources(mongo::optionenvironment::OptionSources)", 
        "object": "src/mongo/tools/bsondump_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::positional(int, int)", 
        "object": "src/mongo/tools/bsondump_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::count(std::string const&) const", 
        "object": "src/mongo/tools/bsondump_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::hidden()", 
        "object": "src/mongo/tools/bsondump_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::setDefault(mongo::optionenvironment::Value)", 
        "object": "src/mongo/tools/bsondump_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/bsondump_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::addOptionChaining(std::string const&, std::string const&, mongo::optionenvironment::OptionType, std::string const&)", 
        "object": "src/mongo/tools/bsondump_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::helpString() const", 
        "object": "src/mongo/tools/bsondump_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptionsParsed", 
        "object": "src/mongo/tools/bsondump_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::validate()", 
        "object": "src/mongo/tools/bsondump_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/tools/bsondump_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/bsondump_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/tools/bsondump_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/tools/bsondump_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/tools/bsondump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::isEmpty() const", 
        "object": "src/mongo/tools/bsondump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/tools/bsondump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::getAllOptions(std::vector<mongo::optionenvironment::OptionDescription, std::allocator<mongo::optionenvironment::OptionDescription> >*) const", 
        "object": "src/mongo/tools/bsondump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/tools/bsondump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/tools/bsondump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/tools/bsondump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/tools/bsondump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/bsondump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/tools/bsondump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/tools/bsondump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/tools/bsondump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/tools/bsondump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/tools/bsondump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::equal(mongo::optionenvironment::Value const&) const", 
        "object": "src/mongo/tools/bsondump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/tools/bsondump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/tools/bsondump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/bsondump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/extent_manager.cpp"
        ], 
        "symbol": "mongo::ExtentManager::getExtent(mongo::DiskLoc const&, bool) const", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::simpleCommand(std::string const&, mongo::BSONObj*, std::string const&)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::jsonString(mongo::JsonStringFormat, int) const", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(std::string const&)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/progress_meter.cpp"
        ], 
        "symbol": "mongo::ProgressMeter::reset(unsigned long long, int, int)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::Record::_accessing() const", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::ext() const", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/progress_meter.cpp"
        ], 
        "symbol": "mongo::ProgressMeter::hit(int)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/catalog/namespace_index.cpp"
        ], 
        "symbol": "mongo::NamespaceIndex::getNamespaces(std::list<std::string, std::allocator<std::string> >&, bool) const", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::LogIndentLevel::~LogIndentLevel()", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::valid() const", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::operator/=(boost::filesystem3::path const&)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::snapshot()", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::LogIndentLevel::LogIndentLevel()", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::getFieldNames(std::set<std::string, std::less<std::string>, std::allocator<std::string> >&) const", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::errnoWithPrefix(char const*)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::logContext(char const*)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/catalog/namespace_index.cpp"
        ], 
        "symbol": "mongo::NamespaceIndex::details(mongo::StringData const&)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::create_directories(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::m_erase_redundant_separator(unsigned long)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::rec() const", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::m_append_separator_if_needed()", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBClientConnection", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::wchar_t_codecvt_facet()", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/extent_manager.cpp"
        ], 
        "symbol": "mongo::ExtentManager::getNextExtent(mongo::Extent*) const", 
        "object": "src/mongo/tools/dump.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::dateToISOStringUTC(mongo::Date_t)", 
        "object": "src/mongo/tools/export.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/tools/export.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::jsonString(mongo::JsonStringFormat, int) const", 
        "object": "src/mongo/tools/export.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::snapshot()", 
        "object": "src/mongo/tools/export.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/tools/export.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/tools/export.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(std::string const&)", 
        "object": "src/mongo/tools/export.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/tools/export.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/export.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::jsonString(mongo::JsonStringFormat, bool, int) const", 
        "object": "src/mongo/tools/export.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/tools/export.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/export.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/tools/export.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::Query(std::string const&)", 
        "object": "src/mongo/tools/export.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/tools/export.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/tools/export.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::create_directories(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/tools/export.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/tools/export.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/gridfs.cpp"
        ], 
        "symbol": "mongo::GridFS::findFile(std::string const&) const", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::QuoteMeta(pcrecpp::StringPiece const&)", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastError(bool, bool, int, int)", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/gridfs.cpp"
        ], 
        "symbol": "mongo::GridFS::~GridFS()", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/gridfs.cpp"
        ], 
        "symbol": "mongo::GridFS::storeFile(std::string const&, std::string const&, std::string const&)", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::NE", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/gridfs.cpp"
        ], 
        "symbol": "mongo::GridFS::list(mongo::BSONObj) const", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/gridfs.cpp"
        ], 
        "symbol": "mongo::GridFile::write(std::string const&) const", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/gridfs.cpp"
        ], 
        "symbol": "mongo::GridFS::GridFS(mongo::DBClientBase&, std::string const&, std::string const&)", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/gridfs.cpp"
        ], 
        "symbol": "mongo::GridFS::removeFile(std::string const&)", 
        "object": "src/mongo/tools/files.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/progress_meter.cpp"
        ], 
        "symbol": "mongo::ProgressMeter::reset(unsigned long long, int, int)", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastError(bool, bool, int, int)", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::status(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/progress_meter.cpp"
        ], 
        "symbol": "mongo::ProgressMeter::hit(int)", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::appendAsNumber(mongo::StringData const&, std::string const&)", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/text.cpp"
        ], 
        "symbol": "mongo::isValidUTF8(char const*)", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::file_size(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::UserException", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::filename() const", 
        "object": "src/mongo/tools/import.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::operator[](std::string const&) const", 
        "object": "src/mongo/tools/mongobridge_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/tools/mongobridge_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::get(std::string*) const", 
        "object": "src/mongo/tools/mongobridge_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/tools/mongobridge_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/mongobridge_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/tools/mongobridge_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::count(std::string const&) const", 
        "object": "src/mongo/tools/mongobridge_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::setDefault(mongo::optionenvironment::Value)", 
        "object": "src/mongo/tools/mongobridge_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/mongobridge_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::addOptionChaining(std::string const&, std::string const&, mongo::optionenvironment::OptionType, std::string const&)", 
        "object": "src/mongo/tools/mongobridge_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/tools/mongobridge_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::get(int*) const", 
        "object": "src/mongo/tools/mongobridge_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/tools/mongobridge_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::MsgAssertionException", 
        "object": "src/mongo/tools/mongobridge_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::helpString() const", 
        "object": "src/mongo/tools/mongobridge_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/tools/mongobridge_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/tools/mongobridge_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/tools/mongobridge_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptionsParsed", 
        "object": "src/mongo/tools/mongobridge_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::validate()", 
        "object": "src/mongo/tools/mongobridge_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/tools/mongobridge_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/mongobridge_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/tools/mongobridge_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/tools/mongobridge_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/tools/mongobridge_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::isEmpty() const", 
        "object": "src/mongo/tools/mongobridge_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/tools/mongobridge_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::getAllOptions(std::vector<mongo::optionenvironment::OptionDescription, std::allocator<mongo::optionenvironment::OptionDescription> >*) const", 
        "object": "src/mongo/tools/mongobridge_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/tools/mongobridge_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/tools/mongobridge_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/tools/mongobridge_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/tools/mongobridge_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/mongobridge_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/tools/mongobridge_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/tools/mongobridge_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/tools/mongobridge_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/tools/mongobridge_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/tools/mongobridge_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::equal(mongo::optionenvironment::Value const&) const", 
        "object": "src/mongo/tools/mongobridge_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/tools/mongobridge_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/tools/mongobridge_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/mongobridge_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/tools/mongodump_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::requires(std::string const&)", 
        "object": "src/mongo/tools/mongodump_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::format(std::string const&, std::string const&)", 
        "object": "src/mongo/tools/mongodump_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::count(std::string const&) const", 
        "object": "src/mongo/tools/mongodump_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::hidden()", 
        "object": "src/mongo/tools/mongodump_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::setDefault(mongo::optionenvironment::Value)", 
        "object": "src/mongo/tools/mongodump_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/mongodump_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::addOptionChaining(std::string const&, std::string const&, mongo::optionenvironment::OptionType, std::string const&)", 
        "object": "src/mongo/tools/mongodump_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::helpString() const", 
        "object": "src/mongo/tools/mongodump_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptionsParsed", 
        "object": "src/mongo/tools/mongodump_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::validate()", 
        "object": "src/mongo/tools/mongodump_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/tools/mongodump_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/mongodump_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/tools/mongodump_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/tools/mongodump_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/tools/mongodump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::isEmpty() const", 
        "object": "src/mongo/tools/mongodump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/tools/mongodump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::getAllOptions(std::vector<mongo::optionenvironment::OptionDescription, std::allocator<mongo::optionenvironment::OptionDescription> >*) const", 
        "object": "src/mongo/tools/mongodump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/tools/mongodump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/tools/mongodump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/tools/mongodump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/tools/mongodump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/mongodump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/tools/mongodump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/tools/mongodump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/tools/mongodump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/tools/mongodump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/tools/mongodump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::equal(mongo::optionenvironment::Value const&) const", 
        "object": "src/mongo/tools/mongodump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/tools/mongodump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/tools/mongodump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/mongodump_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::operator[](std::string const&) const", 
        "object": "src/mongo/tools/mongoexport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::get(bool*) const", 
        "object": "src/mongo/tools/mongoexport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/tools/mongoexport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::helpString() const", 
        "object": "src/mongo/tools/mongoexport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/tools/mongoexport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/tools/mongoexport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::count(std::string const&) const", 
        "object": "src/mongo/tools/mongoexport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::setDefault(mongo::optionenvironment::Value)", 
        "object": "src/mongo/tools/mongoexport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/mongoexport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::addOptionChaining(std::string const&, std::string const&, mongo::optionenvironment::OptionType, std::string const&)", 
        "object": "src/mongo/tools/mongoexport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/tools/mongoexport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/tools/mongoexport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::MsgAssertionException", 
        "object": "src/mongo/tools/mongoexport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/mongoexport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/tools/mongoexport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/tools/mongoexport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptionsParsed", 
        "object": "src/mongo/tools/mongoexport_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::validate()", 
        "object": "src/mongo/tools/mongoexport_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/tools/mongoexport_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/mongoexport_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/tools/mongoexport_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/tools/mongoexport_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/tools/mongoexport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::isEmpty() const", 
        "object": "src/mongo/tools/mongoexport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/tools/mongoexport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::getAllOptions(std::vector<mongo::optionenvironment::OptionDescription, std::allocator<mongo::optionenvironment::OptionDescription> >*) const", 
        "object": "src/mongo/tools/mongoexport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/tools/mongoexport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/tools/mongoexport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/tools/mongoexport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/tools/mongoexport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/mongoexport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/tools/mongoexport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/tools/mongoexport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/tools/mongoexport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/tools/mongoexport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/tools/mongoexport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::equal(mongo::optionenvironment::Value const&) const", 
        "object": "src/mongo/tools/mongoexport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/tools/mongoexport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/tools/mongoexport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/mongoexport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::setSources(mongo::optionenvironment::OptionSources)", 
        "object": "src/mongo/tools/mongofiles_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::count(std::string const&) const", 
        "object": "src/mongo/tools/mongofiles_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::hidden()", 
        "object": "src/mongo/tools/mongofiles_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/mongofiles_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::addOptionChaining(std::string const&, std::string const&, mongo::optionenvironment::OptionType, std::string const&)", 
        "object": "src/mongo/tools/mongofiles_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::helpString() const", 
        "object": "src/mongo/tools/mongofiles_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::positional(int, int)", 
        "object": "src/mongo/tools/mongofiles_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptionsParsed", 
        "object": "src/mongo/tools/mongofiles_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::validate()", 
        "object": "src/mongo/tools/mongofiles_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/tools/mongofiles_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/mongofiles_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/tools/mongofiles_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/tools/mongofiles_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/tools/mongofiles_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::isEmpty() const", 
        "object": "src/mongo/tools/mongofiles_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/tools/mongofiles_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/tools/mongofiles_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/tools/mongofiles_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/tools/mongofiles_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/tools/mongofiles_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/mongofiles_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/tools/mongofiles_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/tools/mongofiles_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/tools/mongofiles_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/tools/mongofiles_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/tools/mongofiles_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::getAllOptions(std::vector<mongo::optionenvironment::OptionDescription, std::allocator<mongo::optionenvironment::OptionDescription> >*) const", 
        "object": "src/mongo/tools/mongofiles_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::equal(mongo::optionenvironment::Value const&) const", 
        "object": "src/mongo/tools/mongofiles_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/tools/mongofiles_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/tools/mongofiles_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/mongofiles_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/text.cpp"
        ], 
        "symbol": "mongo::StringSplitter::split(std::vector<std::string, std::allocator<std::string> >&)", 
        "object": "src/mongo/tools/mongoimport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::count(std::string const&) const", 
        "object": "src/mongo/tools/mongoimport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::hidden()", 
        "object": "src/mongo/tools/mongoimport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/mongoimport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::addOptionChaining(std::string const&, std::string const&, mongo::optionenvironment::OptionType, std::string const&)", 
        "object": "src/mongo/tools/mongoimport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::helpString() const", 
        "object": "src/mongo/tools/mongoimport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::positional(int, int)", 
        "object": "src/mongo/tools/mongoimport_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptionsParsed", 
        "object": "src/mongo/tools/mongoimport_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::validate()", 
        "object": "src/mongo/tools/mongoimport_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/tools/mongoimport_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/mongoimport_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/tools/mongoimport_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/tools/mongoimport_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/tools/mongoimport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::isEmpty() const", 
        "object": "src/mongo/tools/mongoimport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/tools/mongoimport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::getAllOptions(std::vector<mongo::optionenvironment::OptionDescription, std::allocator<mongo::optionenvironment::OptionDescription> >*) const", 
        "object": "src/mongo/tools/mongoimport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/tools/mongoimport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/tools/mongoimport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/tools/mongoimport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/tools/mongoimport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/mongoimport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/tools/mongoimport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/tools/mongoimport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/tools/mongoimport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/tools/mongoimport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/tools/mongoimport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::equal(mongo::optionenvironment::Value const&) const", 
        "object": "src/mongo/tools/mongoimport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/tools/mongoimport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/tools/mongoimport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/mongoimport_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/tools/mongooplog_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::count(std::string const&) const", 
        "object": "src/mongo/tools/mongooplog_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::setDefault(mongo::optionenvironment::Value)", 
        "object": "src/mongo/tools/mongooplog_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/mongooplog_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::addOptionChaining(std::string const&, std::string const&, mongo::optionenvironment::OptionType, std::string const&)", 
        "object": "src/mongo/tools/mongooplog_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::helpString() const", 
        "object": "src/mongo/tools/mongooplog_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptionsParsed", 
        "object": "src/mongo/tools/mongooplog_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::validate()", 
        "object": "src/mongo/tools/mongooplog_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/tools/mongooplog_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/mongooplog_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/tools/mongooplog_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/tools/mongooplog_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/tools/mongooplog_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::isEmpty() const", 
        "object": "src/mongo/tools/mongooplog_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/tools/mongooplog_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::getAllOptions(std::vector<mongo::optionenvironment::OptionDescription, std::allocator<mongo::optionenvironment::OptionDescription> >*) const", 
        "object": "src/mongo/tools/mongooplog_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/tools/mongooplog_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/tools/mongooplog_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/tools/mongooplog_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/tools/mongooplog_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/mongooplog_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/tools/mongooplog_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/tools/mongooplog_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/tools/mongooplog_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/tools/mongooplog_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/tools/mongooplog_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::equal(mongo::optionenvironment::Value const&) const", 
        "object": "src/mongo/tools/mongooplog_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/tools/mongooplog_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/tools/mongooplog_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/mongooplog_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::count(std::string const&) const", 
        "object": "src/mongo/tools/mongorestore_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::hidden()", 
        "object": "src/mongo/tools/mongorestore_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::setDefault(mongo::optionenvironment::Value)", 
        "object": "src/mongo/tools/mongorestore_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/mongorestore_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::addOptionChaining(std::string const&, std::string const&, mongo::optionenvironment::OptionType, std::string const&)", 
        "object": "src/mongo/tools/mongorestore_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::helpString() const", 
        "object": "src/mongo/tools/mongorestore_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::positional(int, int)", 
        "object": "src/mongo/tools/mongorestore_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptionsParsed", 
        "object": "src/mongo/tools/mongorestore_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::validate()", 
        "object": "src/mongo/tools/mongorestore_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/tools/mongorestore_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/mongorestore_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/tools/mongorestore_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/tools/mongorestore_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/tools/mongorestore_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::isEmpty() const", 
        "object": "src/mongo/tools/mongorestore_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/tools/mongorestore_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::getAllOptions(std::vector<mongo::optionenvironment::OptionDescription, std::allocator<mongo::optionenvironment::OptionDescription> >*) const", 
        "object": "src/mongo/tools/mongorestore_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/tools/mongorestore_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/tools/mongorestore_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/tools/mongorestore_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/tools/mongorestore_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/mongorestore_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/tools/mongorestore_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/tools/mongorestore_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/tools/mongorestore_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/tools/mongorestore_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/tools/mongorestore_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::equal(mongo::optionenvironment::Value const&) const", 
        "object": "src/mongo/tools/mongorestore_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/tools/mongorestore_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/tools/mongorestore_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/mongorestore_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/tools/mongostat_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::setSources(mongo::optionenvironment::OptionSources)", 
        "object": "src/mongo/tools/mongostat_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::positional(int, int)", 
        "object": "src/mongo/tools/mongostat_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::count(std::string const&) const", 
        "object": "src/mongo/tools/mongostat_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::hidden()", 
        "object": "src/mongo/tools/mongostat_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::setDefault(mongo::optionenvironment::Value)", 
        "object": "src/mongo/tools/mongostat_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/mongostat_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::addOptionChaining(std::string const&, std::string const&, mongo::optionenvironment::OptionType, std::string const&)", 
        "object": "src/mongo/tools/mongostat_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::helpString() const", 
        "object": "src/mongo/tools/mongostat_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptionsParsed", 
        "object": "src/mongo/tools/mongostat_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::validate()", 
        "object": "src/mongo/tools/mongostat_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/tools/mongostat_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/mongostat_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/tools/mongostat_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/tools/mongostat_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/tools/mongostat_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::isEmpty() const", 
        "object": "src/mongo/tools/mongostat_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/tools/mongostat_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::getAllOptions(std::vector<mongo::optionenvironment::OptionDescription, std::allocator<mongo::optionenvironment::OptionDescription> >*) const", 
        "object": "src/mongo/tools/mongostat_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/tools/mongostat_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/tools/mongostat_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/tools/mongostat_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/tools/mongostat_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/mongostat_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/tools/mongostat_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/tools/mongostat_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/tools/mongostat_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/tools/mongostat_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/tools/mongostat_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::equal(mongo::optionenvironment::Value const&) const", 
        "object": "src/mongo/tools/mongostat_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/tools/mongostat_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/tools/mongostat_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/mongostat_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::setSources(mongo::optionenvironment::OptionSources)", 
        "object": "src/mongo/tools/mongotop_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::positional(int, int)", 
        "object": "src/mongo/tools/mongotop_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::count(std::string const&) const", 
        "object": "src/mongo/tools/mongotop_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::hidden()", 
        "object": "src/mongo/tools/mongotop_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/mongotop_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::addOptionChaining(std::string const&, std::string const&, mongo::optionenvironment::OptionType, std::string const&)", 
        "object": "src/mongo/tools/mongotop_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::helpString() const", 
        "object": "src/mongo/tools/mongotop_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptionsParsed", 
        "object": "src/mongo/tools/mongotop_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::validate()", 
        "object": "src/mongo/tools/mongotop_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/tools/mongotop_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptions", 
        "object": "src/mongo/tools/mongotop_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/tools/mongotop_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/tools/mongotop_options_init.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/tools/mongotop_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::isEmpty() const", 
        "object": "src/mongo/tools/mongotop_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/tools/mongotop_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::getAllOptions(std::vector<mongo::optionenvironment::OptionDescription, std::allocator<mongo::optionenvironment::OptionDescription> >*) const", 
        "object": "src/mongo/tools/mongotop_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/tools/mongotop_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/tools/mongotop_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/tools/mongotop_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/tools/mongotop_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/mongotop_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/tools/mongotop_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/tools/mongotop_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/tools/mongotop_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/tools/mongotop_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/tools/mongotop_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::equal(mongo::optionenvironment::Value const&) const", 
        "object": "src/mongo/tools/mongotop_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/tools/mongotop_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/tools/mongotop_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/mongotop_options_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/tools/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/tools/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/tools/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/oplogreader.cpp"
        ], 
        "symbol": "mongo::OplogReader::OplogReader()", 
        "object": "src/mongo/tools/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/tools/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/tools/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/tools/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/oplogreader.cpp"
        ], 
        "symbol": "mongo::OplogReader::tailingQueryGTE(char const*, mongo::OpTime, mongo::BSONObj const*)", 
        "object": "src/mongo/tools/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/oplogreader.cpp"
        ], 
        "symbol": "mongo::OplogReader::connect(std::string const&)", 
        "object": "src/mongo/tools/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/tools/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/tools/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/tools/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/oplog.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/tools/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/tools/oplog.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/tools/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::time_t_to_String_short(long)", 
        "object": "src/mongo/tools/oplog.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/tools/oplog.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::path_traits::dispatch(boost::filesystem3::directory_entry const&, std::string&, std::codecvt<wchar_t, char, __mbstate_t> const&)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::simpleCommand(std::string const&, mongo::BSONObj*, std::string const&)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::dir_itr_close(void*&, void*&)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::jsonString(mongo::JsonStringFormat, int) const", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::directory_iterator_construct(boost::filesystem3::directory_iterator&, boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::filename() const", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/stringutils.cpp"
        ], 
        "symbol": "mongo::versionCmp(mongo::StringData, mongo::StringData)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::directory_iterator_increment(boost::filesystem3::directory_iterator&, boost::system::error_code*)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::Array() const", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::status(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::wchar_t_codecvt_facet()", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/matcher.cpp"
        ], 
        "symbol": "mongo::Matcher2::Matcher2(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::operator/=(boost::filesystem3::path const&)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::file_size(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::parent_path() const", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/matcher.cpp"
        ], 
        "symbol": "mongo::Matcher2::matches(mongo::BSONObj const&, mongo::MatchDetails*) const", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastError(std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/tools/restore.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::map(char const*, unsigned long long&, int)", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/initializer.cpp"
        ], 
        "symbol": "mongo::runGlobalInitializersOrDie(int, char const* const*, char const* const*)", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::close()", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "vtable for mongo::MemoryMappedFile", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap_posix.cpp"
        ], 
        "symbol": "mongo::MemoryMappedFile::MemoryMappedFile()", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::valid() const", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::LockMongoFilesShared::era", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::LockMongoFilesShared::mmmutex", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/message_port.cpp"
        ], 
        "symbol": "mongo::MessagingPort::say(mongo::Message&, int)", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientConnection", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::_numConnections", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/bson_validate.cpp"
        ], 
        "symbol": "mongo::validateBSON(char const*, unsigned long long)", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/message_port.cpp"
        ], 
        "symbol": "mongo::MessagingPort::call(mongo::Message&, mongo::Message&)", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::UserException::appendPrefix(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&) const", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/tools/sniffer.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "typeinfo for boost::detail::thread_data_base", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::simpleCommand(std::string const&, mongo::BSONObj*, std::string const&)", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/sasl_client_authenticate.cpp"
        ], 
        "symbol": "mongo::saslCommandUserFieldName", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/sasl_client_authenticate.cpp"
        ], 
        "symbol": "mongo::saslCommandPasswordFieldName", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(std::string const&)", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::parse(std::string const&, std::string&)", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_shard.cpp"
        ], 
        "symbol": "mongo::ShardType::ConfigNS", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::start_thread()", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::connect(mongo::HostAndPort const&, std::string&)", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::thread_data_base::~thread_data_base()", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientConnection", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::query(std::string const&, mongo::Query, int, int, mongo::BSONObj const*, int, int)", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::_checkConnection()", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::_numConnections", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::thread::~thread()", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/sasl_client_authenticate.cpp"
        ], 
        "symbol": "mongo::saslCommandUserDBFieldName", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "vtable for boost::detail::thread_data_base", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/text.cpp"
        ], 
        "symbol": "mongo::StringSplitter::next()", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/httpclient.cpp"
        ], 
        "symbol": "mongo::HttpClient::get(std::string const&, mongo::HttpClient::Result*)", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/sasl_client_authenticate.cpp"
        ], 
        "symbol": "mongo::saslCommandMechanismFieldName", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::auth(mongo::BSONObj const&)", 
        "object": "src/mongo/tools/stat.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::time_t_to_Struct(long, tm*, bool)", 
        "object": "src/mongo/tools/stat_util.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/tools/stat_util.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/tools/stat_util.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/stat_util.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/tools/stat_util.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/stat_util.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/tools/stat_util.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::DBClientReplicaSet::slaveConn()", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::simpleCommand(std::string const&, mongo::BSONObj*, std::string const&)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/sasl_client_authenticate.cpp"
        ], 
        "symbol": "mongo::saslCommandUserFieldName", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/sasl_client_authenticate.cpp"
        ], 
        "symbol": "mongo::saslCommandPasswordFieldName", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file_allocator.cpp"
        ], 
        "symbol": "mongo::FileAllocator::get()", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::shutdown()", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authz_manager_external_state_mock.cpp"
        ], 
        "symbol": "mongo::AuthzManagerExternalStateMock::AuthzManagerExternalStateMock()", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(std::string const&)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::parse(std::string const&, std::string&)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/progress_meter.cpp"
        ], 
        "symbol": "mongo::ProgressMeter::reset(unsigned long long, int, int)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastErrorHolder::get(bool)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/initializer.cpp"
        ], 
        "symbol": "mongo::runGlobalInitializersOrDie(int, char const* const*, char const* const*)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/progress_meter.cpp"
        ], 
        "symbol": "mongo::ProgressMeter::hit(int)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/matcher.cpp"
        ], 
        "symbol": "mongo::Matcher2::Matcher2(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::Query(char const*)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::lastError", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::file_size(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/file_allocator.cpp"
        ], 
        "symbol": "mongo::FileAllocator::start()", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::AuthorizationManager(mongo::AuthzManagerExternalState*)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::startup()", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/matcher.cpp"
        ], 
        "symbol": "mongo::Matcher2::matches(mongo::BSONObj const&, mongo::MatchDetails*) const", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::connect(std::string&, double) const", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::acquirePathLock(bool)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/sasl_client_authenticate.cpp"
        ], 
        "symbol": "mongo::saslCommandUserDBFieldName", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/bson_validate.cpp"
        ], 
        "symbol": "mongo::validateBSON(char const*, unsigned long long)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::setGlobalAuthorizationManager(mongo::AuthorizationManager*)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::dbexit(mongo::ExitCode, char const*)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/sasl_client_authenticate.cpp"
        ], 
        "symbol": "mongo::saslCommandMechanismFieldName", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::auth(mongo::BSONObj const&)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::errnoWithDescription(int)", 
        "object": "src/mongo/tools/tool.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/tools/tool_logger.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/console.cpp"
        ], 
        "symbol": "mongo::Console::out()", 
        "object": "src/mongo/tools/tool_logger.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/message_log_domain.cpp"
        ], 
        "symbol": "mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>::clearAppenders()", 
        "object": "src/mongo/tools/tool_logger.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/message_event_utf8_encoder.cpp"
        ], 
        "symbol": "vtable for mongo::logger::MessageEventUnadornedEncoder", 
        "object": "src/mongo/tools/tool_logger.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::setRawOutToStderr()", 
        "object": "src/mongo/tools/tool_logger.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/tools/tool_logger.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/message_log_domain.cpp"
        ], 
        "symbol": "mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>::attachAppender(std::auto_ptr<mongo::logger::Appender<mongo::logger::MessageEventEphemeral> >)", 
        "object": "src/mongo/tools/tool_logger.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/console.cpp"
        ], 
        "symbol": "mongo::Console::Console()", 
        "object": "src/mongo/tools/tool_logger.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/tools/tool_logger.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/tools/tool_logger.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/message_event_utf8_encoder.cpp"
        ], 
        "symbol": "vtable for mongo::logger::MessageEventDetailsEncoder", 
        "object": "src/mongo/tools/tool_logger.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/log_manager.cpp"
        ], 
        "symbol": "mongo::logger::LogManager::getNamedDomain(std::string const&)", 
        "object": "src/mongo/tools/tool_logger.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/tools/tool_logger.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::Arg::parse_string(char const*, int, void*)", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::hidden()", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::setDefault(mongo::optionenvironment::Value)", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::MsgAssertionException", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::status(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_description.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionDescription::setImplicit(mongo::optionenvironment::Value)", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::operator[](std::string const&) const", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::get(std::string*) const", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/environment.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Environment::count(std::string const&) const", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::enableIPv6(bool)", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/option_section.cpp"
        ], 
        "symbol": "mongo::optionenvironment::OptionSection::addOptionChaining(std::string const&, std::string const&, mongo::optionenvironment::OptionType, std::string const&)", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::no_arg", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/startup_options.cpp"
        ], 
        "symbol": "mongo::optionenvironment::startupOptionsParsed", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version.cpp"
        ], 
        "symbol": "mongo::versionString", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::Init(std::string const&, pcrecpp::RE_Options const*)", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/ssl_options.cpp"
        ], 
        "symbol": "mongo::addSSLClientOptions(mongo::optionenvironment::OptionSection*)", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/ssl_options.cpp"
        ], 
        "symbol": "mongo::storeSSLClientOptions(mongo::optionenvironment::Environment const&)", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/buildinfo.cpp"
        ], 
        "symbol": "mongo::gitVersion()", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/password.cpp"
        ], 
        "symbol": "mongo::askPassword()", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::~RE()", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/third_party/pcre-8.30/pcrecpp.cc"
        ], 
        "symbol": "pcrecpp::RE::Consume(pcrecpp::StringPiece*, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/options_parser/value.cpp"
        ], 
        "symbol": "mongo::optionenvironment::Value::get(int*) const", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/tools/tool_options.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::simpleCommand(std::string const&, mongo::BSONObj*, std::string const&)", 
        "object": "src/mongo/tools/top.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/tools/top.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/tools/top.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/tools/top.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/tools/top.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/tools/top.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/tools/top.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/tools/top.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/tools/top.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::terseCurrentTime(bool)", 
        "object": "src/mongo/tools/top.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/tools/top.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/tools/top.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/tools/top.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/tools/top.cpp"
    }
]