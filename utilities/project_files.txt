
## general notes:
## 1 - maybe we should describe third-party dependencies everywhere in here
## e.g. boost::whatever, v8, etc. but i'm really not sure
## 2 - i'd like to have an idea of what-locks-are-held-where, i'm secretly
## hoping that such a map could be 'neatly' overlaid on top of the
## 'module map'.
## 3 - similar to 2, i would like to know 'what runs in what thread'.
## 4 - for each set of files, why not tally lines of code? e.g.:
## grep ; <blah> | wc -l

####### base_utilites ######


# Use this in a class to explicitly disallow copying of the class. This can prevent bugs where you
# were accidentally copying a class that wasn't safe to copy.
src/mongo/base/disallow_copying.h

# 64 bit atomic counter

src/mongo/base/counter.h
src/mongo/base/counter_test.cpp (not built in anywhere)

# Vector and map that delete pointers to elements on destruction. "owning" the memory means you are
# responsible for deleting it.

src/mongo/base/owned_pointer_map.h
src/mongo/base/owned_pointer_map_test.cpp (not built in anywhere)
src/mongo/base/owned_pointer_vector.h
src/mongo/base/owned_pointer_vector_test.cpp (not built in anywhere)

# Status to return errors. StatusWith can return either an error or a value, so we don't have to
# use return parameters as arguments to the function.

src/mongo/base/status-inl.h
src/mongo/base/status.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/base/status.h
src/mongo/base/status_test.cpp (not built in anywhere)
src/mongo/base/status_with.h
src/mongo/base/error_codes.err
src/mongo/base/generate_error_codes.py

# Number to string conversion
## Why use these: is this somehow fast/safe? somehow JSON-aware?

src/mongo/base/parse_number.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/base/parse_number.h
src/mongo/base/parse_number_test.cpp (not built in anywhere)

# The StringData class is a wrapper around a char* that can be constructed from either std::string
# and a char* without copying the buffer. This is because a StringData doesn't free the buffer, so
# unlike std::string it doesn't need to have its own copy.
## Why: use for speed? is this similar to other classes people might be
## familiar with from elsewhere?
src/mongo/base/string_data-inl.h
src/mongo/base/string_data.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/base/string_data.h
src/mongo/base/string_data_test.cpp (not built in anywhere)


######## startup_initialization #########


# Check various expected startup conditions and log warnings to the user if necessary
## what uses these? everything? mongod/mongos only? what sort of checks?
src/mongo/db/startup_warnings.cpp (mongod and tools)
src/mongo/db/startup_warnings.h

# MONGO_INITIALIZER startup initialization framework.
## what should use these? any tool? mongod/mongos only?
src/mongo/base/global_initializer.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/base/global_initializer.h
src/mongo/base/global_initializer_registerer.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/base/global_initializer_registerer.h
src/mongo/base/init.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/base/init.h
src/mongo/base/initializer.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/base/initializer.h
src/mongo/base/initializer_context.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/base/initializer_context.h
src/mongo/base/initializer_dependency_graph.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/base/initializer_dependency_graph.h
src/mongo/base/initializer_dependency_graph_test.cpp (not built in anywhere)
src/mongo/base/initializer_function.h
src/mongo/base/initializer_test.cpp (not built in anywhere)
src/mongo/base/make_string_vector.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/base/make_string_vector.h

# Initialize the global state common to mongod and mongos, such as logging.

src/mongo/db/initialize_server_global_state.cpp (mongod and mongos)
src/mongo/db/initialize_server_global_state.h

# Options parser library (command line and config files)
## where do the options get stored / how can people grab options later?
## are they set once and immutable or can they be updated?
src/mongo/util/options_parser/constraints.cpp (mongod, mongos, and tools)
src/mongo/util/options_parser/constraints.h
src/mongo/util/options_parser/environment.cpp (mongod, mongos, and tools)
src/mongo/util/options_parser/environment.h
src/mongo/util/options_parser/environment_test.cpp (not built in anywhere)
src/mongo/util/options_parser/option_description.cpp (mongod, mongos, and tools)
src/mongo/util/options_parser/option_description.h
src/mongo/util/options_parser/option_section.cpp (mongod, mongos, and tools)
src/mongo/util/options_parser/option_section.h
src/mongo/util/options_parser/options_parser.cpp (mongod, mongos, and tools)
src/mongo/util/options_parser/options_parser.h
src/mongo/util/options_parser/options_parser_init.cpp (mongod, mongos, and tools)
src/mongo/util/options_parser/options_parser_test.cpp (not built in anywhere)
src/mongo/util/options_parser/startup_option_init.cpp (mongod, mongos, and tools)
src/mongo/util/options_parser/startup_option_init.h
src/mongo/util/options_parser/startup_options.cpp (mongod, mongos, and tools)
src/mongo/util/options_parser/startup_options.h
src/mongo/util/options_parser/value.cpp (mongod, mongos, and tools)
src/mongo/util/options_parser/value.h

# Command line utilities
## can you say a bit more? (give an example?)
src/mongo/util/cmdline_utils/censor_cmdline.cpp (mongod, mongos, and tools)
src/mongo/util/cmdline_utils/censor_cmdline.h
src/mongo/util/cmdline_utils/censor_cmdline_test.cpp (not built in anywhere)

# Only used to ask user for password at startup. TODO: move into cmdline_utils directory

src/mongo/util/password.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/password.h

# Command line options shared between mongod and mongos
## give an example (--hostname?)
src/mongo/db/server_options.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/db/server_options.h
src/mongo/db/server_options_helpers.cpp (mongod, mongos, and tools)
src/mongo/db/server_options_helpers.h
src/mongo/db/server_options_test.cpp (not built in anywhere)

# ServerParameter class used to add new parameters to the "setParameter" command. These can also be
# configured to be runtime modifiable.

src/mongo/db/server_parameters.cpp (mongod, mongos, and tools)
src/mongo/db/server_parameters.h
src/mongo/db/server_parameters_inline.h
src/mongo/db/server_parameters_test.cpp (not built in anywhere)


####### logging_system #######
## jesus, i hope this becomes a library :)
## can you say a bit about what kind of logging we do? is there any sort of
## ordering or atomicity (maybe per-call-to-log, or per log line?) our
## logging guarantees? 'log lines are emitted in-order with respect to each
## process thread?' maybe?)

# Logging system (NOTE: The first two actually aren't part of the "logger" library, but I see no
# reason why they should not be)

src/mongo/util/log.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/log.h

src/mongo/logger/appender.h
src/mongo/logger/console.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/logger/console.h
src/mongo/logger/console_appender.h
src/mongo/logger/encoder.h
src/mongo/logger/labeled_level.h
src/mongo/logger/log_domain-impl.h
src/mongo/logger/log_domain.h
src/mongo/logger/log_manager.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/logger/log_manager.h
src/mongo/logger/log_severity-inl.h
src/mongo/logger/log_severity.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/logger/log_severity.h
src/mongo/logger/log_test.cpp (not built in anywhere)
src/mongo/logger/logger.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/logger/logger.h
src/mongo/logger/logstream_builder.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/logger/logstream_builder.h
src/mongo/logger/message_event.h
src/mongo/logger/message_event_utf8_encoder.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/logger/message_event_utf8_encoder.h
src/mongo/logger/message_log_domain.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/logger/message_log_domain.h
src/mongo/logger/ramlog.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/logger/ramlog.h
src/mongo/logger/rotatable_file_appender.h
src/mongo/logger/rotatable_file_manager.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/logger/rotatable_file_manager.h
src/mongo/logger/rotatable_file_writer.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/logger/rotatable_file_writer.h
src/mongo/logger/rotatable_file_writer_test.cpp (not built in anywhere)
src/mongo/logger/syslog_appender.h
src/mongo/logger/tee.h

# Helpers to dump a bunch of information about the current process
## at crash time only? at any time? can you give an example of when
## this is used?
src/mongo/db/log_process_details.cpp (mongod, mongos, and tools)
src/mongo/db/log_process_details.h

# MONGO_INITIALIZERs to add extra information to the server logs.

src/mongo/db/server_extra_log_context.cpp (mongod and mongos)


####### bson #######


# BSON library
## is this library standalone? (lots of third party stuff might want to make
## use of BSON) - what does it depend on?
## why is some of this stuff in db/ ?
src/mongo/bson/bson-inl.h
src/mongo/bson/bson_builder_base.h
src/mongo/bson/bson_db.h
src/mongo/bson/bson_field.h
src/mongo/bson/bson_field_test.cpp (not built in anywhere)
src/mongo/bson/bson_obj_test.cpp (not built in anywhere)
src/mongo/bson/bson_validate.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/bson/bson_validate.h
src/mongo/bson/bson_validate_test.cpp (not built in anywhere)
src/mongo/bson/bsondemo/bsondemo.cpp (not built in anywhere)
src/mongo/bson/bsonelement.h
src/mongo/bson/bsonmisc.h
src/mongo/bson/bsonobj.h
src/mongo/bson/bsonobjbuilder.h
src/mongo/bson/bsonobjbuilder_test.cpp (not built in anywhere)
src/mongo/bson/bsonobjiterator.h
src/mongo/bson/bsontypes.h
src/mongo/bson/inline_decls.h
src/mongo/bson/oid.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/bson/oid.h
src/mongo/bson/optime.cpp (mongod, mongos, and tools)
src/mongo/bson/optime.h
src/mongo/bson/ordering.h
src/mongo/bson/util/atomic_int.h
src/mongo/bson/util/bson_extract.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/bson/util/bson_extract.h
src/mongo/bson/util/bson_extract_test.cpp (not built in anywhere)
src/mongo/bson/util/builder.h
src/mongo/bson/util/builder_test.cpp (not built in anywhere)
src/mongo/bson/util/misc.h
src/mongo/db/jsobj.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/db/jsobj.h
src/mongo/db/jsobjmanipulator.h
src/mongo/db/json.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/db/json.h

# Mutable BSON is built on top of the BSON library. It has a mutable, consistently sized vector of
# the changes that have been made to an object.
## is this part of libbson? does this depend on bson/* ?
src/mongo/bson/mutable/algorithm.h
src/mongo/bson/mutable/const_element-inl.h
src/mongo/bson/mutable/const_element.h
src/mongo/bson/mutable/damage_vector.h
src/mongo/bson/mutable/document-inl.h
src/mongo/bson/mutable/document.cpp (mongod, mongos, and tools)
src/mongo/bson/mutable/document.h
src/mongo/bson/mutable/element-inl.h
src/mongo/bson/mutable/element.cpp (mongod, mongos, and tools)
src/mongo/bson/mutable/element.h
src/mongo/bson/mutable/mutable_bson_algo_test.cpp (not built in anywhere)
src/mongo/bson/mutable/mutable_bson_test.cpp (not built in anywhere)
src/mongo/bson/mutable/mutable_bson_test_utils.cpp (not built in anywhere)
src/mongo/bson/mutable/mutable_bson_test_utils.h


####### network #######


# Network library
## can you say a few words about:
## - what this does
## - who uses it
## - how to use it?

src/mongo/util/net/listen.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/net/listen.h
src/mongo/util/net/hostandport.h
src/mongo/util/net/message.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/net/message.h
src/mongo/util/net/message_port.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/net/message_port.h
src/mongo/util/net/httpclient.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/net/httpclient.h
src/mongo/util/net/sock.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/net/sock.h
src/mongo/util/net/sock_test.cpp (not built in anywhere)
src/mongo/util/net/socket_poll.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/net/socket_poll.h
src/mongo/util/net/ssl_manager.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/net/ssl_manager.h
src/mongo/util/net/ssl_options.cpp (mongod, mongos, and tools)
src/mongo/util/net/ssl_options.h

# Top level (?) of handling incoming network connections on mongod and mongos. Inherits from
# Listener (listen.h).

src/mongo/util/net/message_server.h
src/mongo/util/net/message_server_port.cpp (mongod and mongos)


####### cpp_client_driver #######


# Stubs so that the client driver can build alone since our deps are screwed up. We have symbols
# that are required by shared code that are very internal to the server, so if we didn't have these
# files we'd either need to include the whole server (which we want to avoid) or the build wouldn't
# successfully link.

src/mongo/client/clientAndShell.cpp (only built into cppclientdriver)
src/mongo/client/clientOnly-private.h
src/mongo/client/clientOnly.cpp (only built into cppclientdriver)

# Stubs to initialize the client driver when it is used standalone. Calls MONGO_INITIALIZERs among
# other things. Not built into the server.

src/mongo/client/init.cpp (only built into cppclientdriver)
src/mongo/client/init.h

# The Core C++ Client Driver Library
## who uses these, and why? maybe this description should be broken up into
## some components, e.g. what exactly is a 'dbclient', a 'dbclientcursor'
## and a 'syncclusterconnection' ?
src/mongo/client/connpool.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/client/connpool.h
src/mongo/client/constants.h
src/mongo/client/dbclient.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/client/dbclient.h
src/mongo/client/dbclient_rs.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/client/dbclient_rs.h
src/mongo/client/dbclient_rs_test.cpp (not built in anywhere)
src/mongo/client/dbclientcursor.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/client/dbclientcursor.h
src/mongo/client/dbclientinterface.h
src/mongo/client/dbclientmockcursor.h
src/mongo/client/scoped_db_conn_test.cpp (not built in anywhere)
src/mongo/client/syncclusterconnection.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/client/syncclusterconnection.h

# Legacy wire protocol in the client driver
## what is the new equivalent, and where?
src/mongo/db/dbmessage.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/db/dbmessage.h

# Utilities for keeping track of the data needed for getLastError (part of legacy wire protocol).

src/mongo/db/lasterror.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/db/lasterror.h

# Examples of how to use the client driver that get built in the server

src/mongo/client/examples/authTest.cpp (only built into cppclientdriver)
src/mongo/client/examples/clientTest.cpp (only built into cppclientdriver)
src/mongo/client/examples/first.cpp (only built into cppclientdriver)
src/mongo/client/examples/httpClientTest.cpp (only built into cppclientdriver)
src/mongo/client/examples/rs.cpp (only built into cppclientdriver)
src/mongo/client/examples/second.cpp (only built into cppclientdriver)
src/mongo/client/examples/tutorial.cpp (only built into cppclientdriver)
src/mongo/client/examples/whereExample.cpp (only built into cppclientdriver)

# Old performance testing utility. Builds the "mongoperf" binary.

src/mongo/client/examples/mongoperf.cpp (tools)

# Macro hacks! Apparently we pollute the namespace with tons of crazy macros that cause problems
# for consumers of the client driver if we leave them in. I guess users don't like it when we
# redefine things like "malloc" and "verify" in their programs.

src/mongo/client/export_macros.h
src/mongo/client/undef_macros.h
src/mongo/client/redef_macros.h

# More fun macros! MONGO_likely and MONGO_unlikely as well as LOG_SOME, which only logs every once
# in a while. w00! Party!

src/mongo/server.h

# Gridfs wrapper around the client driver.

src/mongo/client/gridfs.cpp (cppclientdriver and tools)
src/mongo/client/gridfs.h

# Cursor that represents a connection to a bunch of shards. You would think that this only makes
# sense in mongos, but it turns out it's built into mongod for purposes of map reduce (the final
# destination shard of a map reduce job uses this in the "mapreduce.shardedfinish" command).

src/mongo/client/parallel.cpp (mongod, mongos, and tools)
src/mongo/client/parallel.h

# Hookup of client to sasl authentication. Only built in when user passes --use-sasl-client

src/mongo/client/sasl_client_authenticate.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/client/sasl_client_authenticate.h


####### database_commands #######


# Base class for mongodb commands. Has a big std::map with the keys of the command name and the
# values as the Command itself. These are the commands that you run using
# "db.$cmd.findOne({ "serverStatus" : true }).

src/mongo/db/commands.cpp (mongod, mongos, and tools)
src/mongo/db/commands.h

# A bunch of commands for mongod. However, this ALSO has the definition of Command::execCommand for
# mongod (the function that actually runs commands registered using the Command class, which gets
# called whenever a query against the "$cmd" collection is made)

src/mongo/db/dbcommands.cpp (mongod and tools)

# Commands (run using db.$cmd.findOne(...))

src/mongo/db/commands/apply_ops.cpp (mongod and tools)
src/mongo/db/commands/authentication_commands.cpp (mongod, mongos, and tools)
src/mongo/db/commands/authentication_commands.h
src/mongo/db/commands/cleanup_orphaned_cmd.cpp (mongod and tools)
src/mongo/db/commands/collection_to_capped.cpp (mongod and tools)
src/mongo/db/commands/connection_status.cpp (mongod, mongos, and tools)
src/mongo/db/commands/copydb.h
src/mongo/db/commands/copydb_common.cpp (mongod, mongos, and tools)
src/mongo/db/commands/dbhash.cpp (mongod and tools)
src/mongo/db/commands/dbhash.h
src/mongo/db/commands/distinct.cpp (mongod and tools)
src/mongo/db/commands/drop_indexes.cpp (mongod and tools)
src/mongo/db/commands/fail_point_cmd.cpp (mongod, mongos, and tools)
src/mongo/db/commands/find_and_modify.cpp (mongod and tools)
src/mongo/db/commands/find_and_modify.h
src/mongo/db/commands/find_and_modify_common.cpp (mongod, mongos, and tools)
src/mongo/db/commands/geonear.cpp (mongod and tools)
src/mongo/db/commands/get_last_error.cpp (mongod and tools)
src/mongo/db/commands/group.cpp (mongod and tools)
src/mongo/db/commands/hashcmd.cpp (mongod, mongos, and tools)
src/mongo/db/commands/index_stats.cpp (mongod and tools)
src/mongo/db/commands/isself.cpp (mongod, mongos, and tools)
src/mongo/db/commands/merge_chunks_cmd.cpp (mongod and tools)
src/mongo/db/commands/mr.cpp (mongod and tools)
src/mongo/db/commands/mr.h
src/mongo/db/commands/mr_common.cpp (mongod, mongos, and tools)
src/mongo/db/commands/parameters.cpp (mongod, mongos, and tools)
src/mongo/db/commands/pipeline_command.cpp (mongod and tools)
src/mongo/db/commands/rename_collection.cpp (mongod and tools)
src/mongo/db/commands/rename_collection.h
src/mongo/db/commands/rename_collection_common.cpp (mongod, mongos, and tools)
src/mongo/db/commands/server_status.cpp (mongod, mongos, and tools)
src/mongo/db/commands/server_status.h
src/mongo/db/commands/shutdown.cpp (mongod, mongos, and tools)
src/mongo/db/commands/shutdown.h
src/mongo/db/commands/storage_details.cpp (mongod and tools)
src/mongo/db/commands/test_commands.cpp (mongod and tools)
src/mongo/db/commands/touch.cpp (mongod)
src/mongo/db/commands/user_management_commands.cpp (mongod, mongos, and tools)
src/mongo/db/commands/validate.cpp (mongod and tools)
src/mongo/db/compact.cpp (mongod and tools)
src/mongo/db/dbcommands_admin.cpp (mongod and tools)
src/mongo/db/dbcommands_generic.cpp (mongod, mongos, and tools)
src/mongo/db/dbeval.cpp (mongod and tools)
src/mongo/s/commands_admin.cpp (mongos)
src/mongo/s/commands_public.cpp (mongos)
src/mongo/db/driverHelpers.cpp (mongod and tools)

# Commands + code for fsync of data files

src/mongo/db/commands/fsync.cpp (mongod and tools)
src/mongo/db/commands/fsync.h


####### new_wire_protocol_write_commands #######


# New write commands for new wire protocol. The new "write commands" are all actual Commands run
# using "db.$cmd.findOne(...)". The reason for this is that the old wire protocol didn't have
# acknowledgements for anything BUT queries (which include commands), so everything is now a query
# so we can get acknowledgements for writes (and not just for queries).

src/mongo/db/commands/write_commands/write_commands.cpp (mongod and tools)
src/mongo/db/commands/write_commands/write_commands.h
src/mongo/db/commands/write_commands/batch_executor.cpp (mongod and tools)
src/mongo/db/commands/write_commands/batch_executor.h
src/mongo/db/commands/write_commands/write_commands_common.cpp (mongod, mongos, and tools)
src/mongo/db/commands/write_commands/write_commands_common.h

# New wire protocol writes (in mongos)

src/mongo/s/commands/cluster_write_cmd.cpp # Command that is the entry point to the code below
src/mongo/s/write_ops/batch_downconvert.cpp (mongod, mongos, and tools)
src/mongo/s/write_ops/batch_downconvert.h
src/mongo/s/write_ops/batch_downconvert_test.cpp (not built in anywhere)
src/mongo/s/write_ops/batch_upconvert.cpp (mongod, mongos, and tools)
src/mongo/s/write_ops/batch_upconvert.h
src/mongo/s/write_ops/batch_upconvert_test.cpp (not built in anywhere)
src/mongo/s/write_ops/batch_write_exec.cpp (mongod, mongos, and tools)
src/mongo/s/write_ops/batch_write_exec.h
src/mongo/s/write_ops/batch_write_exec_test.cpp (not built in anywhere)
src/mongo/s/write_ops/batch_write_op.cpp (mongod, mongos, and tools)
src/mongo/s/write_ops/batch_write_op.h
src/mongo/s/write_ops/batch_write_op_test.cpp (not built in anywhere)
src/mongo/s/write_ops/config_coordinator.cpp (mongod, mongos, and tools)
src/mongo/s/write_ops/config_coordinator.h
src/mongo/s/write_ops/config_coordinator_test.cpp (not built in anywhere)
src/mongo/s/write_ops/dbclient_safe_writer.cpp (mongod, mongos, and tools)
src/mongo/s/write_ops/dbclient_safe_writer.h
src/mongo/s/write_ops/write_op.cpp (mongod, mongos, and tools)
src/mongo/s/write_ops/write_op.h
src/mongo/s/write_ops/write_op_test.cpp (not built in anywhere)

# New wire protocol writes (in mongod)
## why are these in s/ ?
src/mongo/s/write_ops/batched_command_request.cpp (mongod, mongos, and tools)
src/mongo/s/write_ops/batched_command_request.h
src/mongo/s/write_ops/batched_command_response.cpp (mongod, mongos, and tools)
src/mongo/s/write_ops/batched_command_response.h
src/mongo/s/write_ops/batched_command_response_test.cpp (not built in anywhere)
src/mongo/s/write_ops/batched_delete_document.cpp (mongod, mongos, and tools)
src/mongo/s/write_ops/batched_delete_document.h
src/mongo/s/write_ops/batched_delete_request.cpp (mongod, mongos, and tools)
src/mongo/s/write_ops/batched_delete_request.h
src/mongo/s/write_ops/batched_delete_request_test.cpp (not built in anywhere)
src/mongo/s/write_ops/batched_insert_request.cpp (mongod, mongos, and tools)
src/mongo/s/write_ops/batched_insert_request.h
src/mongo/s/write_ops/batched_insert_request_test.cpp (not built in anywhere)
src/mongo/s/write_ops/batched_request_metadata.cpp (mongod, mongos, and tools)
src/mongo/s/write_ops/batched_request_metadata.h
src/mongo/s/write_ops/batched_request_metadata_test.cpp (not built in anywhere)
src/mongo/s/write_ops/batched_update_document.cpp (mongod, mongos, and tools)
src/mongo/s/write_ops/batched_update_document.h
src/mongo/s/write_ops/batched_update_request.cpp (mongod, mongos, and tools)
src/mongo/s/write_ops/batched_update_request.h
src/mongo/s/write_ops/batched_update_request_test.cpp (not built in anywhere)
src/mongo/s/write_ops/batched_upsert_detail.cpp (mongod, mongos, and tools)
src/mongo/s/write_ops/batched_upsert_detail.h
src/mongo/s/write_ops/wc_error_detail.cpp (mongod, mongos, and tools)
src/mongo/s/write_ops/wc_error_detail.h
src/mongo/s/write_ops/write_error_detail.cpp (mongod, mongos, and tools)
src/mongo/s/write_ops/write_error_detail.h

# Header to enumerate the wire protocol version, along with the max and min supported versions
## can you say a bit about who exactly cares (which components) about wire protocol version?
src/mongo/db/wire_version.h


###### query_system ######


# Matcher expressions. The point of all of this is to take a query string and turn it into a
# structured set of classes. If this were a compiler this would be the parse tree for the compiler.

src/mongo/db/matcher/expression.cpp (mongod, mongos, and tools)
src/mongo/db/matcher/expression.h
src/mongo/db/matcher/expression_array.cpp (mongod, mongos, and tools)
src/mongo/db/matcher/expression_array.h
src/mongo/db/matcher/expression_array_test.cpp (not built in anywhere)
src/mongo/db/matcher/expression_geo.cpp (mongod, mongos, and tools)
src/mongo/db/matcher/expression_geo.h
src/mongo/db/matcher/expression_geo_test.cpp (not built in anywhere)
src/mongo/db/matcher/expression_leaf.cpp (mongod, mongos, and tools)
src/mongo/db/matcher/expression_leaf.h
src/mongo/db/matcher/expression_leaf_test.cpp (not built in anywhere)
src/mongo/db/matcher/expression_parser.cpp (mongod, mongos, and tools)
src/mongo/db/matcher/expression_parser.h
src/mongo/db/matcher/expression_parser_array_test.cpp (not built in anywhere)
src/mongo/db/matcher/expression_parser_geo.cpp (mongod, mongos, and tools)
src/mongo/db/matcher/expression_parser_geo_test.cpp (not built in anywhere)
src/mongo/db/matcher/expression_parser_leaf_test.cpp (not built in anywhere)
src/mongo/db/matcher/expression_parser_test.cpp (not built in anywhere)
src/mongo/db/matcher/expression_parser_text.cpp (mongod, mongos, and tools)
src/mongo/db/matcher/expression_parser_text_test.cpp (not built in anywhere)
src/mongo/db/matcher/expression_parser_tree.cpp (mongod, mongos, and tools)
src/mongo/db/matcher/expression_parser_tree_test.cpp (not built in anywhere)
src/mongo/db/matcher/expression_test.cpp (not built in anywhere)
src/mongo/db/matcher/expression_text.cpp (mongod, mongos, and tools)
src/mongo/db/matcher/expression_text.h
src/mongo/db/matcher/expression_tree.cpp (mongod, mongos, and tools)
src/mongo/db/matcher/expression_tree.h
src/mongo/db/matcher/expression_tree_test.cpp (not built in anywhere)
src/mongo/db/matcher/expression_where.cpp (mongod, mongos, and tools)

# This is the code to say "does this document match the expression"? This is built on the
# expressions above.

# Helper classes for managing document matching. Related to the expressions above.

src/mongo/db/matcher/matchable.cpp (mongod, mongos, and tools)
src/mongo/db/matcher/matchable.h
src/mongo/db/matcher/path.cpp (mongod, mongos, and tools)
src/mongo/db/matcher/path.h
src/mongo/db/matcher/path_internal.cpp (mongod, mongos, and tools)
src/mongo/db/matcher/path_internal.h
src/mongo/db/matcher/path_test.cpp (not built in anywhere)

# Interface to actually test if a document matches.

src/mongo/db/matcher/matcher.cpp (mongod, mongos, and tools)
src/mongo/db/matcher/matcher.h
src/mongo/db/matcher.h

# Helper for requesting more details about what matched our query from the matcher system.

src/mongo/db/matcher/match_details.cpp (mongod, mongos, and tools)
src/mongo/db/matcher/match_details.h

# Planning/parsing/optimization for new query framework
## not execution as well? (what are all these *runner.cpp files?)

src/mongo/db/query/cached_plan_runner.cpp (mongod and tools)
src/mongo/db/query/cached_plan_runner.h
src/mongo/db/query/canonical_query.cpp (mongod, mongos, and tools)
src/mongo/db/query/canonical_query.h
src/mongo/db/query/eof_runner.cpp (mongod and tools)
src/mongo/db/query/eof_runner.h
src/mongo/db/query/explain_plan.cpp (mongod and tools)
src/mongo/db/query/explain_plan.h
src/mongo/db/query/find_constants.h
src/mongo/db/query/get_runner.cpp (mongod and tools)
src/mongo/db/query/get_runner.h
src/mongo/db/query/idhack_runner.cpp (mongod and tools)
src/mongo/db/query/idhack_runner.h
src/mongo/db/query/index_bounds.cpp (mongod, mongos, and tools)
src/mongo/db/query/index_bounds.h
src/mongo/db/query/index_bounds_builder.cpp (mongod, mongos, and tools)
src/mongo/db/query/index_bounds_builder.h
src/mongo/db/query/index_bounds_builder_test.cpp (not built in anywhere)
src/mongo/db/query/index_bounds_test.cpp (not built in anywhere)
src/mongo/db/query/index_entry.h
src/mongo/db/query/index_tag.cpp (mongod, mongos, and tools)
src/mongo/db/query/index_tag.h
src/mongo/db/query/indexability.h
src/mongo/db/query/internal_plans.h
src/mongo/db/query/internal_runner.cpp (mongod and tools)
src/mongo/db/query/internal_runner.h
src/mongo/db/query/interval.cpp (mongod, mongos, and tools)
src/mongo/db/query/interval.h
src/mongo/db/query/interval_test.cpp (not built in anywhere)
src/mongo/db/query/lite_parsed_query.cpp (mongod, mongos, and tools)
src/mongo/db/query/lite_parsed_query.h
src/mongo/db/query/lite_parsed_query_test.cpp (not built in anywhere)
src/mongo/db/query/multi_plan_runner.cpp (mongod and tools)
src/mongo/db/query/multi_plan_runner.h
src/mongo/db/query/new_find.cpp (mongod and tools)
src/mongo/db/query/new_find.h
src/mongo/db/query/parsed_projection.cpp (mongod, mongos, and tools)
src/mongo/db/query/parsed_projection.h
src/mongo/db/query/parsed_projection_test.cpp (not built in anywhere)
src/mongo/db/query/plan_cache.cpp (mongod, mongos, and tools)
src/mongo/db/query/plan_cache.h
src/mongo/db/query/plan_cache_test.cpp (not built in anywhere)
src/mongo/db/query/plan_enumerator.cpp (mongod, mongos, and tools)
src/mongo/db/query/plan_enumerator.h
src/mongo/db/query/plan_executor.cpp (mongod and tools)
src/mongo/db/query/plan_executor.h
src/mongo/db/query/plan_ranker.cpp (mongod and tools)
src/mongo/db/query/plan_ranker.h
src/mongo/db/query/planner_access.cpp (mongod, mongos, and tools)
src/mongo/db/query/planner_access.h
src/mongo/db/query/planner_analysis.cpp (mongod, mongos, and tools)
src/mongo/db/query/planner_analysis.h
src/mongo/db/query/planner_ixselect.cpp (mongod, mongos, and tools)
src/mongo/db/query/planner_ixselect.h
src/mongo/db/query/planner_ixselect_test.cpp (not built in anywhere)
src/mongo/db/query/qlog.cpp (mongod, mongos, and tools)
src/mongo/db/query/qlog.h
src/mongo/db/query/query_planner.cpp (mongod, mongos, and tools)
src/mongo/db/query/query_planner.h
src/mongo/db/query/query_planner_common.h
src/mongo/db/query/query_planner_params.h
src/mongo/db/query/query_planner_test.cpp (not built in anywhere)
src/mongo/db/query/query_solution.cpp (mongod, mongos, and tools)
src/mongo/db/query/query_solution.h
src/mongo/db/query/runner.h
src/mongo/db/query/runner_yield_policy.h
src/mongo/db/query/single_solution_runner.cpp (mongod and tools)
src/mongo/db/query/single_solution_runner.h
src/mongo/db/query/stage_builder.cpp (mongod and tools)
src/mongo/db/query/stage_builder.h
src/mongo/db/query/stage_types.h
src/mongo/db/query/type_explain.cpp (mongod and tools)
src/mongo/db/query/type_explain.h

# Executor for new query framework
## oh. what is the relationship between 'runners' and e.g. 'index_scan'
## here?
src/mongo/db/exec/2d.cpp (mongod and tools)
src/mongo/db/exec/2d.h
src/mongo/db/exec/2dcommon.cpp (mongod and tools)
src/mongo/db/exec/2dcommon.h
src/mongo/db/exec/2dnear.cpp (mongod and tools)
src/mongo/db/exec/2dnear.h
src/mongo/db/exec/and_common-inl.h
src/mongo/db/exec/and_hash.cpp (mongod and tools)
src/mongo/db/exec/and_hash.h
src/mongo/db/exec/and_sorted.cpp (mongod and tools)
src/mongo/db/exec/and_sorted.h
src/mongo/db/exec/collection_scan.cpp (mongod and tools)
src/mongo/db/exec/collection_scan.h
src/mongo/db/exec/collection_scan_common.h
src/mongo/db/exec/fetch.cpp (mongod and tools)
src/mongo/db/exec/fetch.h
src/mongo/db/exec/filter.h
src/mongo/db/exec/index_scan.cpp (mongod and tools)
src/mongo/db/exec/index_scan.h
src/mongo/db/exec/limit.cpp (mongod and tools)
src/mongo/db/exec/limit.h
src/mongo/db/exec/merge_sort.cpp (mongod and tools)
src/mongo/db/exec/merge_sort.h
src/mongo/db/exec/mock_stage.cpp (not built in anywhere)
src/mongo/db/exec/mock_stage.h
src/mongo/db/exec/oplogstart.cpp (mongod and tools)
src/mongo/db/exec/oplogstart.h
src/mongo/db/exec/or.cpp (mongod and tools)
src/mongo/db/exec/or.h
src/mongo/db/exec/plan_stage.h
src/mongo/db/exec/plan_stats.h
src/mongo/db/exec/projection.cpp (mongod and tools)
src/mongo/db/exec/projection.h
src/mongo/db/exec/projection_exec.cpp (mongod and tools)
src/mongo/db/exec/projection_exec.h
src/mongo/db/exec/projection_exec_test.cpp (not built in anywhere)
src/mongo/db/exec/s2near.cpp (mongod and tools)
src/mongo/db/exec/s2near.h
src/mongo/db/exec/shard_filter.cpp (mongod and tools)
src/mongo/db/exec/shard_filter.h
src/mongo/db/exec/skip.cpp (mongod and tools)
src/mongo/db/exec/skip.h
src/mongo/db/exec/sort.cpp (mongod and tools)
src/mongo/db/exec/sort.h
src/mongo/db/exec/sort_test.cpp (not built in anywhere)
src/mongo/db/exec/stagedebug_cmd.cpp (mongod and tools)
src/mongo/db/exec/text.cpp (mongod and tools)
src/mongo/db/exec/text.h
src/mongo/db/exec/working_set.cpp (mongod, mongos, and tools)
src/mongo/db/exec/working_set.h
src/mongo/db/exec/working_set_common.cpp (mongod and tools)
src/mongo/db/exec/working_set_common.h
src/mongo/db/exec/working_set_computed_data.h
src/mongo/db/exec/working_set_test.cpp (not built in anywhere)

# Legacy utilities for managing queries. Has utilities like range intersection and application of
# skip and limit. These are allllmost dead. The functionality should be replaced by the new
# matcher, expressions, and query system.

src/mongo/db/queryutil-inl.h
src/mongo/db/queryutil.cpp (mongod, mongos, and tools)
src/mongo/db/queryutil.h

# Old way of doing document projections. Given a doc and a projection, transforms the document.
## what calls it, and where are projections done now?
src/mongo/db/projection.cpp (mongod, mongos, and tools)
src/mongo/db/projection.h

# Entry point for various database operations
## locks: we should clarify locking, e.g. everything in update.cpp happens
## in the context of a db write lock
## should clarify the relationship between these and db/instance.cpp (not built in anywhere)
src/mongo/db/ops/count.cpp (mongod and tools)
src/mongo/db/ops/count.h
src/mongo/db/ops/delete.cpp (mongod and tools)
src/mongo/db/ops/delete.h
src/mongo/db/ops/insert.cpp (mongod and tools)
src/mongo/db/ops/insert.h
src/mongo/db/ops/update.cpp (mongod and tools)
src/mongo/db/ops/update.h


###### update_system ######


# libupdate.a (only used by libupdate_driver.a). This is the new code for handling update
# operations:
## is this stuff only called from update.cpp?
src/mongo/db/ops/modifier_add_to_set.cpp (mongod, mongos, and tools)
src/mongo/db/ops/modifier_add_to_set.h
src/mongo/db/ops/modifier_add_to_set_test.cpp (not built in anywhere)
src/mongo/db/ops/modifier_bit.cpp (mongod, mongos, and tools)
src/mongo/db/ops/modifier_bit.h
src/mongo/db/ops/modifier_bit_test.cpp (not built in anywhere)
src/mongo/db/ops/modifier_compare.cpp (mongod, mongos, and tools)
src/mongo/db/ops/modifier_compare.h
src/mongo/db/ops/modifier_compare_test.cpp (not built in anywhere)
src/mongo/db/ops/modifier_current_date.cpp (mongod, mongos, and tools)
src/mongo/db/ops/modifier_current_date.h
src/mongo/db/ops/modifier_current_date_test.cpp (not built in anywhere)
src/mongo/db/ops/modifier_inc.cpp (mongod, mongos, and tools)
src/mongo/db/ops/modifier_inc.h
src/mongo/db/ops/modifier_inc_test.cpp (not built in anywhere)
src/mongo/db/ops/modifier_interface.h
src/mongo/db/ops/modifier_object_replace.cpp (mongod, mongos, and tools)
src/mongo/db/ops/modifier_object_replace.h
src/mongo/db/ops/modifier_object_replace_test.cpp (not built in anywhere)
src/mongo/db/ops/modifier_pop.cpp (mongod, mongos, and tools)
src/mongo/db/ops/modifier_pop.h
src/mongo/db/ops/modifier_pop_test.cpp (not built in anywhere)
src/mongo/db/ops/modifier_pull.cpp (mongod, mongos, and tools)
src/mongo/db/ops/modifier_pull.h
src/mongo/db/ops/modifier_pull_all.cpp (mongod, mongos, and tools)
src/mongo/db/ops/modifier_pull_all.h
src/mongo/db/ops/modifier_pull_all_test.cpp (not built in anywhere)
src/mongo/db/ops/modifier_pull_test.cpp (not built in anywhere)
src/mongo/db/ops/modifier_push.cpp (mongod, mongos, and tools)
src/mongo/db/ops/modifier_push.h
src/mongo/db/ops/modifier_push_sorter.h
src/mongo/db/ops/modifier_push_sorter_test.cpp (not built in anywhere)
src/mongo/db/ops/modifier_push_test.cpp (not built in anywhere)
src/mongo/db/ops/modifier_rename.cpp (mongod, mongos, and tools)
src/mongo/db/ops/modifier_rename.h
src/mongo/db/ops/modifier_rename_test.cpp (not built in anywhere)
src/mongo/db/ops/modifier_set.cpp (mongod, mongos, and tools)
src/mongo/db/ops/modifier_set.h
src/mongo/db/ops/modifier_set_test.cpp (not built in anywhere)
src/mongo/db/ops/modifier_unset.cpp (mongod, mongos, and tools)
src/mongo/db/ops/modifier_unset.h
src/mongo/db/ops/modifier_unset_test.cpp (not built in anywhere)

# libupdate_driver.a. This is the external interface to the new update system:

src/mongo/db/ops/modifier_table.cpp (mongod, mongos, and tools)
src/mongo/db/ops/modifier_table.h
src/mongo/db/ops/modifier_table_test.cpp (not built in anywhere)
src/mongo/db/ops/update_driver.cpp (mongod, mongos, and tools)
src/mongo/db/ops/update_driver.h
src/mongo/db/ops/update_driver_test.cpp (not built in anywhere)

# Utilities for the new update system (libupdate_common.a)

src/mongo/db/ops/path_support.cpp (mongod, mongos, and tools)
src/mongo/db/ops/path_support.h
src/mongo/db/ops/path_support_test.cpp (not built in anywhere)
src/mongo/db/ops/log_builder.cpp (mongod, mongos, and tools)
src/mongo/db/ops/log_builder.h
src/mongo/db/ops/log_builder_test.cpp (not built in anywhere)
src/mongo/db/ops/field_checker.cpp (mongod, mongos, and tools)
src/mongo/db/ops/field_checker.h
src/mongo/db/ops/field_checker_test.cpp (not built in anywhere)

# Other things used by the update system. TODO: figure out what these are for.

src/mongo/db/ops/update_lifecycle.h
src/mongo/db/ops/update_lifecycle_impl.cpp (mongod and tools)
src/mongo/db/ops/update_lifecycle_impl.h
src/mongo/db/ops/update_request.h
src/mongo/db/ops/update_result.h

# Utilites for managing dotted field names such as "a.b.c". For example, has things like
# "isPrefixOf".
## is there any relationship between this and bson/ or bson/mutable ?
src/mongo/db/field_ref.cpp (mongod, mongos, and tools)
src/mongo/db/field_ref.h
src/mongo/db/field_ref_set.cpp (mongod, mongos, and tools)
src/mongo/db/field_ref_set.h
src/mongo/db/field_ref_set_test.cpp (not built in anywhere)
src/mongo/db/field_ref_test.cpp (not built in anywhere)


######## aggregation_framework #########
## should be a library ;(
## who calls/owns this stuff?

src/mongo/db/pipeline/accumulator.h
src/mongo/db/pipeline/accumulator_add_to_set.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/accumulator_avg.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/accumulator_first.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/accumulator_last.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/accumulator_min_max.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/accumulator_push.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/accumulator_sum.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/document.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/document.h
src/mongo/db/pipeline/document_internal.h
src/mongo/db/pipeline/document_source.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/document_source.h
src/mongo/db/pipeline/document_source_bson_array.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/document_source_command_shards.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/document_source_cursor.cpp (mongod and tools)
src/mongo/db/pipeline/document_source_geo_near.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/document_source_group.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/document_source_limit.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/document_source_match.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/document_source_merge_cursors.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/document_source_out.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/document_source_project.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/document_source_redact.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/document_source_skip.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/document_source_sort.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/document_source_unwind.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/expression.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/expression.h
src/mongo/db/pipeline/expression_context.h
src/mongo/db/pipeline/field_path.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/field_path.h
src/mongo/db/pipeline/pipeline.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/pipeline.h
src/mongo/db/pipeline/pipeline_d.cpp (mongod and tools)
src/mongo/db/pipeline/pipeline_d.h
src/mongo/db/pipeline/pipeline_optimizations.h
src/mongo/db/pipeline/value.cpp (mongod, mongos, and tools)
src/mongo/db/pipeline/value.h
src/mongo/db/pipeline/value_internal.h

# Generic interface for getting and merging sorted streams of documents. Only used in aggregation.
## +1 "only used in aggregation" :)
src/mongo/db/sorter/sorter.cpp (not built in anywhere)
src/mongo/db/sorter/sorter.h
src/mongo/db/sorter/sorter_test.cpp (not built in anywhere)

# Code for external sort. This sits inside the sorter, and the sorter "spills over" to disk if
# external sorting is allowed.
## who calls this?
src/mongo/db/extsort.cpp (mongod and tools)
src/mongo/db/extsort.h

# I believe this is just used in External Sort, but it's standing on its own here without a
# description.

src/mongo/db/sort_phase_one.h


######## concurrency #########

# Core locks library. Only in mongod.
## can you say a bit more? e.g. database locks are RWlocks, but what *are*
## they exactly? any sort of fairness or other performance/"how to use" info?
# TODO: There are also a bunch of concurrency related helpers in the UTILITIES section.
src/mongo/util/concurrency/rwlock.h
src/mongo/util/concurrency/rwlockimpl.cpp (mongod, tools, and cppclientdriver)
src/mongo/util/concurrency/rwlockimpl.h
src/mongo/db/d_concurrency.cpp (mongod and tools)
src/mongo/db/d_concurrency.h
src/mongo/db/lockstat.cpp (mongod and tools)
src/mongo/db/lockstat.h
src/mongo/db/lockstate.cpp (mongod and tools)
src/mongo/db/lockstate.h

# Spin locks
## can you give an example or two of where we tightly spin on locks?
src/mongo/util/concurrency/spin_lock.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/concurrency/spin_lock.h
src/mongo/util/concurrency/spin_lock_test.cpp (not built in anywhere)

# Condition Variables
## why called 'synchronization' then? (what are these, really? can you give
## an example?)
src/mongo/util/concurrency/synchronization.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/concurrency/synchronization.h


###### journaling #######


# Page aligned buffer builder
## what sort of buffer? i don't understand ;(
src/mongo/util/alignedbuilder.cpp (mongod and tools)
src/mongo/util/alignedbuilder.h

# Journaling module
## who calls/owns stuff in here? only used by mongod, correct?
src/mongo/db/dur.cpp (mongod and tools)
src/mongo/db/dur.h
src/mongo/db/dur_commitjob.cpp (mongod and tools)
src/mongo/db/dur_commitjob.h
src/mongo/db/dur_journal.cpp (mongod and tools)
src/mongo/db/dur_journal.h
src/mongo/db/dur_journalformat.h
src/mongo/db/dur_journalimpl.h
src/mongo/db/dur_preplogbuffer.cpp (mongod and tools)
src/mongo/db/dur_recover.cpp (mongod and tools)
src/mongo/db/dur_recover.h
src/mongo/db/dur_stats.h
src/mongo/db/dur_writetodatafiles.cpp (mongod and tools)
src/mongo/db/durop.cpp (mongod and tools)
src/mongo/db/durop.h
src/mongo/db/storage/durable_mapped_file.cpp (mongod and tools)
src/mongo/db/storage/durable_mapped_file.h

# This is not actually used in our logging system. Just utilities to create files that you can
# append to. One notable example of a system that uses this is our preallocation of journal files.
# In fact, it isn't used in anything not journaling related right now.

src/mongo/util/logfile.cpp (mongod and tools)
src/mongo/util/logfile.h


###### file_allocation #######


# File allocation library

src/mongo/util/file_allocator.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/file_allocator.h


###### mmap #######


# mmap library (only depends on file allocation library)

src/mongo/util/mmap.cpp (mongod and tools)
src/mongo/util/mmap.h
src/mongo/util/mmap_posix.cpp (mongod and tools)


###### mmap_file_interface #######


# Interface to data file. Depends on journaling module. These are the actual data files on disk
# "<dbname>.#".  Handles file preallocation.

src/mongo/db/storage/data_file.cpp (mongod and tools)
src/mongo/db/storage/data_file.h


###### file_interface #######


# Abstraction layer for dealing with files. It's basically the read(2), open(2), and write(2)
# interface for posix, and something else for Windows. Not used by mmap code, and does not depend
# on file allocator library. Use this if you need a file but not a memory mapped file.

src/mongo/util/file.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/file.h


###### auditing ######


# Stubs for auditing enterprise module

src/mongo/db/audit.cpp (mongod, mongos, and tools)
src/mongo/db/audit.h


###### authentication ######


# Authapalooza! TODO: actually separate this logically.

src/mongo/db/auth/action_set.cpp (mongod, mongos, and tools)
src/mongo/db/auth/action_set.h
src/mongo/db/auth/action_set_test.cpp (not built in anywhere)
src/mongo/db/auth/action_types.txt
src/mongo/db/auth/auth_index_d.cpp (mongod and tools)
src/mongo/db/auth/auth_index_d.h
src/mongo/db/auth/auth_server_parameters.cpp (mongod, mongos, and tools)
src/mongo/db/auth/authentication_session.h
src/mongo/db/auth/authorization_manager.cpp (mongod, mongos, and tools)
src/mongo/db/auth/authorization_manager.h
src/mongo/db/auth/authorization_manager_global.cpp (mongod, mongos, and tools)
src/mongo/db/auth/authorization_manager_global.h
src/mongo/db/auth/authorization_manager_test.cpp (not built in anywhere)
src/mongo/db/auth/authorization_session.cpp (mongod, mongos, and tools)
src/mongo/db/auth/authorization_session.h
src/mongo/db/auth/authorization_session_test.cpp (not built in anywhere)
src/mongo/db/auth/authz_documents_update_guard.cpp (mongod, mongos, and tools)
src/mongo/db/auth/authz_documents_update_guard.h
src/mongo/db/auth/authz_manager_external_state.cpp (mongod, mongos, and tools)
src/mongo/db/auth/authz_manager_external_state.h
src/mongo/db/auth/authz_manager_external_state_d.cpp (mongod and tools)
src/mongo/db/auth/authz_manager_external_state_d.h
src/mongo/db/auth/authz_manager_external_state_local.cpp (mongod, mongos, and tools)
src/mongo/db/auth/authz_manager_external_state_local.h
src/mongo/db/auth/authz_manager_external_state_mock.cpp (mongod, mongos, and tools)
src/mongo/db/auth/authz_manager_external_state_mock.h
src/mongo/db/auth/authz_manager_external_state_s.cpp (mongos)
src/mongo/db/auth/authz_manager_external_state_s.h
src/mongo/db/auth/authz_session_external_state.cpp (mongod, mongos, and tools)
src/mongo/db/auth/authz_session_external_state.h
src/mongo/db/auth/authz_session_external_state_d.cpp (mongod and tools)
src/mongo/db/auth/authz_session_external_state_d.h
src/mongo/db/auth/authz_session_external_state_mock.h
src/mongo/db/auth/authz_session_external_state_s.cpp (mongos)
src/mongo/db/auth/authz_session_external_state_s.h
src/mongo/db/auth/authz_session_external_state_server_common.cpp (mongod, mongos, and tools)
src/mongo/db/auth/authz_session_external_state_server_common.h
src/mongo/db/auth/generate_action_types.py
src/mongo/db/auth/mongo_authentication_session.cpp (mongod, mongos, and tools)
src/mongo/db/auth/mongo_authentication_session.h
src/mongo/db/auth/privilege.cpp (mongod, mongos, and tools)
src/mongo/db/auth/privilege.h
src/mongo/db/auth/privilege_parser.cpp (mongod, mongos, and tools)
src/mongo/db/auth/privilege_parser.h
src/mongo/db/auth/privilege_parser_test.cpp (not built in anywhere)
src/mongo/db/auth/resource_pattern.cpp (mongod, mongos, and tools)
src/mongo/db/auth/resource_pattern.h
src/mongo/db/auth/role_graph.cpp (mongod, mongos, and tools)
src/mongo/db/auth/role_graph.h
src/mongo/db/auth/role_graph_builtin_roles.cpp (mongod, mongos, and tools)
src/mongo/db/auth/role_graph_test.cpp (not built in anywhere)
src/mongo/db/auth/role_graph_update.cpp (mongod, mongos, and tools)
src/mongo/db/auth/role_name.cpp (mongod, mongos, and tools)
src/mongo/db/auth/role_name.h
src/mongo/db/auth/security_key.cpp (mongod, mongos, and tools)
src/mongo/db/auth/security_key.h
src/mongo/db/auth/user.cpp (mongod, mongos, and tools)
src/mongo/db/auth/user.h
src/mongo/db/auth/user_cache_invalidator_job.cpp (mongos)
src/mongo/db/auth/user_cache_invalidator_job.h
src/mongo/db/auth/user_document_parser.cpp (mongod, mongos, and tools)
src/mongo/db/auth/user_document_parser.h
src/mongo/db/auth/user_document_parser_test.cpp (not built in anywhere)
src/mongo/db/auth/user_management_commands_parser.cpp (mongod, mongos, and tools)
src/mongo/db/auth/user_management_commands_parser.h
src/mongo/db/auth/user_name.cpp (mongod, mongos, and tools)
src/mongo/db/auth/user_name.h
src/mongo/db/auth/user_name_hash.h
src/mongo/db/auth/user_set.cpp (mongod, mongos, and tools)
src/mongo/db/auth/user_set.h
src/mongo/db/auth/user_set_test.cpp (not built in anywhere)


####### javascript_libraries #######


# v8 Javascript library files

src/mongo/scripting/engine.cpp (mongod, mongos, and tools)
src/mongo/scripting/engine.h
src/mongo/scripting/engine_v8.cpp (mongod, mongos, and tools)
src/mongo/scripting/engine_v8.h
src/mongo/scripting/utils.cpp (mongod, mongos, and tools)
src/mongo/scripting/v8_db.cpp (mongod, mongos, and tools)
src/mongo/scripting/v8_db.h
src/mongo/scripting/v8_deadline_monitor.h
src/mongo/scripting/v8_deadline_monitor_test.cpp (not built in anywhere)
src/mongo/scripting/v8_profiler.cpp (mongod, mongos, and tools)
src/mongo/scripting/v8_profiler.h
src/mongo/scripting/v8_utils.cpp (mongod, mongos, and tools)
src/mongo/scripting/v8_utils.h

# Benchrunner suite. See
# https://blog.serverdensity.com/real-world-mongodb-benchmarks-with-benchrun/.

src/mongo/scripting/bench.cpp (mongod, mongos, and tools)
src/mongo/scripting/bench.h
src/mongo/scripting/bson_template_evaluator.cpp (mongod, mongos, and tools)
src/mongo/scripting/bson_template_evaluator.h
src/mongo/scripting/bson_template_evaluator_test.cpp (not built in anywhere)


######## mongo_shell ########


# Javascript files that get wrapped in strings and put in cpp files. See the "env.JSHeader" calls
# in src/mongo/SConscript and shell/createCPPfromJavaScriptFiles.js

src/mongo/shell/assert.js
src/mongo/shell/collection.js
src/mongo/shell/db.js
src/mongo/shell/mongo.js
src/mongo/shell/mr.js
src/mongo/shell/query.js
src/mongo/shell/replsetbridge.js
src/mongo/shell/replsettest.js
src/mongo/shell/servers.js
src/mongo/shell/servers_misc.js
src/mongo/shell/shardingtest.js
src/mongo/shell/types.js
src/mongo/shell/utils.js
src/mongo/shell/utils_sh.js
src/mongo/shell/writes.js

# Files only built into the mongo shell

src/mongo/shell/dbshell.cpp # main
src/mongo/shell/linenoise.cpp (not built in anywhere)
src/mongo/shell/linenoise.h
src/mongo/shell/linenoise_utf8.cpp (not built in anywhere)
src/mongo/shell/linenoise_utf8.h
src/mongo/shell/mk_wcwidth.cpp (not built in anywhere)
src/mongo/shell/mk_wcwidth.h
src/mongo/shell/shell_utils.cpp (not built in anywhere)
src/mongo/shell/shell_utils.h
src/mongo/shell/shell_utils_extended.cpp (not built in anywhere)
src/mongo/shell/shell_utils_extended.h
src/mongo/shell/shell_utils_launcher.cpp (not built in anywhere)
src/mongo/shell/shell_utils_launcher.h

# Shell command line options

src/mongo/shell/shell_options.cpp (not built in anywhere)
src/mongo/shell/shell_options.h
src/mongo/shell/shell_options_init.cpp (not built in anywhere)
src/mongo/shell/shell_options_test.cpp (not built in anywhere)


###### mongos_and_mongod_mains #######


# Main for mongod

src/mongo/db/db.cpp (mongod)
src/mongo/db/db.h

# Mongod command line options

src/mongo/db/mongod_options.cpp (mongod)
src/mongo/db/mongod_options.h
src/mongo/db/mongod_options_init.cpp (mongod)
src/mongo/db/mongod_options_test.cpp (not built in anywhere)

# Main for mongos

src/mongo/s/server.cpp (mongos)
src/mongo/s/server.h

# Mongos command line options

src/mongo/s/mongos_options.cpp (mongos)
src/mongo/s/mongos_options.h
src/mongo/s/mongos_options_init.cpp (mongos)
src/mongo/s/mongos_options_test.cpp (not built in anywhere)


###### client_and_operation_tracking ######


# mongos's version of a "Client". This is the big bucket of global state. This ALSO has the
# definition of Command::execCommand for mongos (the function that actually runs commands registered
# using the Command class, which gets called whenever a query against the "$cmd" collection is made)

src/mongo/s/s_only.cpp (mongos)

# mongod's version of a "Client". This is the big bucket of global state.
# There is also the concept of a "Context" that one can take at the beginning of an operation that
# holds a subset of the global state. There is also a "ReadContext" and a "WriteContext which
# take locks. These are all nested classes in "Client". It's a bizarre situation because
# "client.h" contains the declaration of the class, but there are two different definitions. One in
# "s_only.cpp" for mongos, and one in "client.cpp" for mongod. This means that mongos files may
# contain "client.h" and pass compile fine when using something in it, but then may fail link
# because it happens to be something that's only defined in "client.cpp". I don't see any
# definitions so far for "Context" in mongos, and a grep for "Client::WriteContext::WriteContext"
# (the definition of the WriteContext constructor) only shows up in client.cpp, which is mongod
# only.

src/mongo/db/client.cpp (mongod and tools)
src/mongo/db/client.h

# The current "operation" within the current "Client"

src/mongo/db/curop-inl.h
src/mongo/db/curop.cpp (mongod and tools)
src/mongo/db/curop.h
src/mongo/db/curop_test.cpp (not built in anywhere)

# Functions to kill the current "operation"

src/mongo/db/kill_current_op.cpp (mongod and tools)
src/mongo/db/kill_current_op.h

# Helpers to check whether the current operation in the current client has been interrupted.

src/mongo/db/interrupt_status.h
src/mongo/db/interrupt_status_mongod.cpp (mongod and tools)
src/mongo/db/interrupt_status_mongod.h
src/mongo/s/interrupt_status_mongos.cpp (mongos)
src/mongo/s/interrupt_status_mongos.h

# Base class for a Client on mongod and mongos: ClientBasic

src/mongo/db/client_basic.cpp (mongod, mongos, and tools)
src/mongo/db/client_basic.h

# Seems to be the "mongos only" version of the "Client" class: ClientInfo Also inherits from ClientBasic

src/mongo/s/client_info.cpp (mongos)
src/mongo/s/client_info.h

# The database's internal concept of a cursor from a client

src/mongo/db/clientcursor.cpp (mongod and tools)
src/mongo/db/clientcursor.h

# Contains helper functions for running common operations against the local server. For example,
# has findOne, ensureIndex, upsert, etc. which all just run the respective options on the server the
# code is running on.

src/mongo/db/dbhelpers.cpp (mongod and tools)
src/mongo/db/dbhelpers.h

# Code to get a handle to the "system.profile" collection for a given Database

src/mongo/db/introspect.cpp (mongod and tools)
src/mongo/db/introspect.h

# Just an enum for different cursor time limit states.

src/mongo/db/max_time.h


######## storage_layer_structure ########


# Helper to manage strings that look like "<db>.<collection>"

src/mongo/db/namespace_string-inl.h
src/mongo/db/namespace_string.h
src/mongo/db/namespace_string_test.cpp (not built in anywhere)

# Files containing the structural metadata about the databases/data files/collections/indexes.
# TODO: Add more details here about the relationships between these files.

src/mongo/db/namespace_details-inl.h
src/mongo/db/namespace_details.cpp (mongod and tools)
src/mongo/db/namespace_details.h
src/mongo/db/database.cpp (mongod and tools)
src/mongo/db/database.h
src/mongo/db/database_holder.cpp (mongod and tools)
src/mongo/db/database_holder.h
src/mongo/db/storage/index_details.cpp (mongod and tools)
src/mongo/db/storage/index_details.h
src/mongo/db/storage_options.cpp (mongod and tools)
src/mongo/db/storage_options.h
src/mongo/db/structure/btree/btree.cpp (mongod and tools)
src/mongo/db/structure/btree/btree.h
src/mongo/db/structure/btree/btree_stats.cpp (mongod and tools)
src/mongo/db/structure/btree/btree_stats.h
src/mongo/db/structure/btree/btreebuilder.cpp (mongod and tools)
src/mongo/db/structure/btree/btreebuilder.h
src/mongo/db/structure/btree/key.cpp (mongod and tools)
src/mongo/db/structure/btree/key.h
src/mongo/db/structure/btree/state-inl.h
src/mongo/db/structure/btree/state.cpp (mongod and tools)
src/mongo/db/structure/btree/state.h
src/mongo/db/structure/collection.cpp (mongod and tools)
src/mongo/db/structure/collection.h
src/mongo/db/structure/collection_info_cache.cpp (mongod and tools)
src/mongo/db/structure/collection_info_cache.h
src/mongo/db/structure/collection_iterator.cpp (mongod and tools)
src/mongo/db/structure/collection_iterator.h
src/mongo/db/structure/record_store.cpp (mongod and tools)
src/mongo/db/structure/record_store.h
src/mongo/db/cap.cpp # Capped collection namespace details
src/mongo/db/catalog/index_catalog.cpp (mongod and tools)
src/mongo/db/catalog/index_catalog.h
src/mongo/db/catalog/index_create.cpp (mongod and tools)
src/mongo/db/catalog/index_create.h
src/mongo/db/catalog/ondisk/namespace-inl.h
src/mongo/db/catalog/ondisk/namespace.cpp (mongod, mongos, and tools)
src/mongo/db/catalog/ondisk/namespace.h
src/mongo/db/catalog/ondisk/namespace_index.cpp (mongod and tools)
src/mongo/db/catalog/ondisk/namespace_index.h
src/mongo/db/catalog/ondisk/namespace_test.cpp (not built in anywhere)

# A DiskLoc is simply a file number and offset into the file for a db. You can think of this as an
# "address" into our database's storage space.

src/mongo/db/diskloc.h
src/mongo/db/diskloc_test.cpp (not built in anywhere)

# A record is simply a "node" in a linked list. It contains "prev" and "next" offsets, as well as
# the offset of the extent in the current file.

src/mongo/db/storage/record.cpp (mongod and tools)
src/mongo/db/storage/record.h

# An extent is a bucket of records. Extents themselves are in a kind of linked list, except instead
# of offsets into a single datafile, their "prev" and "next" members are DiskLocs.

src/mongo/db/storage/extent.cpp (mongod and tools)
src/mongo/db/storage/extent.h

# Sits above an extent and has helper functions to manage them as a whole. This is the new way to
# iterate extents.

src/mongo/db/storage/extent_manager.cpp (mongod and tools)
src/mongo/db/storage/extent_manager.h

# Utilities to clone entire collections and databases

src/mongo/db/cloner.cpp (mongod and tools)
src/mongo/db/cloner.h

# One of the very hairy, very old parts of the server. Contains code for the DBDirectClient, which
# is an implementation of the "DBClientBase" class in the client driver. The DBDirectClient has the
# same interface as the client driver, except that instead of connecting over the network it is just
# doing operations on the local server behind the scenes.
#
# This also has code for the "BSONElementManipulator which is what allows us to do in place
# updates in the old code. It appears now that it is only used in updating the "expireAfterSeconds"
# field for a document in a TTL index.
#
# Also have random things like "getDatabaseNames" which just iteratest the db directory getting all
# the names of the files there. Also has the version of "inShutdown" and "dbexit" for mongod.
## clarify relationship between instance.cpp and the various ops/* (insert/update etc)

src/mongo/db/instance.cpp (mongod and tools)
src/mongo/db/instance.h

# This is another really hairy, really old legacy file. At this point it's easier to just write out
# all the functions in the interface than describe what it does. I believe "pdfile" is short for
# "persistent data file". It contains a bunch of old legacy things to manipulate data files and
# data file metadata.
#
# Here are all the functions in pdfile.cpp that are currently used in the project.
#
# mongo::inDBRepair
# mongo::allocateSpaceForANewRecord(char const*, mongo::NamespaceDetails*, int, bool)
# mongo::dbSize(char const*)
# mongo::dropDatabase(std::string const&)
# mongo::dbHolderUnchecked()
# mongo::addRecordToRecListInExtent(mongo::Record*, mongo::DiskLoc)
# mongo::userCreateNS(char const*, mongo::BSONObj, std::string&, bool, bool*)
# mongo::_deleteDataFiles(char const*)
# mongo::dropAllDatabasesExceptLocal()
# mongo::isValidNS(mongo::StringData const&)
# mongo::repairDatabase(std::string, std::string&, bool, bool)

src/mongo/db/pdfile.cpp (mongod and tools)
src/mongo/db/pdfile.h
src/mongo/db/pdfile_private.h
src/mongo/db/pdfile_version.h


######## page_fault_utilities ##########


# Contains the PageFaultException and NoPageFaultsAllowed classes.
## where are these used?
src/mongo/db/pagefault.cpp (mongod and tools)
src/mongo/db/pagefault.h

# Code to go in and touch pages so that they are brought into memory.
## who calls these?
src/mongo/db/prefetch.cpp (mongod and tools)
src/mongo/db/prefetch.h


######## indexing ##########


# Indexes and index management code. TODO: go into more details about this. The code is new.
# The two parts of the interface that are nice entry points are the "index_access_method.h"
# (interface for manipulating and accessing the index itself), and "index_cursor.h" (interface for
# getting data from an index) files.
## can you say a bit more about the structure in here, wrt. a hypothetical
## member of the 'open source community' who wants to add a new type of
## index to mongodb?
src/mongo/db/index/2d_access_method.cpp (mongod and tools)
src/mongo/db/index/2d_access_method.h
src/mongo/db/index/2d_common.h
src/mongo/db/index/btree_access_method.cpp (mongod and tools)
src/mongo/db/index/btree_access_method.h
src/mongo/db/index/btree_access_method_internal.h
src/mongo/db/index/btree_based_builder.cpp (mongod and tools)
src/mongo/db/index/btree_based_builder.h
src/mongo/db/index/btree_index_cursor.cpp (mongod and tools)
src/mongo/db/index/btree_index_cursor.h
src/mongo/db/index/btree_interface.cpp (mongod and tools)
src/mongo/db/index/btree_interface.h
src/mongo/db/index/btree_key_generator.cpp (mongod, mongos, and tools)
src/mongo/db/index/btree_key_generator.h
src/mongo/db/index/expression_index.h
src/mongo/db/index/fts_access_method.cpp (mongod and tools)
src/mongo/db/index/fts_access_method.h
src/mongo/db/index/hash_access_method.cpp (mongod and tools)
src/mongo/db/index/hash_access_method.h
src/mongo/db/index/haystack_access_method.cpp (mongod and tools)
src/mongo/db/index/haystack_access_method.h
src/mongo/db/index/haystack_access_method_internal.h
src/mongo/db/index/index_access_method.h
src/mongo/db/index/index_cursor.h
src/mongo/db/index/index_descriptor.h
src/mongo/db/index/s2_access_method.cpp (mongod and tools)
src/mongo/db/index/s2_access_method.h
src/mongo/db/index_builder.cpp (mongod and tools)
src/mongo/db/index_builder.h
src/mongo/db/index_legacy.cpp (mongod and tools)
src/mongo/db/index_legacy.h
src/mongo/db/index_names.cpp (mongod, mongos, and tools)
src/mongo/db/index_names.h
src/mongo/db/index_rebuilder.cpp (mongod and tools)
src/mongo/db/index_rebuilder.h
src/mongo/db/index_set.cpp (mongod, mongos, and tools)
src/mongo/db/index_set.h
src/mongo/db/index_set_test.cpp (not built in anywhere)

# Class representing an index spec, such as { "a" : 1, "b" : -1 }

src/mongo/db/keypattern.cpp (mongod, mongos, and tools)
src/mongo/db/keypattern.h

# Background job that periodically checks a ttl index.

src/mongo/db/ttl.cpp (mongod and tools)
src/mongo/db/ttl.h


######### full_text_search_module ###########


src/mongo/db/fts/fts_command.cpp (mongod, mongos, and tools)
src/mongo/db/fts/fts_command.h
src/mongo/db/fts/fts_command_mongod.cpp (mongod and tools)
src/mongo/db/fts/fts_command_mongos.cpp (mongos)
src/mongo/db/fts/fts_enabled.cpp (mongod, mongos, and tools)
src/mongo/db/fts/fts_index_format.cpp (mongod, mongos, and tools)
src/mongo/db/fts/fts_index_format.h
src/mongo/db/fts/fts_index_format_test.cpp (not built in anywhere)
src/mongo/db/fts/fts_language.cpp (mongod, mongos, and tools)
src/mongo/db/fts/fts_language.h
src/mongo/db/fts/fts_language_test.cpp (not built in anywhere)
src/mongo/db/fts/fts_matcher.cpp (mongod, mongos, and tools)
src/mongo/db/fts/fts_matcher.h
src/mongo/db/fts/fts_matcher_test.cpp (not built in anywhere)
src/mongo/db/fts/fts_query.cpp (mongod, mongos, and tools)
src/mongo/db/fts/fts_query.h
src/mongo/db/fts/fts_query_test.cpp (not built in anywhere)
src/mongo/db/fts/fts_spec.cpp (mongod, mongos, and tools)
src/mongo/db/fts/fts_spec.h
src/mongo/db/fts/fts_spec_test.cpp (not built in anywhere)
src/mongo/db/fts/fts_util.cpp (mongod, mongos, and tools)
src/mongo/db/fts/fts_util.h
src/mongo/db/fts/fts_util_test.cpp (not built in anywhere)
src/mongo/db/fts/generate_stop_words.py
src/mongo/db/fts/stemmer.cpp (mongod, mongos, and tools)
src/mongo/db/fts/stemmer.h
src/mongo/db/fts/stemmer_test.cpp (not built in anywhere)
src/mongo/db/fts/stop_words.cpp (mongod, mongos, and tools)
src/mongo/db/fts/stop_words.h
src/mongo/db/fts/stop_words_danish.txt
src/mongo/db/fts/stop_words_dutch.txt
src/mongo/db/fts/stop_words_english.txt
src/mongo/db/fts/stop_words_finnish.txt
src/mongo/db/fts/stop_words_french.txt
src/mongo/db/fts/stop_words_german.txt
src/mongo/db/fts/stop_words_hungarian.txt
src/mongo/db/fts/stop_words_italian.txt
src/mongo/db/fts/stop_words_norwegian.txt
src/mongo/db/fts/stop_words_portuguese.txt
src/mongo/db/fts/stop_words_romanian.txt
src/mongo/db/fts/stop_words_russian.txt
src/mongo/db/fts/stop_words_spanish.txt
src/mongo/db/fts/stop_words_swedish.txt
src/mongo/db/fts/stop_words_test.cpp (not built in anywhere)
src/mongo/db/fts/stop_words_turkish.txt
src/mongo/db/fts/tokenizer.cpp (mongod, mongos, and tools)
src/mongo/db/fts/tokenizer.h
src/mongo/db/fts/tokenizer_test.cpp (not built in anywhere)


######### geo_queries #########


# GEO query code. TODO: describe the structure of this and how it interacts with the new index
# system.

src/mongo/db/geo/core.h
src/mongo/db/geo/geoconstants.h
src/mongo/db/geo/geoparser.cpp (mongod, mongos, and tools)
src/mongo/db/geo/geoparser.h
src/mongo/db/geo/geoparser_test.cpp (not built in anywhere)
src/mongo/db/geo/geoquery.cpp (mongod, mongos, and tools)
src/mongo/db/geo/geoquery.h
src/mongo/db/geo/hash.cpp (mongod, mongos, and tools)
src/mongo/db/geo/hash.h
src/mongo/db/geo/hash_test.cpp (not built in anywhere)
src/mongo/db/geo/haystack.cpp (mongod and tools)
src/mongo/db/geo/s2common.cpp (mongod and tools)
src/mongo/db/geo/s2common.h
src/mongo/db/geo/shapes.cpp (mongod, mongos, and tools)
src/mongo/db/geo/shapes.h


####### database_web_accesss ########


# Web access to the database, including rest, jsonp, and http.

src/mongo/db/dbwebserver.cpp (mongod and mongos)
src/mongo/db/dbwebserver.h
src/mongo/db/restapi.cpp (mongod)
src/mongo/db/restapi.h
src/mongo/db/clientlistplugin.cpp # Plugin to list connected clients via web interface
src/mongo/util/net/miniwebserver.cpp (mongod, mongos, and tools)
src/mongo/util/net/miniwebserver.h


###### replication ######


# Replication code? TODO: verify that this is all replication related and document the architecture.
## a part of this i would like to have documented is threads+locks, e.g.
## heartbeats are sent in a unique thread (i think?) and maybe listened for
## in a unique thread too? what threads get started if replication is being
## used?
src/mongo/db/repl/bgsync.cpp (mongod and tools)
src/mongo/db/repl/bgsync.h
src/mongo/db/repl/connections.h
src/mongo/db/repl/consensus.cpp (mongod and tools)
src/mongo/db/repl/health.cpp (mongod and tools)
src/mongo/db/repl/health.h
src/mongo/db/repl/heartbeat.cpp (mongod and tools)
src/mongo/db/repl/is_master.h
src/mongo/db/repl/manager.cpp (mongod and tools)
src/mongo/db/repl/master_slave.cpp (mongod and tools)
src/mongo/db/repl/master_slave.h
src/mongo/db/repl/multicmd.h
src/mongo/db/repl/oplog.cpp (mongod and tools)
src/mongo/db/repl/oplog.h
src/mongo/db/repl/oplogreader.cpp (mongod and tools)
src/mongo/db/repl/oplogreader.h
src/mongo/db/repl/repl_reads_ok.cpp (mongod and tools)
src/mongo/db/repl/repl_reads_ok.h
src/mongo/db/repl/repl_start.cpp (mongod and tools)
src/mongo/db/repl/repl_start.h
src/mongo/db/repl/replication_server_status.cpp (mongod and tools)
src/mongo/db/repl/replication_server_status.h
src/mongo/db/repl/replset_commands.cpp (mongod and tools)
src/mongo/db/repl/replset_web_handler.cpp (mongod)
src/mongo/db/repl/resync.cpp (mongod and tools)
src/mongo/db/repl/rs.cpp (mongod and tools)
src/mongo/db/repl/rs.h
src/mongo/db/repl/rs_config.cpp (mongod and tools)
src/mongo/db/repl/rs_config.h
src/mongo/db/repl/rs_exception.h
src/mongo/db/repl/rs_initialsync.cpp (mongod and tools)
src/mongo/db/repl/rs_initiate.cpp (mongod and tools)
src/mongo/db/repl/rs_member.h
src/mongo/db/repl/rs_rollback.cpp (mongod and tools)
src/mongo/db/repl/rs_sync.cpp (mongod and tools)
src/mongo/db/repl/rs_sync.h
src/mongo/db/repl/sync.cpp (mongod and tools)
src/mongo/db/repl/sync.h
src/mongo/db/repl/sync_source_feedback.cpp (mongod and tools)
src/mongo/db/repl/sync_source_feedback.h

# Helpers to wait for the appropriate write concern

src/mongo/db/write_concern.cpp (mongod and tools)
src/mongo/db/write_concern.h

# Actual meat of the waiting for write concern code

src/mongo/db/repl/write_concern.cpp (mongod and tools)
src/mongo/db/repl/write_concern.h


###### sharding ######


# Helper classes to delete a range of documents. This is used for example in chunk migrations
# when we are cleaning up an old chunk.
src/mongo/db/range_deleter.cpp (mongod and tools)
src/mongo/db/range_deleter.h
src/mongo/db/range_deleter_db_env.cpp (mongod and tools)
src/mongo/db/range_deleter_db_env.h
src/mongo/db/range_deleter_mock_env.cpp (mongod and tools)
src/mongo/db/range_deleter_mock_env.h
src/mongo/db/range_deleter_service.cpp (mongod and tools)
src/mongo/db/range_deleter_service.h
src/mongo/db/range_deleter_stat_test.cpp (not built in anywhere)
src/mongo/db/range_deleter_stats.cpp (mongod and tools)
src/mongo/db/range_deleter_stats.h
src/mongo/db/range_deleter_test.cpp (not built in anywhere)
src/mongo/db/range_preserver.h

# Utilities for comparing ranges. Useful because our sharding is range based.
## okay, but why in s/ ? only used by sharding? seems weird that something
## general like range arith is only in s/ but the more specific delete-range
## isn't.
src/mongo/s/range_arithmetic.cpp (mongod, mongos, and tools)
src/mongo/s/range_arithmetic.h
src/mongo/s/range_arithmetic_test.cpp (not built in anywhere)

# Contains metadata about a collection, particularly for sharding. The MetadataLoader populates new
# CollectionMetadata objects from config server data.

src/mongo/s/collection_metadata.cpp (mongod and tools)
src/mongo/s/collection_metadata.h
src/mongo/s/collection_metadata_test.cpp (not built in anywhere)
src/mongo/s/metadata_loader.cpp (mongod and tools)
src/mongo/s/metadata_loader.h
src/mongo/s/metadata_loader_test.cpp (not built in anywhere)

# Code to upgrade config server metadata

src/mongo/s/config_upgrade.cpp (mongos)
src/mongo/s/config_upgrade.h
src/mongo/s/config_upgrade_helpers.cpp (mongos)
src/mongo/s/config_upgrade_helpers.h
src/mongo/s/config_upgrade_v0_to_v5.cpp (mongos)
src/mongo/s/config_upgrade_v4_to_v5.cpp (mongos)

# Distributed lock (lock on the config servers from mongos, i.e. "balancer lock")

src/mongo/client/distlock.cpp (mongod, mongos, and tools)
src/mongo/client/distlock.h
src/mongo/client/distlock_test.cpp (mongod and tools)

# Parser for fields in a BSON object. Meant to help enforce a schema on a BSON object.

src/mongo/db/field_parser-inl.h
src/mongo/db/field_parser.cpp (mongod, mongos, and tools)
src/mongo/db/field_parser.h
src/mongo/db/field_parser_test.cpp (not built in anywhere)

# "Schema" for config server metadata. These classes contain structural class definitions for what
# we expect to find on the config server. They use the field parser above to convert BSON fields
# into C++ members.

src/mongo/s/type_changelog.cpp (mongod, mongos, and tools)
src/mongo/s/type_changelog.h
src/mongo/s/type_changelog_test.cpp (not built in anywhere)
src/mongo/s/type_chunk.cpp (mongod, mongos, and tools)
src/mongo/s/type_chunk.h
src/mongo/s/type_chunk_test.cpp (not built in anywhere)
src/mongo/s/type_collection.cpp (mongod, mongos, and tools)
src/mongo/s/type_collection.h
src/mongo/s/type_collection_test.cpp (not built in anywhere)
src/mongo/s/type_config_version.cpp (mongod, mongos, and tools)
src/mongo/s/type_config_version.h
src/mongo/s/type_config_version_test.cpp (not built in anywhere)
src/mongo/s/type_database.cpp (mongod, mongos, and tools)
src/mongo/s/type_database.h
src/mongo/s/type_database_test.cpp (not built in anywhere)
src/mongo/s/type_lockpings.cpp (mongod, mongos, and tools)
src/mongo/s/type_lockpings.h
src/mongo/s/type_lockpings_test.cpp (not built in anywhere)
src/mongo/s/type_locks.cpp (mongod, mongos, and tools)
src/mongo/s/type_locks.h
src/mongo/s/type_locks_test.cpp (not built in anywhere)
src/mongo/s/type_mongos.cpp (mongod, mongos, and tools)
src/mongo/s/type_mongos.h
src/mongo/s/type_mongos_test.cpp (not built in anywhere)
src/mongo/s/type_settings.cpp (mongod, mongos, and tools)
src/mongo/s/type_settings.h
src/mongo/s/type_settings_test.cpp (not built in anywhere)
src/mongo/s/type_shard.cpp (mongod, mongos, and tools)
src/mongo/s/type_shard.h
src/mongo/s/type_shard_test.cpp (not built in anywhere)
src/mongo/s/type_tags.cpp (mongod, mongos, and tools)
src/mongo/s/type_tags.h
src/mongo/s/type_tags_test.cpp (not built in anywhere)

# Bizarre legacy sharding code.
#
# From writeback_listener.h
# "The writeback listener takes back write attempts that were made against a wrong shard.
# (Wrong here in the sense that the target chunk moved before this mongos had a chance to
# learn so.) It is responsible for reapplying these writes to the correct shard."
#
# So basically, the mongos sends an operation to the mongod, and the writeback listener (running on
# the mongos) says to the mongod every now and again, "yo, have I screwed up recently?". The mongod
# is then like "yeah bro, you screwed up, you wrote all these things to the wrong place and the
# writeback listener is like "thanks man" and tries to write them to the correct shard. Meanwhile
# the user is like "I'm so glad my data was written". This should go away because of the new write
# commands.
## rofl
src/mongo/s/writeback_listener.cpp (mongos)
src/mongo/s/writeback_listener.h

# mongod component of writeback listener

src/mongo/s/d_writeback.cpp (mongod and tools)
src/mongo/s/d_writeback.h

# Sharding code? TODO: verify that this is all sharding related and document the architecture.

src/mongo/s/balance.cpp (mongos)
src/mongo/s/balance.h
src/mongo/s/balancer_policy.cpp (mongos)
src/mongo/s/balancer_policy.h
src/mongo/s/balancer_policy_tests.cpp (not built in anywhere)
src/mongo/s/bson_serializable.h
src/mongo/s/chunk.cpp (mongod, mongos, and tools)
src/mongo/s/chunk.h
src/mongo/s/chunk_diff-inl.cpp (not built in anywhere)
src/mongo/s/chunk_diff.h
src/mongo/s/chunk_diff_test.cpp (not built in anywhere)
src/mongo/s/chunk_manager_targeter.cpp (mongod, mongos, and tools)
src/mongo/s/chunk_manager_targeter.h
src/mongo/s/chunk_version.h
src/mongo/s/chunk_version_test.cpp (not built in anywhere)
src/mongo/s/cluster_client_internal.cpp (mongos)
src/mongo/s/cluster_client_internal.h
src/mongo/s/cluster_write.cpp (mongod, mongos, and tools)
src/mongo/s/cluster_write.h
src/mongo/s/commands/cluster_merge_chunks_cmd.cpp (mongos)
src/mongo/s/config.cpp (mongod, mongos, and tools)
src/mongo/s/config.h
src/mongo/s/config_server_checker_service.cpp (mongod, mongos, and tools)
src/mongo/s/config_server_checker_service.h
src/mongo/s/config_server_tests.cpp (not built in anywhere)
src/mongo/s/cursors.cpp (mongos)
src/mongo/s/cursors.h
src/mongo/s/d_logic.cpp (mongod and tools)
src/mongo/s/d_logic.h
src/mongo/s/d_merge.cpp (mongod and tools)
src/mongo/s/d_merge.h
src/mongo/s/d_migrate.cpp (mongod and tools)
src/mongo/s/d_split.cpp (mongod and tools)
src/mongo/s/d_state.cpp (mongod and tools)
src/mongo/s/dbclient_multi_command.cpp (mongod, mongos, and tools)
src/mongo/s/dbclient_multi_command.h
src/mongo/s/dbclient_shard_resolver.cpp (mongod, mongos, and tools)
src/mongo/s/dbclient_shard_resolver.h
src/mongo/s/default_version.cpp (mongod and tools)
src/mongo/s/grid.cpp (mongod, mongos, and tools)
src/mongo/s/grid.h
src/mongo/s/mock_multi_command.h
src/mongo/s/mock_ns_targeter.h
src/mongo/s/mock_shard_resolver.h
src/mongo/s/mongo_version_range.cpp (mongod, mongos, and tools)
src/mongo/s/mongo_version_range.h
src/mongo/s/mongo_version_range_test.cpp (not built in anywhere)
src/mongo/s/mongos_persistence_stubs.cpp (mongos)
src/mongo/s/multi_command_dispatch.h
src/mongo/s/ns_targeter.h
src/mongo/s/request.cpp (mongos)
src/mongo/s/request.h
src/mongo/s/shard.cpp (mongod, mongos, and tools)
src/mongo/s/shard.h
src/mongo/s/shard_conn_test.cpp (not built in anywhere)
src/mongo/s/shard_key_pattern.cpp (mongod, mongos, and tools)
src/mongo/s/shard_key_pattern.h
src/mongo/s/shard_resolver.h
src/mongo/s/shard_test.cpp (not built in anywhere)
src/mongo/s/shardconnection.cpp (mongod, mongos, and tools)
src/mongo/s/shardkey.cpp (mongod, mongos, and tools)
src/mongo/s/shardkey.h
src/mongo/s/stale_exception.h
src/mongo/s/strategy.cpp (mongos)
src/mongo/s/strategy.h
src/mongo/s/strategy_shard.cpp (mongos)
src/mongo/s/strategy_single.cpp (mongos)
src/mongo/s/version_manager.cpp (mongos)
src/mongo/s/version_manager.h
src/mongo/s/version_mongos.cpp (mongos)
src/mongo/s/version_mongos.h


###### tools ######


# Tools and tool options. For most tools, just prepend "mongo" to get the name of the tool the file
# is for. For example, "bridge.cpp" is the main for "mongobridge".

src/mongo/tools/bridge.cpp (tools)
src/mongo/tools/bsondump.cpp (tools)
src/mongo/tools/bsondump_options.cpp (tools)
src/mongo/tools/bsondump_options.h
src/mongo/tools/bsondump_options_init.cpp (tools)
src/mongo/tools/bsondump_options_test.cpp (not built in anywhere)
src/mongo/tools/dump.cpp (tools)
src/mongo/tools/export.cpp (tools)
src/mongo/tools/files.cpp (tools)
src/mongo/tools/import.cpp (tools)
src/mongo/tools/mongobridge_options.cpp (tools)
src/mongo/tools/mongobridge_options.h
src/mongo/tools/mongobridge_options_init.cpp (tools)
src/mongo/tools/mongobridge_options_test.cpp (not built in anywhere)
src/mongo/tools/mongodump_options.cpp (tools)
src/mongo/tools/mongodump_options.h
src/mongo/tools/mongodump_options_init.cpp (tools)
src/mongo/tools/mongodump_options_test.cpp (not built in anywhere)
src/mongo/tools/mongoexport_options.cpp (tools)
src/mongo/tools/mongoexport_options.h
src/mongo/tools/mongoexport_options_init.cpp (tools)
src/mongo/tools/mongoexport_options_test.cpp (not built in anywhere)
src/mongo/tools/mongofiles_options.cpp (tools)
src/mongo/tools/mongofiles_options.h
src/mongo/tools/mongofiles_options_init.cpp (tools)
src/mongo/tools/mongofiles_options_test.cpp (not built in anywhere)
src/mongo/tools/mongoimport_options.cpp (tools)
src/mongo/tools/mongoimport_options.h
src/mongo/tools/mongoimport_options_init.cpp (tools)
src/mongo/tools/mongoimport_options_test.cpp (not built in anywhere)
src/mongo/tools/mongooplog_options.cpp (tools)
src/mongo/tools/mongooplog_options.h
src/mongo/tools/mongooplog_options_init.cpp (tools)
src/mongo/tools/mongooplog_options_test.cpp (not built in anywhere)
src/mongo/tools/mongorestore_options.cpp (tools)
src/mongo/tools/mongorestore_options.h
src/mongo/tools/mongorestore_options_init.cpp (tools)
src/mongo/tools/mongorestore_options_test.cpp (not built in anywhere)
src/mongo/tools/mongostat_options.cpp (tools)
src/mongo/tools/mongostat_options.h
src/mongo/tools/mongostat_options_init.cpp (tools)
src/mongo/tools/mongostat_options_test.cpp (not built in anywhere)
src/mongo/tools/mongotop_options.cpp (tools)
src/mongo/tools/mongotop_options.h
src/mongo/tools/mongotop_options_init.cpp (tools)
src/mongo/tools/mongotop_options_test.cpp (not built in anywhere)
src/mongo/tools/oplog.cpp (tools)
src/mongo/tools/restore.cpp (tools)
src/mongo/tools/sniffer.cpp (tools)
src/mongo/tools/stat.cpp (tools)
src/mongo/tools/stat_util.cpp (tools)
src/mongo/tools/stat_util.h
src/mongo/tools/tool.cpp (tools)
src/mongo/tools/tool.h
src/mongo/tools/tool_logger.cpp (tools)
src/mongo/tools/tool_logger.h
src/mongo/tools/tool_options.cpp (tools)
src/mongo/tools/tool_options.h
src/mongo/tools/top.cpp (tools)


###### unit_tests ######


# Unittest framework (for both old style dbtests and new style tests)

src/mongo/unittest/crutch.cpp (not built in anywhere)
src/mongo/unittest/fixture_test.cpp (not built in anywhere)
src/mongo/unittest/temp_dir.cpp (not built in anywhere)
src/mongo/unittest/temp_dir.h
src/mongo/unittest/temp_dir_test.cpp (not built in anywhere)
src/mongo/unittest/unittest-inl.h
src/mongo/unittest/unittest.cpp (not built in anywhere)
src/mongo/unittest/unittest.h
src/mongo/unittest/unittest_main.cpp (not built in anywhere)
src/mongo/unittest/unittest_test.cpp (not built in anywhere)

# Old style unittests ("test" binary)

src/mongo/dbtests/accumulatortests.cpp (not built in anywhere)
src/mongo/dbtests/basictests.cpp (not built in anywhere)
src/mongo/dbtests/btreebuildertests.cpp (not built in anywhere)
src/mongo/dbtests/btreetests.cpp (not built in anywhere)
src/mongo/dbtests/btreetests.inl
src/mongo/dbtests/chunk_manager_targeter_test.cpp (not built in anywhere)
src/mongo/dbtests/chunktests.cpp (not built in anywhere)
src/mongo/dbtests/clienttests.cpp (not built in anywhere)
src/mongo/dbtests/commandtests.cpp (not built in anywhere)
src/mongo/dbtests/config_server_fixture.cpp (not built in anywhere)
src/mongo/dbtests/config_server_fixture.h
src/mongo/dbtests/config_upgrade_tests.cpp (not built in anywhere)
src/mongo/dbtests/counttests.cpp (not built in anywhere)
src/mongo/dbtests/dbclient_multi_command_test.cpp (not built in anywhere)
src/mongo/dbtests/dbhelper_tests.cpp (not built in anywhere)
src/mongo/dbtests/dbtests.cpp (not built in anywhere)
src/mongo/dbtests/dbtests.h
src/mongo/dbtests/directclienttests.cpp (not built in anywhere)
src/mongo/dbtests/documentsourcetests.cpp (not built in anywhere)
src/mongo/dbtests/documenttests.cpp (not built in anywhere)
src/mongo/dbtests/expressiontests.cpp (not built in anywhere)
src/mongo/dbtests/extsorttests.cpp (not built in anywhere)
src/mongo/dbtests/framework.cpp (not built in anywhere)
src/mongo/dbtests/framework.h
src/mongo/dbtests/framework_options.cpp (not built in anywhere)
src/mongo/dbtests/framework_options.h
src/mongo/dbtests/framework_options_init.cpp (not built in anywhere)
src/mongo/dbtests/framework_options_test.cpp (not built in anywhere)
src/mongo/dbtests/gle_test.cpp (not built in anywhere)
src/mongo/dbtests/gridfstest.cpp (not built in anywhere)
src/mongo/dbtests/indexcatalogtests.cpp (not built in anywhere)
src/mongo/dbtests/indexupdatetests.cpp (not built in anywhere)
src/mongo/dbtests/jsobjtests.cpp (not built in anywhere)
src/mongo/dbtests/jsontests.cpp (not built in anywhere)
src/mongo/dbtests/jstests.cpp (not built in anywhere)
src/mongo/dbtests/keypatterntests.cpp (not built in anywhere)
src/mongo/dbtests/macrotests.cpp (not built in anywhere)
src/mongo/dbtests/matchertests.cpp (not built in anywhere)
src/mongo/dbtests/merge_chunk_tests.cpp (not built in anywhere)
src/mongo/dbtests/mmaptests.cpp (not built in anywhere)
src/mongo/dbtests/mock/mock_conn_registry.cpp (not built in anywhere)
src/mongo/dbtests/mock/mock_conn_registry.h
src/mongo/dbtests/mock/mock_dbclient_connection.cpp (not built in anywhere)
src/mongo/dbtests/mock/mock_dbclient_connection.h
src/mongo/dbtests/mock/mock_dbclient_cursor.cpp (not built in anywhere)
src/mongo/dbtests/mock/mock_dbclient_cursor.h
src/mongo/dbtests/mock/mock_remote_db_server.cpp (not built in anywhere)
src/mongo/dbtests/mock/mock_remote_db_server.h
src/mongo/dbtests/mock/mock_replica_set.cpp (not built in anywhere)
src/mongo/dbtests/mock/mock_replica_set.h
src/mongo/dbtests/mock_dbclient_conn_test.cpp (not built in anywhere)
src/mongo/dbtests/mock_replica_set_test.cpp (not built in anywhere)
src/mongo/dbtests/namespacetests.cpp (not built in anywhere)
src/mongo/dbtests/oplogstarttests.cpp (not built in anywhere)
src/mongo/dbtests/pdfiletests.cpp (not built in anywhere)
src/mongo/dbtests/perf/perftest.cpp (not built in anywhere)
src/mongo/dbtests/perftests.cpp (not built in anywhere)
src/mongo/dbtests/pipelinetests.cpp (not built in anywhere)
src/mongo/dbtests/profile_test.cpp (not built in anywhere)
src/mongo/dbtests/query_multi_plan_runner.cpp (not built in anywhere)
src/mongo/dbtests/query_single_solution_runner.cpp (not built in anywhere)
src/mongo/dbtests/query_stage_and.cpp (not built in anywhere)
src/mongo/dbtests/query_stage_collscan.cpp (not built in anywhere)
src/mongo/dbtests/query_stage_fetch.cpp (not built in anywhere)
src/mongo/dbtests/query_stage_limit_skip.cpp (not built in anywhere)
src/mongo/dbtests/query_stage_merge_sort.cpp (not built in anywhere)
src/mongo/dbtests/query_stage_sort.cpp (not built in anywhere)
src/mongo/dbtests/query_stage_tests.cpp (not built in anywhere)
src/mongo/dbtests/querytests.cpp (not built in anywhere)
src/mongo/dbtests/queryutiltests.cpp (not built in anywhere)
src/mongo/dbtests/replica_set_monitor_test.cpp (not built in anywhere)
src/mongo/dbtests/replsettests.cpp (not built in anywhere)
src/mongo/dbtests/repltests.cpp (not built in anywhere)
src/mongo/dbtests/runner_registry.cpp (not built in anywhere)
src/mongo/dbtests/sharding.cpp (not built in anywhere)
src/mongo/dbtests/socktests.cpp (not built in anywhere)
src/mongo/dbtests/stacktests.cpp (not built in anywhere)
src/mongo/dbtests/threadedtests.cpp (not built in anywhere)
src/mongo/dbtests/updatetests.cpp (not built in anywhere)


###### utilities ######


# Code to manage paths to files.  Conversion from relative to full path within database directory as
# well as code to get the current partition (for readahead checks).

src/mongo/util/paths.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/paths.h

# Classes to help in tracking statistics

src/mongo/db/stats/counters.cpp (mongod, mongos, and tools)
src/mongo/db/stats/counters.h
src/mongo/db/stats/snapshots.cpp (mongod and tools)
src/mongo/db/stats/snapshots.h
src/mongo/db/stats/snapshots_webplugins.cpp (mongod)
src/mongo/db/stats/timer_stats.cpp (mongod, mongos, and tools)
src/mongo/db/stats/timer_stats.h
src/mongo/db/stats/top.cpp (mongod and tools)
src/mongo/db/stats/top.h

# Utilities to hash BSON elements. Used in hashed shard keys and hashed indexes.

src/mongo/db/hasher.cpp (mongod, mongos, and tools)
src/mongo/db/hasher.h
src/mongo/db/hasher_test.cpp (not built in anywhere)

# Helpers to track in progress operations. The constructor registers itself in an "in progress"
# map, and the destructor removes it.

src/mongo/db/background.cpp (mongod and tools)
src/mongo/db/background.h

# Utility to check whether a certain time interval has elapsed. Currently only used in
# d_migrate.cpp to check if we should yield.

src/mongo/util/elapsed_tracker.cpp (mongod and tools)
src/mongo/util/elapsed_tracker.h

# Helper classes to accumulate and log progress in a nice format using the
# logging system (so the logging system is only dependency)

src/mongo/util/progress_meter.cpp (mongod, mongos, and tools)
src/mongo/util/progress_meter.h

# Debug macros and gdb server helpers

src/mongo/util/debug_util.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/debug_util.h

# Library to get and set the name of the current thread. Just uses a boost::thread_specific_ptr.

src/mongo/util/concurrency/thread_name.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/concurrency/thread_name.h

# Utility library to manipulate hex strings

src/mongo/util/hex.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/hex.h

# Utilities to run jobs (threads) in the "background". You can use this to run tasks periodically.

src/mongo/util/background.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/background.h
src/mongo/util/background_job_test.cpp (not built in anywhere)

# mapFindWithDefault - looks something up in a map with a default value.

src/mongo/util/map_util.h

# These appear to be for debugging. Not used on OSX so it's hard for met to tell. Notably used in
# mmap_win.cpp (windows mmap)

src/mongo/db/memconcept.cpp (mongod and tools)
src/mongo/db/memconcept.h

# I still don't know what this was originally for, but I know we are slowly getting rid of it.

src/mongo/pch.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/pch.h

# Assertion library.

src/mongo/util/assert_util.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/assert_util.h

# Library for adding fail points into the code for testing purposes

src/mongo/util/fail_point.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/fail_point.h
src/mongo/util/fail_point_registry.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/fail_point_registry.h
src/mongo/util/fail_point_service.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/fail_point_service.h
src/mongo/util/fail_point_test.cpp (not built in anywhere)

# Helper library that you inherit from to make a class "reference counted"

src/mongo/util/intrusive_counter.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/intrusive_counter.h

# md5 hash library

src/mongo/util/md5.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/md5.h
src/mongo/util/md5.hpp
src/mongo/util/md5_test.cpp (not built in anywhere)
src/mongo/util/md5main.cpp (only built into cppclientdriver)

# Windows service

src/mongo/util/ntservice.cpp (mongod and mongos)
src/mongo/util/ntservice.h

# Utilities to hash a username + password

src/mongo/client/auth_helpers.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/client/auth_helpers.h

# Giant list of utilities that I haven't gotten to yet. TODO: document what these are for and why
# you would use them.

src/mongo/util/queue.h
src/mongo/util/ramlog.h
src/mongo/util/safe_num-inl.h
src/mongo/util/safe_num.cpp (mongod, mongos, and tools)
src/mongo/util/safe_num.h
src/mongo/util/safe_num_test.cpp (not built in anywhere)
src/mongo/util/scopeguard.h
src/mongo/util/sequence_util.h
src/mongo/util/signal_handlers.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/signal_handlers.h
src/mongo/util/stack_introspect.cpp (mongod, mongos, and tools)
src/mongo/util/stack_introspect.h
src/mongo/util/stacktrace.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/stacktrace.h
src/mongo/util/startup_test.cpp (mongod, mongos, and tools)
src/mongo/util/startup_test.h
src/mongo/util/string_map.h
src/mongo/util/string_map_internal.h
src/mongo/util/string_map_test.cpp (not built in anywhere)
src/mongo/util/stringutils.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/stringutils.h
src/mongo/util/stringutils_test.cpp (not built in anywhere)
src/mongo/util/tcmalloc_server_status_section.cpp (mongod, mongos, and tools)
src/mongo/util/text.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/text.h
src/mongo/util/text_startuptest.cpp (mongod, mongos, and tools)
src/mongo/util/text_test.cpp (not built in anywhere)
src/mongo/util/time_support.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/time_support.h
src/mongo/util/time_support_test.cpp (not built in anywhere)
src/mongo/util/timer-generic-inl.h
src/mongo/util/timer-inl.h
src/mongo/util/timer-posixclock-inl.h
src/mongo/util/timer-win32-inl.h
src/mongo/util/timer.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/timer.h
src/mongo/util/touch_pages.cpp (mongod and tools)
src/mongo/util/touch_pages.h
src/mongo/util/trace.h
src/mongo/util/unordered_fast_key_table.h
src/mongo/util/unordered_fast_key_table_internal.h
src/mongo/util/util.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/version.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/version.h
src/mongo/util/version_reporting.cpp (mongod, mongos, and tools)
src/mongo/util/version_reporting.h
src/mongo/util/version_test.cpp (not built in anywhere)
src/mongo/util/winutil.h
src/mongo/util/admin_access.h
src/mongo/util/allocator.h
src/mongo/util/array.h
src/mongo/util/base64.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/base64.h
src/mongo/util/bson_util.h
src/mongo/util/bufreader.h
src/mongo/util/checksum.h
src/mongo/util/compress.cpp (mongod and tools)
src/mongo/util/compress.h
src/mongo/util/concurrency/list.h
src/mongo/util/concurrency/mapsf.h
src/mongo/util/concurrency/msg.h
src/mongo/util/concurrency/mutex.h
src/mongo/util/concurrency/mutexdebugger.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/concurrency/mutexdebugger.h
src/mongo/util/concurrency/mvar.h
src/mongo/util/concurrency/qlock.h
src/mongo/util/concurrency/race.h
src/mongo/util/concurrency/shared_mutex_win.hpp
src/mongo/util/concurrency/simplerwlock.h
src/mongo/util/concurrency/task.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/concurrency/task.h
src/mongo/util/concurrency/thread_pool.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/concurrency/thread_pool.h
src/mongo/util/concurrency/threadlocal.h
src/mongo/util/concurrency/ticketholder.h
src/mongo/util/concurrency/value.h
src/mongo/util/descriptive_stats-inl.h
src/mongo/util/descriptive_stats.h
src/mongo/util/descriptive_stats_test.cpp (not built in anywhere)
src/mongo/util/embedded_builder.h
src/mongo/util/exception_filter_win32.cpp (mongod, mongos, and tools)
src/mongo/util/exception_filter_win32.h
src/mongo/util/exit_code.h
src/mongo/util/gcov.h
src/mongo/util/goodies.h
src/mongo/util/hashtab.h
src/mongo/util/heapcheck.h

# Platform specific code? TODO: Verify this and document what they are for.

src/mongo/platform/atomic_intrinsics.h
src/mongo/platform/atomic_intrinsics_gcc.h
src/mongo/platform/atomic_intrinsics_win32.h
src/mongo/platform/atomic_word.h
src/mongo/platform/atomic_word_test.cpp (not built in anywhere)
src/mongo/platform/backtrace.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/platform/backtrace.h
src/mongo/platform/basic.h
src/mongo/platform/bits.h
src/mongo/platform/bits_test.cpp (not built in anywhere)
src/mongo/platform/compiler.h
src/mongo/platform/compiler_gcc.h
src/mongo/platform/compiler_msvc.h
src/mongo/platform/cstdint.h
src/mongo/platform/float_utils.h
src/mongo/platform/hash_namespace.h
src/mongo/platform/posix_fadvise.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/platform/posix_fadvise.h
src/mongo/platform/process_id.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/platform/process_id.h
src/mongo/platform/process_id_test.cpp (not built in anywhere)
src/mongo/platform/random.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/platform/random.h
src/mongo/platform/random_test.cpp (not built in anywhere)
src/mongo/platform/strcasestr.cpp (mongod, mongos, and tools)
src/mongo/platform/strcasestr.h
src/mongo/platform/strtoll.h
src/mongo/platform/unordered_map.h
src/mongo/platform/unordered_set.h
src/mongo/platform/windows_basic.h
src/mongo/util/platform_init.cpp (mongod, mongos, and tools)
src/mongo/util/processinfo.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/processinfo.h
src/mongo/util/processinfo_darwin.cpp (mongod, mongos, cppclientdriver, and tools)
src/mongo/util/processinfo_test.cpp (not built in anywhere)
src/mongo/util/mongoutils/checksum.h
src/mongo/util/mongoutils/hash.h
src/mongo/util/mongoutils/html.h
src/mongo/util/mongoutils/str.h


######### legacy_code #########


# Legacy files that should go away. Global class called "d" that used to contain a bunch of mongod
# global variables.

src/mongo/db/d_globals.cpp (mongod and tools)
src/mongo/db/d_globals.h


######### dead_code #########


src/mongo/util/trace.cpp (not built in anywhere)
src/mongo/db/tests.cpp (not built in anywhere)
src/mongo/db/stats/service_stats.cpp (not built in anywhere)
src/mongo/db/stats/service_stats.h
src/mongo/util/histogram.cpp (not built in anywhere)
src/mongo/util/histogram.h
src/mongo/dbtests/histogram_test.cpp (not built in anywhere)
src/mongo/util/lruishmap.h
src/mongo/db/taskqueue.h # This is literally an entire file that is just commented out. At least they left eh "#pragma once"!
