[
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/fts/fts_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/fts/fts_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseResourcePattern(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/db/fts/fts_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/fts/fts_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/fts/fts_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/fts/fts_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/fts/fts_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::operator<<(mongo::logger::Tee*)", 
        "object": "src/mongo/db/fts/fts_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/fts/fts_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/fts/fts_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/fts/fts_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/fts/fts_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/db/fts/fts_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/fts/fts_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/fts/fts_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp", 
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::startupWarningsLog", 
        "object": "src/mongo/db/fts/fts_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::Command(mongo::StringData, bool, mongo::StringData)", 
        "object": "src/mongo/db/fts/fts_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/fts/fts_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp", 
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/fts/fts_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/fts/stop_words_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/fts/stop_words_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/fts/stop_words_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/fts/stop_words_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/fts/stop_words_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/fts/stop_words_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/fts/stop_words_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/fts/stop_words_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/fts/stop_words_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/fts/stop_words_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/fts/stop_words_test.cpp"
    }, 
    {
        "sources": [
            "src/third_party/libstemmer_c/libstemmer/libstemmer_utf8.c"
        ], 
        "symbol": "_sb_stemmer_new", 
        "object": "src/mongo/db/fts/stemmer.cpp"
    }, 
    {
        "sources": [
            "src/third_party/libstemmer_c/libstemmer/libstemmer_utf8.c"
        ], 
        "symbol": "_sb_stemmer_length", 
        "object": "src/mongo/db/fts/stemmer.cpp"
    }, 
    {
        "sources": [
            "src/third_party/libstemmer_c/libstemmer/libstemmer_utf8.c"
        ], 
        "symbol": "_sb_stemmer_delete", 
        "object": "src/mongo/db/fts/stemmer.cpp"
    }, 
    {
        "sources": [
            "src/third_party/libstemmer_c/libstemmer/libstemmer_utf8.c"
        ], 
        "symbol": "_sb_stemmer_stem", 
        "object": "src/mongo/db/fts/stemmer.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/fts/fts_util_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/fts/fts_util_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/fts/fts_util_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/hasher.cpp"
        ], 
        "symbol": "mongo::BSONElementHasher::hash64(mongo::BSONElement const&, int)", 
        "object": "src/mongo/db/fts/fts_util_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/fts/fts_util_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/fts/fts_util_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/fts/fts_util_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/fts/fts_util_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/fts/fts_util_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/fts/fts_util_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/fts/fts_util_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/fts/fts_util_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/fts/fts_util_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp", 
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/fts/fts_util_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/fts/fts_util_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/fts/fts_util_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/fts/fts_util_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/fts/fts_util_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp", 
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/fts/fts_util_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp", 
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp", 
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp", 
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::checkAuthForCommand(mongo::ClientBasic*, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::help(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&) const", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/strategy_shard.cpp"
        ], 
        "symbol": "mongo::SHARDED", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp", 
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp", 
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp", 
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/process_id.cpp", 
            "src/mongo/platform/process_id.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::ProcessId)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/client_build/mongo/buildinfo.cpp", 
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/client_build/mongo/buildinfo.cpp"
        ], 
        "symbol": "mongo::gitVersion()", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/process_id.cpp", 
            "src/mongo/platform/process_id.cpp"
        ], 
        "symbol": "mongo::ProcessId::getCurrent()", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version.cpp", 
            "src/mongo/util/version.cpp"
        ], 
        "symbol": "mongo::versionString", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/log_process_details.cpp"
        ], 
        "symbol": "mongo::logProcessDetails()", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp", 
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::getHostNameCached()", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version_reporting.cpp"
        ], 
        "symbol": "mongo::openSSLVersion(std::string const&, std::string const&)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/process_id.cpp", 
            "src/mongo/platform/process_id.cpp"
        ], 
        "symbol": "mongo::ProcessId::toString() const", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp", 
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/client_build/mongo/buildinfo.cpp", 
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/client_build/mongo/buildinfo.cpp"
        ], 
        "symbol": "mongo::sysInfo()", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp", 
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "vtable for mongo::Command", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp", 
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp", 
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::checkAuthForCommand(mongo::ClientBasic*, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::help(std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >&) const", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::getNScanned() const", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "typeinfo for mongo::Command", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::parseNs(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/get_runner.cpp"
        ], 
        "symbol": "mongo::getRunner(mongo::CanonicalQuery*, mongo::Runner**, unsigned long)", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::getNScannedObjects() const", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp", 
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/lite_parsed_query.cpp"
        ], 
        "symbol": "mongo::LiteParsedQuery::metaTextScore", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::redactForLogging(mongo::mutablebson::Document*)", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp", 
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/commands.cpp"
        ], 
        "symbol": "mongo::Command::stopIndexBuilds(std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp", 
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/canonical_query.cpp"
        ], 
        "symbol": "mongo::CanonicalQuery::canonicalize(std::string const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::BSONObj const&, long long, long long, mongo::BSONObj const&, mongo::CanonicalQuery**)", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/fts/fts_matcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/fts/fts_matcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/fts/fts_matcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp", 
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::getFieldDottedOrArray(char const*&) const", 
        "object": "src/mongo/db/fts/fts_matcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/fts/fts_matcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/fts/fts_matcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp", 
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/fts/fts_matcher.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/fts/fts_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/fts/fts_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/fts/fts_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/fts/fts_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/fts/fts_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/fts/fts_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/fts/fts_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/fts/fts_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/fts/fts_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/fts/fts_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/fts/fts_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/fts/fts_query_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_parser.cpp"
        ], 
        "symbol": "mongo::FieldParser::extract(mongo::BSONObj, mongo::BSONField<std::string> const&, std::string*, std::string*)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_parser.cpp"
        ], 
        "symbol": "mongo::FieldParser::extract(mongo::BSONObj, mongo::BSONField<mongo::Date_t> const&, mongo::Date_t*, std::string*)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_parser.cpp"
        ], 
        "symbol": "mongo::FieldParser::extract(mongo::BSONObj, mongo::BSONField<bool> const&, bool*, std::string*)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_parser.cpp"
        ], 
        "symbol": "mongo::FieldParser::extract(mongo::BSONObj, mongo::BSONField<int> const&, int*, std::string*)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp", 
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/interrupt_status_mongos.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/fts/tokenizer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/fts/tokenizer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/fts/tokenizer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/fts/tokenizer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/fts/tokenizer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/fts/tokenizer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/fts/tokenizer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/fts/tokenizer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/fts/tokenizer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/fts/tokenizer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/fts/tokenizer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/fts/tokenizer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/kill_current_op.cpp"
        ], 
        "symbol": "mongo::KillCurrentOp::checkForInterruptNoAssert()", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::killCurrentOp", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/kill_current_op.cpp"
        ], 
        "symbol": "mongo::KillCurrentOp::checkForInterrupt(bool)", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/interrupt_status_mongod.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/fts/fts_enabled.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp", 
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/fts/fts_enabled.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "typeinfo for mongo::ServerParameter", 
        "object": "src/mongo/db/fts/fts_enabled.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/fts/fts_enabled.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp", 
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/fts/fts_enabled.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp", 
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/fts/fts_enabled.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::~ServerParameter()", 
        "object": "src/mongo/db/fts/fts_enabled.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp", 
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/fts/fts_enabled.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameterSet::getGlobal()", 
        "object": "src/mongo/db/fts/fts_enabled.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::ServerParameter(mongo::ServerParameterSet*, std::string const&, bool, bool)", 
        "object": "src/mongo/db/fts/fts_enabled.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/fts/fts_enabled.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ExportedServerParameter<bool>::setFromString(std::string const&)", 
        "object": "src/mongo/db/fts/fts_enabled.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/fts/fts_language.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp", 
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/fts/fts_language.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/fts/fts_language.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp", 
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/fts/fts_language.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp", 
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/fts/fts_language.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp", 
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp", 
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp", 
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(std::string const&)", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/string_data.cpp", 
            "src/mongo/base/string_data.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::StringData const&)", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp", 
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/fts/fts_spec_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp", 
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp", 
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp", 
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp", 
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/fts/fts_matcher_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/fts/fts_language_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/fts/fts_language_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/fts/fts_language_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/fts/fts_language_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/fts/fts_language_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/fts/fts_language_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/fts/fts_language_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/fts/fts_language_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/fts/fts_language_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/fts/fts_language_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/fts/fts_language_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/fts/fts_language_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/fts/fts_index_format.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/fts/fts_index_format.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/fts/fts_index_format.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp", 
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/fts/fts_index_format.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp", 
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/fts/fts_index_format.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/fts/fts_index_format.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/fts/fts_index_format.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp", 
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/fts/fts_index_format.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp", 
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/fts/fts_index_format.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/fts/stop_words_list.cpp"
        ], 
        "symbol": "mongo::fts::loadStopWordMap(std::map<std::string, std::set<std::string, std::less<std::string>, std::allocator<std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::set<std::string, std::less<std::string>, std::allocator<std::string> > > > >*)", 
        "object": "src/mongo/db/fts/stop_words.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp", 
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/fts/stop_words.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp", 
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/fts/stop_words.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/fts/fts_spec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/fts/fts_spec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/fts/fts_spec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/fts/fts_spec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/fts/fts_spec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp", 
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::getGtLtOp(int) const", 
        "object": "src/mongo/db/fts/fts_spec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp", 
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/fts/fts_spec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::parse(mongo::StringData const&)", 
        "object": "src/mongo/db/fts/fts_spec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_ref.cpp"
        ], 
        "symbol": "mongo::FieldRef::getPart(unsigned long) const", 
        "object": "src/mongo/db/fts/fts_spec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp", 
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/fts/fts_spec.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/fts/fts_index_format_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/fts/fts_index_format_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/fts/fts_index_format_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/fts/fts_index_format_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/fts/fts_index_format_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/fts/fts_index_format_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/fts/fts_index_format_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/fts/fts_index_format_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/fts/fts_index_format_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/fts/fts_index_format_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/fts/fts_index_format_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/string_data.cpp", 
            "src/mongo/base/string_data.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::StringData const&)", 
        "object": "src/mongo/db/fts/fts_index_format_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/fts/fts_index_format_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/fts/fts_index_format_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/fts/fts_index_format_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/fts/fts_index_format_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/fts/fts_index_format_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp", 
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/fts/fts_index_format_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp", 
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/fts/fts_index_format_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/fts/stemmer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/fts/stemmer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/fts/stemmer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/fts/stemmer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/fts/stemmer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/fts/stemmer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/fts/stemmer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/fts/stemmer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/fts/stemmer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/fts/stemmer_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/fts/stemmer_test.cpp"
    }
]