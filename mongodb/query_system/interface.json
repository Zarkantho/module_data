[
    {
        "symbol": "mongo::FetchStage::FetchStage(mongo::WorkingSet*, mongo::PlanStage*, mongo::MatchExpression const*)", 
        "object": "src/mongo/db/exec/fetch.cpp", 
        "used_by": [
            "src/mongo/db/commands/dbhash.cpp", 
            "src/mongo/dbtests/query_stage_merge_sort.cpp", 
            "src/mongo/dbtests/query_stage_sort.cpp", 
            "src/mongo/dbtests/query_multi_plan_runner.cpp", 
            "src/mongo/dbtests/query_stage_fetch.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/dbhelpers.cpp", 
            "src/mongo/s/d_split.cpp", 
            "src/mongo/db/index/haystack_access_method.cpp", 
            "src/mongo/dbtests/query_single_solution_runner.cpp", 
            "src/mongo/s/d_migrate.cpp"
        ]
    }, 
    {
        "symbol": "mongo::getRunner(mongo::CanonicalQuery*, mongo::Runner**, unsigned long)", 
        "object": "src/mongo/db/query/get_runner.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp", 
            "src/mongo/db/pipeline/pipeline_d.cpp", 
            "src/mongo/db/commands/distinct.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/dbhelpers.cpp", 
            "src/mongo/db/interrupt_status_mongod.cpp", 
            "src/mongo/db/commands/mr.cpp", 
            "src/mongo/db/commands/geonear.cpp", 
            "src/mongo/db/commands/group.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DeregisterEvenIfUnderlyingCodeThrows::~DeregisterEvenIfUnderlyingCodeThrows()", 
        "object": "src/mongo/db/query/get_runner.cpp", 
        "used_by": [
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/commands/mr.cpp", 
            "src/mongo/db/commands/distinct.cpp", 
            "src/mongo/db/commands/group.cpp"
        ]
    }, 
    {
        "symbol": "mongo::SingleSolutionRunner::SingleSolutionRunner(mongo::CanonicalQuery*, mongo::QuerySolution*, mongo::PlanStage*, mongo::WorkingSet*)", 
        "object": "src/mongo/db/query/single_solution_runner.cpp", 
        "used_by": [
            "src/mongo/dbtests/runner_registry.cpp", 
            "src/mongo/dbtests/query_single_solution_runner.cpp"
        ]
    }, 
    {
        "symbol": "mongo::InternalRunner::InternalRunner(std::string const&, mongo::PlanStage*, mongo::WorkingSet*)", 
        "object": "src/mongo/db/query/internal_runner.cpp", 
        "used_by": [
            "src/mongo/s/d_split.cpp", 
            "src/mongo/db/repl/replication_server_status.cpp", 
            "src/mongo/db/commands/dbhash.cpp", 
            "src/mongo/db/commands/test_commands.cpp", 
            "src/mongo/db/catalog/index_create.cpp", 
            "src/mongo/dbtests/namespacetests.cpp", 
            "src/mongo/db/db.cpp", 
            "src/mongo/db/repl/rs_rollback.cpp", 
            "src/mongo/db/database.cpp", 
            "src/mongo/db/commands/collection_to_capped.cpp", 
            "src/mongo/db/repl/master_slave.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/catalog/index_catalog.cpp", 
            "src/mongo/db/dbhelpers.cpp", 
            "src/mongo/db/index/btree_based_builder.cpp", 
            "src/mongo/db/index/haystack_access_method.cpp", 
            "src/mongo/db/commands/validate.cpp", 
            "src/mongo/s/d_migrate.cpp"
        ]
    }, 
    {
        "symbol": "mongo::LimitStage::LimitStage(int, mongo::WorkingSet*, mongo::PlanStage*)", 
        "object": "src/mongo/db/exec/limit.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_limit_skip.cpp"
        ]
    }, 
    {
        "symbol": "mongo::fixDocumentForInsert(mongo::BSONObj const&)", 
        "object": "src/mongo/db/ops/insert.cpp", 
        "used_by": [
            "src/mongo/db/commands/write_commands/write_commands.cpp", 
            "src/mongo/dbtests/pdfiletests.cpp", 
            "src/mongo/db/commands/write_commands/batch_executor.cpp", 
            "src/mongo/db/instance.cpp"
        ]
    }, 
    {
        "symbol": "mongo::userAllowedWriteNS(mongo::StringData const&)", 
        "object": "src/mongo/db/ops/insert.cpp", 
        "used_by": [
            "src/mongo/db/instance.cpp"
        ]
    }, 
    {
        "symbol": "mongo::userAllowedWriteNS(mongo::NamespaceString const&)", 
        "object": "src/mongo/db/ops/insert.cpp", 
        "used_by": [
            "src/mongo/db/commands/write_commands/write_commands.cpp", 
            "src/mongo/db/instance.cpp"
        ]
    }, 
    {
        "symbol": "mongo::userAllowedWriteNS(mongo::StringData const&, mongo::StringData const&)", 
        "object": "src/mongo/db/ops/insert.cpp", 
        "used_by": [
            "src/mongo/db/dbcommands.cpp"
        ]
    }, 
    {
        "symbol": "mongo::MaxBytesToReturnToClientAtOnce", 
        "object": "src/mongo/db/query/new_find.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp", 
            "src/mongo/db/commands/pipeline_command.cpp"
        ]
    }, 
    {
        "symbol": "mongo::newGetMore(char const*, int, long long, mongo::CurOp&, int, bool&, bool*)", 
        "object": "src/mongo/db/query/new_find.cpp", 
        "used_by": [
            "src/mongo/db/instance.cpp"
        ]
    }, 
    {
        "symbol": "mongo::newRunQuery(mongo::Message&, mongo::QueryMessage&, mongo::CurOp&, mongo::Message&)", 
        "object": "src/mongo/db/query/new_find.cpp", 
        "used_by": [
            "src/mongo/dbtests/querytests.cpp", 
            "src/mongo/db/instance.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeVectorIterator::FieldIntervalMatcher::FieldIntervalMatcher(mongo::FieldInterval const&, mongo::BSONElement const&, bool)", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRange::operator|=(mongo::FieldRange const&)", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::OrRangeGenerator::popOrClauseSingleKey()", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/s/chunk.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeSet::toString() const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeVectorIterator::prepDive()", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeVector::FieldRangeVector(mongo::FieldRangeSet const&, mongo::BSONObj, int)", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRange::operator-=(mongo::FieldRange const&)", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldInterval::toString() const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeVector::startKey() const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeVector::endKey() const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeVector::startKeyInclusive() const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeVectorIterator::FieldIntervalMatcher::upperCmp() const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeSet::subset(mongo::BSONObj const&) const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::isSimpleIdQuery(mongo::BSONObj const&)", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/db/commands/find_and_modify.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeVectorIterator::advance(mongo::BSONObj const&)", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeSetPair::frsForIndex(mongo::NamespaceDetails const*, int) const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRange::isPointIntervalSet() const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeVectorIterator::FieldIntervalMatcher::lowerCmp() const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeSet::universalRange() const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/db/keypattern.cpp", 
            "src/mongo/dbtests/queryutiltests.cpp", 
            "src/mongo/s/chunk.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRange::universal() const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp", 
            "src/mongo/s/chunk.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeVectorIterator::CompoundRangeCounter::CompoundRangeCounter(int, int)", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeSetPair::operator&=(mongo::FieldRangeSetPair const&)", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/s/chunk.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeSetPair::operator-=(mongo::FieldRangeSet const&)", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeVector::isSingleInterval() const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRange::toString() const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeSetPair::assertValidIndex(mongo::NamespaceDetails const*, int) const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeSetPair::noNonUniversalRanges() const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRange::FieldRange(mongo::BSONElement const&, bool, bool)", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRange::intersect(mongo::FieldRange const&, bool)", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeVectorIterator::FieldRangeVectorIterator(mongo::FieldRangeVector const&, int)", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeSet::operator&=(mongo::FieldRangeSet const&)", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeSet::FieldRangeSet(char const*, mongo::BSONObj const&, bool, bool)", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeSet::getSpecial() const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/s/chunk.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeVector::toString() const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeSet::numNonUniversalRanges() const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeVector::endKeyInclusive() const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::applySkipLimit(long long, mongo::BSONObj const&)", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/s/commands_public.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeSet::operator-=(mongo::FieldRangeSet const&)", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeSetPair::toString() const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::OrRangeGenerator::OrRangeGenerator(char const*, mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/s/chunk.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldRangeSet::prefixed(std::string const&) const", 
        "object": "src/mongo/db/queryutil.cpp", 
        "used_by": [
            "src/mongo/dbtests/queryutiltests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::getScanAndOrder() const", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::scanAndOrder", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::getAllPlansAt(unsigned long) const", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::clauses", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::sizeAllPlans() const", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::sizeClauses() const", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::isMultiKey", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::isIndexBoundsSet() const", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::isIsMultiKeySet() const", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::getCursor() const", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp", 
            "src/mongo/db/commands/distinct.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::getNScannedObjects() const", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/commands/distinct.cpp", 
            "src/mongo/db/interrupt_status_mongod.cpp", 
            "src/mongo/db/commands/geonear.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::isAllPlansSet() const", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::getNScanned() const", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/commands/geonear.cpp", 
            "src/mongo/db/commands/distinct.cpp", 
            "src/mongo/db/interrupt_status_mongod.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::indexBounds", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::isCursorSet() const", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp", 
            "src/mongo/db/commands/distinct.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::isScanAndOrderSet() const", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::isClausesSet() const", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::getN() const", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/commands/distinct.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::getClausesAt(unsigned long) const", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::getIndexBounds() const", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::allPlans", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp"
        ]
    }, 
    {
        "symbol": "mongo::TypeExplain::cursor", 
        "object": "src/mongo/db/query/type_explain.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_cursor.cpp"
        ]
    }, 
    {
        "symbol": "mongo::MergeSortStage::addChild(mongo::PlanStage*)", 
        "object": "src/mongo/db/exec/merge_sort.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_merge_sort.cpp"
        ]
    }, 
    {
        "symbol": "mongo::MergeSortStage::MergeSortStage(mongo::MergeSortStageParams const&, mongo::WorkingSet*)", 
        "object": "src/mongo/db/exec/merge_sort.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_merge_sort.cpp"
        ]
    }, 
    {
        "symbol": "mongo::MultiPlanRunner::getNext(mongo::BSONObj*, mongo::DiskLoc*)", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_multi_plan_runner.cpp"
        ]
    }, 
    {
        "symbol": "mongo::MultiPlanRunner::MultiPlanRunner(mongo::CanonicalQuery*)", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_multi_plan_runner.cpp"
        ]
    }, 
    {
        "symbol": "mongo::MultiPlanRunner::~MultiPlanRunner()", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_multi_plan_runner.cpp"
        ]
    }, 
    {
        "symbol": "mongo::MultiPlanRunner::pickBestPlan(unsigned long*)", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_multi_plan_runner.cpp"
        ]
    }, 
    {
        "symbol": "mongo::MultiPlanRunner::addPlan(mongo::QuerySolution*, mongo::PlanStage*, mongo::WorkingSet*)", 
        "object": "src/mongo/db/query/multi_plan_runner.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_multi_plan_runner.cpp"
        ]
    }, 
    {
        "symbol": "mongo::SkipStage::SkipStage(int, mongo::WorkingSet*, mongo::PlanStage*)", 
        "object": "src/mongo/db/exec/skip.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_limit_skip.cpp"
        ]
    }, 
    {
        "symbol": "mongo::CollectionScan::CollectionScan(mongo::CollectionScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/db/exec/collection_scan.cpp", 
        "used_by": [
            "src/mongo/db/repl/replication_server_status.cpp", 
            "src/mongo/db/commands/dbhash.cpp", 
            "src/mongo/db/commands/test_commands.cpp", 
            "src/mongo/dbtests/namespacetests.cpp", 
            "src/mongo/dbtests/runner_registry.cpp", 
            "src/mongo/db/catalog/index_create.cpp", 
            "src/mongo/db/catalog/index_catalog.cpp", 
            "src/mongo/db/commands/validate.cpp", 
            "src/mongo/dbtests/query_stage_collscan.cpp", 
            "src/mongo/dbtests/query_multi_plan_runner.cpp", 
            "src/mongo/db/repl/rs_rollback.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/database.cpp", 
            "src/mongo/db/commands/collection_to_capped.cpp", 
            "src/mongo/db/repl/master_slave.cpp", 
            "src/mongo/db/db.cpp", 
            "src/mongo/db/dbhelpers.cpp", 
            "src/mongo/db/index/btree_based_builder.cpp", 
            "src/mongo/dbtests/query_single_solution_runner.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BSONElementIterator::BSONElementIterator()", 
        "object": "src/mongo/db/matcher/path.cpp", 
        "used_by": [
            "src/mongo/db/modules/subscription/src/audit/audit_authentication.cpp", 
            "src/mongo/db/modules/subscription/src/audit/audit_indexes_collections_databases.cpp", 
            "src/mongo/db/modules/subscription/src/audit/audit_user_management.cpp", 
            "src/mongo/db/modules/subscription/src/audit/audit_replset.cpp", 
            "src/mongo/db/modules/subscription/src/audit/audit_shutdown.cpp", 
            "src/mongo/db/modules/subscription/src/audit/audit_application_message.cpp", 
            "src/mongo/db/modules/subscription/src/audit/audit_authz_check.cpp", 
            "src/mongo/db/modules/subscription/src/audit/audit_sharding.cpp", 
            "src/mongo/db/modules/subscription/src/audit/audit_role_management.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BSONElementIterator::~BSONElementIterator()", 
        "object": "src/mongo/db/matcher/path.cpp", 
        "used_by": [
            "src/mongo/db/modules/subscription/src/audit/audit_authentication.cpp", 
            "src/mongo/db/modules/subscription/src/audit/audit_event.cpp", 
            "src/mongo/db/modules/subscription/src/audit/audit_indexes_collections_databases.cpp", 
            "src/mongo/db/modules/subscription/src/audit/audit_user_management.cpp", 
            "src/mongo/db/modules/subscription/src/audit/audit_replset.cpp", 
            "src/mongo/db/modules/subscription/src/audit/audit_shutdown.cpp", 
            "src/mongo/db/modules/subscription/src/audit/audit_application_message.cpp", 
            "src/mongo/db/modules/subscription/src/audit/audit_authz_check.cpp", 
            "src/mongo/db/modules/subscription/src/audit/audit_sharding.cpp", 
            "src/mongo/db/modules/subscription/src/audit/audit_role_management.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)", 
        "object": "src/mongo/db/matcher/path.cpp", 
        "used_by": [
            "src/mongo/db/modules/subscription/src/audit/audit_event.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BSONElementIterator::reset(mongo::ElementPath const*, mongo::BSONObj const&)", 
        "object": "src/mongo/db/matcher/path.cpp", 
        "used_by": [
            "src/mongo/db/modules/subscription/src/audit/audit_event.cpp"
        ]
    }, 
    {
        "symbol": "mongo::WorkingSetMember::WorkingSetMember()", 
        "object": "src/mongo/db/exec/working_set.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_limit_skip.cpp", 
            "src/mongo/dbtests/query_stage_sort.cpp", 
            "src/mongo/dbtests/query_stage_fetch.cpp"
        ]
    }, 
    {
        "symbol": "mongo::WorkingSetMember::~WorkingSetMember()", 
        "object": "src/mongo/db/exec/working_set.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_limit_skip.cpp", 
            "src/mongo/dbtests/query_stage_sort.cpp", 
            "src/mongo/dbtests/query_stage_fetch.cpp"
        ]
    }, 
    {
        "symbol": "mongo::WorkingSet::~WorkingSet()", 
        "object": "src/mongo/db/exec/working_set.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_multi_plan_runner.cpp", 
            "src/mongo/dbtests/runner_registry.cpp", 
            "src/mongo/dbtests/query_stage_and.cpp", 
            "src/mongo/dbtests/query_stage_fetch.cpp", 
            "src/mongo/dbtests/query_single_solution_runner.cpp", 
            "src/mongo/dbtests/query_stage_merge_sort.cpp", 
            "src/mongo/dbtests/query_stage_limit_skip.cpp", 
            "src/mongo/dbtests/query_stage_sort.cpp", 
            "src/mongo/dbtests/query_stage_collscan.cpp", 
            "src/mongo/dbtests/oplogstarttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/db/exec/working_set.cpp", 
        "used_by": [
            "src/mongo/db/repl/replication_server_status.cpp", 
            "src/mongo/db/commands/dbhash.cpp", 
            "src/mongo/db/commands/test_commands.cpp", 
            "src/mongo/dbtests/namespacetests.cpp", 
            "src/mongo/dbtests/runner_registry.cpp", 
            "src/mongo/db/catalog/index_create.cpp", 
            "src/mongo/db/catalog/index_catalog.cpp", 
            "src/mongo/dbtests/query_stage_merge_sort.cpp", 
            "src/mongo/db/commands/validate.cpp", 
            "src/mongo/dbtests/query_stage_sort.cpp", 
            "src/mongo/dbtests/query_stage_collscan.cpp", 
            "src/mongo/dbtests/query_multi_plan_runner.cpp", 
            "src/mongo/db/repl/rs_rollback.cpp", 
            "src/mongo/dbtests/query_stage_tests.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/dbtests/oplogstarttests.cpp", 
            "src/mongo/db/database.cpp", 
            "src/mongo/dbtests/query_stage_and.cpp", 
            "src/mongo/db/commands/collection_to_capped.cpp", 
            "src/mongo/s/d_split.cpp", 
            "src/mongo/dbtests/query_stage_fetch.cpp", 
            "src/mongo/db/index/haystack_access_method.cpp", 
            "src/mongo/s/d_migrate.cpp", 
            "src/mongo/db/repl/master_slave.cpp", 
            "src/mongo/db/db.cpp", 
            "src/mongo/dbtests/query_stage_limit_skip.cpp", 
            "src/mongo/db/dbhelpers.cpp", 
            "src/mongo/db/index/btree_based_builder.cpp", 
            "src/mongo/dbtests/query_single_solution_runner.cpp"
        ]
    }, 
    {
        "symbol": "mongo::WorkingSetMember::hasObj() const", 
        "object": "src/mongo/db/exec/working_set.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_fetch.cpp", 
            "src/mongo/dbtests/query_stage_sort.cpp"
        ]
    }, 
    {
        "symbol": "mongo::WorkingSetMember::getFieldDotted(std::string const&, mongo::BSONElement*) const", 
        "object": "src/mongo/db/exec/working_set.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_and.cpp", 
            "src/mongo/dbtests/query_stage_fetch.cpp", 
            "src/mongo/dbtests/query_stage_merge_sort.cpp"
        ]
    }, 
    {
        "symbol": "mongo::WorkingSet::getFlagged() const", 
        "object": "src/mongo/db/exec/working_set.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_and.cpp"
        ]
    }, 
    {
        "symbol": "mongo::WorkingSetMember::hasLoc() const", 
        "object": "src/mongo/db/exec/working_set.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_collscan.cpp", 
            "src/mongo/dbtests/query_stage_sort.cpp"
        ]
    }, 
    {
        "symbol": "mongo::EOFRunner::EOFRunner(mongo::CanonicalQuery*, std::string const&)", 
        "object": "src/mongo/db/query/eof_runner.cpp", 
        "used_by": [
            "src/mongo/db/commands/collection_to_capped.cpp", 
            "src/mongo/db/repl/replication_server_status.cpp", 
            "src/mongo/db/commands/dbhash.cpp", 
            "src/mongo/db/commands/test_commands.cpp", 
            "src/mongo/db/catalog/index_create.cpp", 
            "src/mongo/dbtests/namespacetests.cpp", 
            "src/mongo/db/db.cpp", 
            "src/mongo/db/repl/rs_rollback.cpp", 
            "src/mongo/db/database.cpp", 
            "src/mongo/db/repl/master_slave.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/catalog/index_catalog.cpp", 
            "src/mongo/db/dbhelpers.cpp", 
            "src/mongo/db/index/btree_based_builder.cpp", 
            "src/mongo/db/commands/validate.cpp"
        ]
    }, 
    {
        "symbol": "mongo::LiteParsedQuery::isTextScoreMeta(mongo::BSONElement)", 
        "object": "src/mongo/db/query/lite_parsed_query.cpp", 
        "used_by": [
            "src/mongo/client/parallel.cpp"
        ]
    }, 
    {
        "symbol": "mongo::LiteParsedQuery::parseMaxTimeMSQuery(mongo::BSONObj const&)", 
        "object": "src/mongo/db/query/lite_parsed_query.cpp", 
        "used_by": [
            "src/mongo/s/strategy_shard.cpp"
        ]
    }, 
    {
        "symbol": "mongo::LiteParsedQuery::cmdOptionMaxTimeMS", 
        "object": "src/mongo/db/query/lite_parsed_query.cpp", 
        "used_by": [
            "src/mongo/s/commands_public.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/s/chunk.cpp", 
            "src/mongo/db/pipeline/pipeline.cpp"
        ]
    }, 
    {
        "symbol": "mongo::LiteParsedQuery::metaGeoNearPoint", 
        "object": "src/mongo/db/query/lite_parsed_query.cpp", 
        "used_by": [
            "src/mongo/db/commands/geonear.cpp"
        ]
    }, 
    {
        "symbol": "mongo::LiteParsedQuery::metaGeoNearDistance", 
        "object": "src/mongo/db/query/lite_parsed_query.cpp", 
        "used_by": [
            "src/mongo/db/commands/geonear.cpp"
        ]
    }, 
    {
        "symbol": "mongo::LiteParsedQuery::parseMaxTimeMSCommand(mongo::BSONObj const&)", 
        "object": "src/mongo/db/query/lite_parsed_query.cpp", 
        "used_by": [
            "src/mongo/s/commands_admin.cpp", 
            "src/mongo/db/dbcommands.cpp"
        ]
    }, 
    {
        "symbol": "mongo::LiteParsedQuery::metaTextScore", 
        "object": "src/mongo/db/query/lite_parsed_query.cpp", 
        "used_by": [
            "src/mongo/db/interrupt_status_mongod.cpp"
        ]
    }, 
    {
        "symbol": "mongo::IndexScan::IndexScan(mongo::IndexScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/db/exec/index_scan.cpp", 
        "used_by": [
            "src/mongo/db/commands/dbhash.cpp", 
            "src/mongo/dbtests/query_stage_merge_sort.cpp", 
            "src/mongo/dbtests/query_multi_plan_runner.cpp", 
            "src/mongo/dbtests/query_stage_and.cpp", 
            "src/mongo/dbtests/query_stage_tests.cpp", 
            "src/mongo/db/dbhelpers.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/s/d_split.cpp", 
            "src/mongo/db/index/haystack_access_method.cpp", 
            "src/mongo/dbtests/query_single_solution_runner.cpp", 
            "src/mongo/s/d_migrate.cpp"
        ]
    }, 
    {
        "symbol": "mongo::MatchDetails::elemMatchKey() const", 
        "object": "src/mongo/db/matcher/match_details.cpp", 
        "used_by": [
            "src/mongo/dbtests/matchertests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::MatchDetails::MatchDetails()", 
        "object": "src/mongo/db/matcher/match_details.cpp", 
        "used_by": [
            "src/mongo/dbtests/matchertests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::MatchDetails::hasElemMatchKey() const", 
        "object": "src/mongo/db/matcher/match_details.cpp", 
        "used_by": [
            "src/mongo/dbtests/matchertests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::MatchExpressionParser::_parse(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/matcher/expression_parser.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_fetch.cpp", 
            "src/mongo/dbtests/query_stage_collscan.cpp", 
            "src/mongo/dbtests/query_multi_plan_runner.cpp", 
            "src/mongo/dbtests/query_stage_tests.cpp", 
            "src/mongo/db/modules/subscription/src/audit/audit_manager_global.cpp", 
            "src/mongo/dbtests/query_stage_and.cpp", 
            "src/mongo/db/auth/authz_manager_external_state_mock.cpp", 
            "src/mongo/db/ops/modifier_pull.cpp", 
            "src/mongo/dbtests/query_single_solution_runner.cpp"
        ]
    }, 
    {
        "symbol": "mongo::CanonicalQuery::canonicalize(std::string const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::CanonicalQuery**)", 
        "object": "src/mongo/db/query/canonical_query.cpp", 
        "used_by": [
            "src/mongo/db/commands/mr.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/pipeline/pipeline_d.cpp"
        ]
    }, 
    {
        "symbol": "mongo::CanonicalQuery::canonicalize(std::string const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::BSONObj const&, long long, long long, mongo::BSONObj const&, mongo::CanonicalQuery**)", 
        "object": "src/mongo/db/query/canonical_query.cpp", 
        "used_by": [
            "src/mongo/db/interrupt_status_mongod.cpp", 
            "src/mongo/db/commands/geonear.cpp"
        ]
    }, 
    {
        "symbol": "mongo::CanonicalQuery::canonicalize(std::string const&, mongo::BSONObj const&, mongo::CanonicalQuery**)", 
        "object": "src/mongo/db/query/canonical_query.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp", 
            "src/mongo/dbtests/oplogstarttests.cpp", 
            "src/mongo/dbtests/query_multi_plan_runner.cpp", 
            "src/mongo/dbtests/runner_registry.cpp", 
            "src/mongo/db/ops/update_driver.cpp", 
            "src/mongo/dbtests/query_single_solution_runner.cpp", 
            "src/mongo/db/dbhelpers.cpp", 
            "src/mongo/db/commands/distinct.cpp", 
            "src/mongo/db/commands/group.cpp"
        ]
    }, 
    {
        "symbol": "mongo::update(mongo::UpdateRequest const&, mongo::OpDebug*)", 
        "object": "src/mongo/db/ops/update.cpp", 
        "used_by": [
            "src/mongo/db/repl/oplog.cpp", 
            "src/mongo/db/repl/rs_rollback.cpp", 
            "src/mongo/db/commands/find_and_modify.cpp", 
            "src/mongo/db/commands/write_commands/batch_executor.cpp", 
            "src/mongo/db/repl/master_slave.cpp", 
            "src/mongo/db/dbhelpers.cpp"
        ]
    }, 
    {
        "symbol": "mongo::applyUpdateOperators(mongo::BSONObj const&, mongo::BSONObj const&)", 
        "object": "src/mongo/db/ops/update.cpp", 
        "used_by": [
            "src/mongo/db/namespace_details.cpp"
        ]
    }, 
    {
        "symbol": "mongo::update(mongo::UpdateRequest const&, mongo::OpDebug*, mongo::UpdateDriver*)", 
        "object": "src/mongo/db/ops/update.cpp", 
        "used_by": [
            "src/mongo/db/instance.cpp"
        ]
    }, 
    {
        "symbol": "mongo::AndSortedStage::AndSortedStage(mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/db/exec/and_sorted.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_and.cpp"
        ]
    }, 
    {
        "symbol": "mongo::AndSortedStage::addChild(mongo::PlanStage*)", 
        "object": "src/mongo/db/exec/and_sorted.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_and.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Projection::init(mongo::BSONObj const&)", 
        "object": "src/mongo/db/projection.cpp", 
        "used_by": [
            "src/mongo/db/commands/find_and_modify.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Projection::transform(mongo::BSONObj const&, mongo::MatchDetails const*) const", 
        "object": "src/mongo/db/projection.cpp", 
        "used_by": [
            "src/mongo/db/commands/find_and_modify.cpp"
        ]
    }, 
    {
        "symbol": "mongo::AndHashStage::AndHashStage(mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/db/exec/and_hash.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_and.cpp"
        ]
    }, 
    {
        "symbol": "mongo::AndHashStage::addChild(mongo::PlanStage*)", 
        "object": "src/mongo/db/exec/and_hash.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_and.cpp"
        ]
    }, 
    {
        "symbol": "mongo::OplogStart::_backwardsScanTime", 
        "object": "src/mongo/db/exec/oplogstart.cpp", 
        "used_by": [
            "src/mongo/dbtests/oplogstarttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::OplogStart::OplogStart(std::string const&, mongo::MatchExpression*, mongo::WorkingSet*)", 
        "object": "src/mongo/db/exec/oplogstart.cpp", 
        "used_by": [
            "src/mongo/dbtests/oplogstarttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::SortStage::SortStage(mongo::SortStageParams const&, mongo::WorkingSet*, mongo::PlanStage*)", 
        "object": "src/mongo/db/exec/sort.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_sort.cpp"
        ]
    }, 
    {
        "symbol": "mongo::PlanCache::clear()", 
        "object": "src/mongo/db/query/plan_cache.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection_info_cache.cpp"
        ]
    }, 
    {
        "symbol": "mongo::PlanCache::~PlanCache()", 
        "object": "src/mongo/db/query/plan_cache.cpp", 
        "used_by": [
            "src/mongo/db/structure/collection.cpp"
        ]
    }, 
    {
        "symbol": "mongo::PlanExecutor::PlanExecutor(mongo::WorkingSet*, mongo::PlanStage*)", 
        "object": "src/mongo/db/query/plan_executor.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_tests.cpp", 
            "src/mongo/dbtests/query_stage_sort.cpp", 
            "src/mongo/dbtests/query_stage_merge_sort.cpp", 
            "src/mongo/dbtests/query_stage_collscan.cpp"
        ]
    }, 
    {
        "symbol": "mongo::PlanExecutor::getNext(mongo::BSONObj*, mongo::DiskLoc*)", 
        "object": "src/mongo/db/query/plan_executor.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_tests.cpp", 
            "src/mongo/dbtests/query_stage_sort.cpp", 
            "src/mongo/dbtests/query_stage_merge_sort.cpp", 
            "src/mongo/dbtests/query_stage_collscan.cpp"
        ]
    }, 
    {
        "symbol": "mongo::PlanExecutor::~PlanExecutor()", 
        "object": "src/mongo/db/query/plan_executor.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_tests.cpp", 
            "src/mongo/dbtests/query_stage_sort.cpp", 
            "src/mongo/dbtests/query_stage_merge_sort.cpp", 
            "src/mongo/dbtests/query_stage_collscan.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Matcher2::matches(mongo::BSONObj const&, mongo::MatchDetails*) const", 
        "object": "src/mongo/db/matcher/matcher.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_match.cpp", 
            "src/mongo/db/curop.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/dbtests/matchertests.cpp", 
            "src/mongo/client/parallel.cpp", 
            "src/mongo/tools/restore.cpp", 
            "src/mongo/tools/tool.cpp", 
            "src/mongo/db/commands/apply_ops.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Matcher2::Matcher2(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/matcher/matcher.cpp", 
        "used_by": [
            "src/mongo/db/pipeline/document_source_match.cpp", 
            "src/mongo/db/curop.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/dbtests/matchertests.cpp", 
            "src/mongo/client/parallel.cpp", 
            "src/mongo/tools/restore.cpp", 
            "src/mongo/tools/tool.cpp", 
            "src/mongo/db/commands/apply_ops.cpp"
        ]
    }, 
    {
        "symbol": "mongo::MockStage::pushBack(mongo::WorkingSetMember const&)", 
        "object": "src/mongo/db/exec/mock_stage.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_limit_skip.cpp", 
            "src/mongo/dbtests/query_stage_sort.cpp", 
            "src/mongo/dbtests/query_stage_fetch.cpp"
        ]
    }, 
    {
        "symbol": "mongo::MockStage::MockStage(mongo::WorkingSet*)", 
        "object": "src/mongo/db/exec/mock_stage.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_limit_skip.cpp", 
            "src/mongo/dbtests/query_stage_sort.cpp", 
            "src/mongo/dbtests/query_stage_fetch.cpp"
        ]
    }, 
    {
        "symbol": "mongo::MockStage::pushBack(mongo::PlanStage::StageState)", 
        "object": "src/mongo/db/exec/mock_stage.cpp", 
        "used_by": [
            "src/mongo/dbtests/query_stage_limit_skip.cpp"
        ]
    }, 
    {
        "symbol": "mongo::runCount(char const*, mongo::BSONObj const&, std::string&, int&)", 
        "object": "src/mongo/db/ops/count.cpp", 
        "used_by": [
            "src/mongo/dbtests/counttests.cpp", 
            "src/mongo/db/dbcommands.cpp", 
            "src/mongo/db/instance.cpp"
        ]
    }, 
    {
        "symbol": "mongo::deleteObjects(mongo::StringData const&, mongo::BSONObj, bool, bool, bool)", 
        "object": "src/mongo/db/ops/delete.cpp", 
        "used_by": [
            "src/mongo/db/ttl.cpp", 
            "src/mongo/db/repl/rs_rollback.cpp", 
            "src/mongo/db/database.cpp", 
            "src/mongo/db/commands/write_commands/batch_executor.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/db/repl/oplog.cpp", 
            "src/mongo/db/commands/find_and_modify.cpp", 
            "src/mongo/db/catalog/index_catalog.cpp", 
            "src/mongo/db/dbhelpers.cpp"
        ]
    }
]