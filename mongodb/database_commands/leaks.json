[
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::shutdown()", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::initThread(char const*, mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::DurableInterface::_impl", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::go()", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::~BackgroundJob()", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::fsync", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::MongoFile::flushAll(bool)", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::downgrade()", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::isLocked()", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "typeinfo for mongo::BackgroundJob", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::BackgroundJob(bool)", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/commands/fsync.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceExceptions", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "typeinfo for mongo::ServerParameter", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp", 
            "src/mongo/s/mongos_persistence_stubs.cpp"
        ], 
        "symbol": "mongo::setJournalCommitInterval(unsigned int)", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::getParameter", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::MsgAssertionException", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options_helpers.cpp", 
            "src/mongo/db/sorter/sorter_test.cpp"
        ], 
        "symbol": "mongo::isMongos()", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<int>(mongo::StringData const&, int, int*)", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::_maxFailedChecks", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/ssl_manager.cpp"
        ], 
        "symbol": "mongo::sslGlobalParams", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::~ServerParameter()", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::ServerParameter(mongo::ServerParameterSet*, std::string const&, bool, bool)", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ExportedServerParameter<bool>::setFromString(std::string const&)", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::setParameter", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::MsgAssertionException", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::ServerParameter(mongo::ServerParameterSet*, std::string const&)", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp", 
            "src/mongo/s/mongos_persistence_stubs.cpp"
        ], 
        "symbol": "mongo::getJournalCommitInterval()", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameterSet::getGlobal()", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp", 
            "src/mongo/s/mongos_persistence_stubs.cpp"
        ], 
        "symbol": "mongo::isJournalingEnabled()", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/commands/parameters.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_service.cpp"
        ], 
        "symbol": "mongo::getGlobalFailPointRegistry()", 
        "object": "src/mongo/db/commands/fail_point_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point_registry.cpp"
        ], 
        "symbol": "mongo::FailPointRegistry::getFailPoint(std::string const&) const", 
        "object": "src/mongo/db/commands/fail_point_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/fail_point_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/fail_point_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/fail_point_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::setMode(mongo::FailPoint::Mode, unsigned int, mongo::BSONObj const&)", 
        "object": "src/mongo/db/commands/fail_point_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/commands/fail_point_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/fail_point_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/fail_point.cpp"
        ], 
        "symbol": "mongo::FailPoint::toBSON() const", 
        "object": "src/mongo/db/commands/fail_point_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/fail_point_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/commands/fail_point_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/fail_point_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/replication_server_status.cpp"
        ], 
        "symbol": "mongo::replSettings", 
        "object": "src/mongo/db/commands/oplog_note.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/commands/oplog_note.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/util/bson_extract.cpp"
        ], 
        "symbol": "mongo::bsonExtractTypedField(mongo::BSONObj const&, mongo::StringData const&, mongo::BSONType, mongo::BSONElement*)", 
        "object": "src/mongo/db/commands/oplog_note.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/oplog_note.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::appendOplogNote", 
        "object": "src/mongo/db/commands/oplog_note.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/oplog_note.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/oplog_note.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/oplog.cpp"
        ], 
        "symbol": "mongo::logOpComment(mongo::BSONObj const&)", 
        "object": "src/mongo/db/commands/oplog_note.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/commands/oplog_note.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/oplog_note.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnResource(mongo::ResourcePattern const&, mongo::ActionType)", 
        "object": "src/mongo/db/commands/oplog_note.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/commands/oplog_note.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/oplog_note.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/oplog_note.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/grid.cpp"
        ], 
        "symbol": "mongo::Grid::getDBConfig(mongo::StringData const&, bool, std::string const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardedConnectionInfo::addHook()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/parallel.cpp"
        ], 
        "symbol": "mongo::ParallelSortClusteredCursor::ParallelSortClusteredCursor(std::set<mongo::ServerAndQuery, std::less<mongo::ServerAndQuery>, std::allocator<mongo::ServerAndQuery> > const&, std::string const&, mongo::Query const&, int, mongo::BSONObj const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/master_slave.cpp"
        ], 
        "symbol": "mongo::replAllDead", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::IndexIterator::next()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardconnection.cpp"
        ], 
        "symbol": "mongo::ShardConnection::forgetNS(std::string const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::killCurrentOp", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::ClientCursorPin(long long)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBRead::DBRead(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::_finishInit()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::KeyPattern(mongo::BSONObj const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/collection_metadata.cpp"
        ], 
        "symbol": "mongo::CollectionMetadata::keyBelongsToMe(mongo::BSONObj const&) const", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/canonical_query.cpp"
        ], 
        "symbol": "mongo::CanonicalQuery::canonicalize(std::string const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::CanonicalQuery**)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::needCollectionMetadata(std::string const&) const", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::getChunkManager(std::string const&, bool, bool)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs.cpp"
        ], 
        "symbol": "mongo::theReplSet", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::TempRelease::TempRelease()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/kill_current_op.cpp"
        ], 
        "symbol": "mongo::KillCurrentOp::checkForInterrupt(bool)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::DurableInterface::_impl", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::insertDocument(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/replication_server_status.cpp"
        ], 
        "symbol": "mongo::replSettings", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/progress_meter.cpp"
        ], 
        "symbol": "mongo::ProgressMeter::hit(int)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::WriteContext::WriteContext(std::string const&, std::string const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/oplog.cpp"
        ], 
        "symbol": "mongo::logOp(char const*, char const*, mongo::BSONObj const&, mongo::BSONObj*, bool*, bool, mongo::BSONObj const*)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetDB(std::string const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/grid.cpp"
        ], 
        "symbol": "mongo::grid", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::wasserted(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::count(std::string const&, mongo::BSONObj const&, int, int, int)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::shardingState", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::TempRelease::~TempRelease()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/scripting/engine.cpp"
        ], 
        "symbol": "mongo::globalScriptEngine", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::getCollectionMetadata(std::string const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::runCommand(std::string const&, mongo::BSONObj const&, mongo::BSONObj&, int)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::nsGetCollection(std::string const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/parallel.cpp"
        ], 
        "symbol": "mongo::ParallelSortClusteredCursor::more()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woSortOrder(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs.cpp"
        ], 
        "symbol": "mongo::replSet", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/get_runner.cpp"
        ], 
        "symbol": "mongo::ScopedRunnerRegistration::~ScopedRunnerRegistration()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardedConnectionInfo::get(bool)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBRead::~DBRead()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::getAuthenticatedUserNamesToken()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::exists(std::string const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::ClientCursor(std::string const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/get_runner.cpp"
        ], 
        "symbol": "mongo::ScopedRunnerRegistration::ScopedRunnerRegistration(mongo::Runner*)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::exception const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::nested()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/parallel.cpp"
        ], 
        "symbol": "mongo::ParallelSortClusteredCursor::~ParallelSortClusteredCursor()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::isLocked()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::query(std::string const&, mongo::Query, int, int, mongo::BSONObj const*, int, int)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::setMessage(char const*, std::string, unsigned long long, int)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::IndexIterator::more()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::upsert(std::string const&, mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::findOne(mongo::StringData const&, mongo::BSONObj const&, mongo::BSONObj&, bool)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/scripting/engine.cpp"
        ], 
        "symbol": "mongo::ScriptEngine::getPooledScope(std::string const&, std::string const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/parallel.cpp"
        ], 
        "symbol": "mongo::ParallelSortClusteredCursor::init()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/parallel.cpp"
        ], 
        "symbol": "mongo::ParallelSortClusteredCursor::next()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::IndexIterator::IndexIterator(mongo::IndexCatalog const*, bool)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp", 
            "src/mongo/db/client.cpp", 
            "src/mongo/client/clientAndShell.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getCurrent()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::DBWrite(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/get_runner.cpp"
        ], 
        "symbol": "mongo::getRunner(mongo::CanonicalQuery*, mongo::Runner**, unsigned long)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::createCollection(mongo::StringData const&, bool, mongo::BSONObj const*, bool)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::isSharded(std::string const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::~ClientCursorPin()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::internal", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::deleteUnderlying()", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::createIndex(mongo::BSONObj, bool, mongo::IndexCatalog::ShutdownBehavior)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::extractSingleKey(mongo::BSONObj const&) const", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/db/commands/mr.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/logfile.cpp"
        ], 
        "symbol": "mongo::LogFile::~LogFile()", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/alignedbuilder.cpp"
        ], 
        "symbol": "mongo::AlignedBuilder::kill()", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/operations.cpp"
        ], 
        "symbol": "boost::filesystem3::detail::remove(boost::filesystem3::path const&, boost::system::error_code*)", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur_journal.cpp"
        ], 
        "symbol": "mongo::dur::getJournalDir()", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/logfile.cpp"
        ], 
        "symbol": "mongo::LogFile::synchronousAppend(void const*, unsigned long)", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/logfile.cpp"
        ], 
        "symbol": "mongo::LogFile::LogFile(std::string const&, bool)", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::errnoWithDescription(int)", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/filesystem/v3/src/path.cpp"
        ], 
        "symbol": "boost::filesystem3::path::operator/=(char const*)", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/alignedbuilder.cpp"
        ], 
        "symbol": "mongo::AlignedBuilder::AlignedBuilder(unsigned int)", 
        "object": "src/mongo/db/dbcommands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/driverHelpers.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/driverHelpers.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/driverHelpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/driverHelpers.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::getNScanned() const", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::getNScannedObjects() const", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::getN() const", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/get_runner.cpp"
        ], 
        "symbol": "mongo::ScopedRunnerRegistration::~ScopedRunnerRegistration()", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/canonical_query.cpp"
        ], 
        "symbol": "mongo::CanonicalQuery::canonicalize(std::string const&, mongo::BSONObj const&, mongo::CanonicalQuery**)", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::isCursorSet() const", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/get_runner.cpp"
        ], 
        "symbol": "mongo::ScopedRunnerRegistration::ScopedRunnerRegistration(mongo::Runner*)", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::getCursor() const", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/get_runner.cpp"
        ], 
        "symbol": "mongo::getRunner(mongo::CanonicalQuery*, mongo::Runner**, unsigned long)", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::getFieldsDotted(mongo::StringData const&, std::set<mongo::BSONElement, mongo::BSONElementCmpWithoutField, std::allocator<mongo::BSONElement> >&, bool) const", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/commands/distinct.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_cache.cpp"
        ], 
        "symbol": "mongo::SolutionCacheData::toString() const", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/canonical_query.cpp"
        ], 
        "symbol": "mongo::CanonicalQuery::canonicalize(std::string const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::CanonicalQuery**)", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::invariantFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_cache.cpp"
        ], 
        "symbol": "mongo::PlanCache::clear()", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::planCacheWrite", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_cache.cpp"
        ], 
        "symbol": "mongo::PlanCache::get(mongo::CanonicalQuery const&, mongo::CachedSolution**) const", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_cache.cpp"
        ], 
        "symbol": "mongo::CachedSolution::~CachedSolution()", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_cache.cpp"
        ], 
        "symbol": "mongo::PlanCache::remove(mongo::CanonicalQuery const&)", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::planCacheRead", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_cache.cpp"
        ], 
        "symbol": "mongo::PlanCache::getAllSolutions() const", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnResource(mongo::ResourcePattern const&, mongo::ActionType)", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection_info_cache.cpp"
        ], 
        "symbol": "mongo::CollectionInfoCache::getPlanCache() const", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/commands/plan_cache_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_lifecycle_impl.cpp"
        ], 
        "symbol": "mongo::UpdateLifecycleImpl::UpdateLifecycleImpl(bool, mongo::NamespaceString const&)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::update(std::string const&, mongo::Query, mongo::BSONObj, bool, bool)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::getGtLtOp(mongo::BSONElement const&)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update_lifecycle_impl.cpp"
        ], 
        "symbol": "vtable for mongo::UpdateLifecycleImpl", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pagefault.cpp"
        ], 
        "symbol": "mongo::PageFaultRetryableSection::~PageFaultRetryableSection()", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/update.cpp"
        ], 
        "symbol": "mongo::update(mongo::UpdateRequest const&, mongo::OpDebug*)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::remove(std::string const&, mongo::Query, int)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::getLastErrorDetailed(std::string const&, bool, bool, int, int)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pagefault.cpp"
        ], 
        "symbol": "mongo::PageFaultException::touch()", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pagefault.cpp"
        ], 
        "symbol": "mongo::PageFaultRetryableSection::PageFaultRetryableSection()", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientInterface::findOne(std::string const&, mongo::Query const&, mongo::BSONObj const*, int)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::getFilter() const", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/projection.cpp"
        ], 
        "symbol": "mongo::Projection::init(mongo::BSONObj const&)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::findOne(mongo::StringData const&, mongo::BSONObj const&, mongo::BSONObj&, bool)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::isComplex(bool*) const", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::DBWrite(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/projection.cpp"
        ], 
        "symbol": "mongo::Projection::transform(mongo::BSONObj const&, mongo::MatchDetails const*) const", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::isSimpleIdQuery(mongo::BSONObj const&)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/delete.cpp"
        ], 
        "symbol": "mongo::deleteObjects(mongo::StringData const&, mongo::BSONObj, bool, bool, bool)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/db/commands/find_and_modify.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/query_settings.cpp"
        ], 
        "symbol": "mongo::QuerySettings::clearAllowedIndices()", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/canonical_query.cpp"
        ], 
        "symbol": "mongo::CanonicalQuery::canonicalize(std::string const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::CanonicalQuery**)", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::invariantFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::planCacheHint", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/query_settings.cpp"
        ], 
        "symbol": "mongo::QuerySettings::setAllowedIndices(mongo::CanonicalQuery const&, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&)", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::Array() const", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_cache.cpp"
        ], 
        "symbol": "mongo::PlanCache::remove(mongo::CanonicalQuery const&)", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection_info_cache.cpp"
        ], 
        "symbol": "mongo::CollectionInfoCache::getQuerySettings() const", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnResource(mongo::ResourcePattern const&, mongo::ActionType)", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/query_settings.cpp"
        ], 
        "symbol": "mongo::QuerySettings::removeAllowedIndices(mongo::CanonicalQuery const&)", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/query_settings.cpp"
        ], 
        "symbol": "mongo::AllowedIndexEntry::~AllowedIndexEntry()", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection_info_cache.cpp"
        ], 
        "symbol": "mongo::CollectionInfoCache::getPlanCache() const", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/query_settings.cpp"
        ], 
        "symbol": "mongo::QuerySettings::getAllAllowedIndices() const", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/commands/hint_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::getAuthenticatedUserNamesToken()", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/scripting/engine.cpp"
        ], 
        "symbol": "mongo::ScriptEngine::getPooledScope(std::string const&, std::string const&)", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp", 
            "src/mongo/db/client.cpp", 
            "src/mongo/client/clientAndShell.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getCurrent()", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/role_graph_builtin_roles.cpp"
        ], 
        "symbol": "mongo::RoleGraph::generateUniversalPrivileges(std::vector<mongo::Privilege, std::allocator<mongo::Privilege> >*)", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/scripting/engine.cpp"
        ], 
        "symbol": "mongo::globalScriptEngine", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/db/dbeval.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/health.cpp"
        ], 
        "symbol": "mongo::rsLog", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs.cpp"
        ], 
        "symbol": "mongo::ScopedConn::keepOpen", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version.cpp"
        ], 
        "symbol": "mongo::isSameMajorVersion(char const*)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authz_documents_update_guard.cpp"
        ], 
        "symbol": "mongo::AuthzDocumentsUpdateGuard::AuthzDocumentsUpdateGuard(mongo::AuthorizationManager*)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs.cpp"
        ], 
        "symbol": "mongo::theReplSet", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::wait(unsigned int)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version.cpp"
        ], 
        "symbol": "mongo::versionArray", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::convertExceptionCode(int)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::go()", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::~BackgroundJob()", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/health.cpp"
        ], 
        "symbol": "mongo::ScopedConn::mapMutex", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::operator<<(mongo::logger::Tee*)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/security_key.cpp"
        ], 
        "symbol": "mongo::authenticateInternalUser(mongo::DBClientWithCommands*)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::upgradeSchema(int, mongo::BSONObj const&)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/health.cpp"
        ], 
        "symbol": "mongo::ReplSetImpl::findById(unsigned int) const", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::isAuthEnabled() const", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user_management_commands_parser.cpp"
        ], 
        "symbol": "mongo::auth::parseAuthSchemaUpgradeStepCommand(mongo::BSONObj const&, std::string const&, int*, bool*, mongo::BSONObj*)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientConnection", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "typeinfo for mongo::BackgroundJob", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::_numConnections", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/health.cpp"
        ], 
        "symbol": "mongo::ScopedConn::_map", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs_config.cpp"
        ], 
        "symbol": "mongo::ReplSetConfig::DEFAULT_HB_TIMEOUT", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authz_documents_update_guard.cpp"
        ], 
        "symbol": "mongo::AuthzDocumentsUpdateGuard::tryLock(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::getGlobalAuthorizationManager()", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authz_documents_update_guard.cpp"
        ], 
        "symbol": "mongo::AuthzDocumentsUpdateGuard::~AuthzDocumentsUpdateGuard()", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version.cpp"
        ], 
        "symbol": "mongo::toVersionArray(char const*)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/background.cpp"
        ], 
        "symbol": "mongo::BackgroundJob::BackgroundJob(bool)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/commands/auth_schema_upgrade_d.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::ClientCursorPin(long long)", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/new_find.cpp"
        ], 
        "symbol": "mongo::MaxBytesToReturnToClientAtOnce", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::parseCommand(std::string&, mongo::BSONObj const&, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::run(mongo::BSONObjBuilder&)", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::addRequiredPrivileges(mongo::Command*, std::string const&, mongo::BSONObj, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> >*)", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::ValueStorage::putVector(mongo::RCVector const*)", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/interrupt_status_mongod.cpp"
        ], 
        "symbol": "mongo::InterruptStatusMongod::status", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::Document::toBson() const", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::operator<<(mongo::BSONObjBuilderValueStream&, mongo::Value const&)", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::writeExplainOps() const", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::Document::toBsonWithMetaData() const", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::commandName", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::stitch()", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::getRemainingMaxTimeMicros() const", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::c() const", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "typeinfo for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursor::ClientCursor(mongo::Runner*, int, mongo::BSONObj)", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::~ClientCursorPin()", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline_d.cpp"
        ], 
        "symbol": "mongo::PipelineD::prepareCursorSource(boost::intrusive_ptr<mongo::Pipeline> const&, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/clientcursor.cpp"
        ], 
        "symbol": "mongo::ClientCursorPin::deleteUnderlying()", 
        "object": "src/mongo/db/commands/pipeline_command.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/extent_manager.cpp"
        ], 
        "symbol": "mongo::ExtentManager::getExtent(mongo::DiskLoc const&, bool) const", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::drec() const", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::killCurrentOp", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::tlogLevel", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::Record::_accessing() const", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/kill_current_op.cpp"
        ], 
        "symbol": "mongo::KillCurrentOp::checkForInterrupt(bool)", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::Date_t::toTimeT() const", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::storageSize(int*, mongo::BSONArrayBuilder*) const", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/processinfo.cpp"
        ], 
        "symbol": "mongo::ProcessInfo::systemInfo", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::storageDetails", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/processinfo_darwin.cpp"
        ], 
        "symbol": "mongo::ProcessInfo::pagesInMemory(void const*, unsigned long, std::vector<char, std::allocator<char> >*)", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::rec() const", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DeletedRecord::_accessing() const", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/extent_manager.cpp"
        ], 
        "symbol": "mongo::ExtentManager::getNextExtent(mongo::Extent*) const", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/extent_manager.cpp"
        ], 
        "symbol": "mongo::ExtentManager::getNextRecordInExtent(mongo::DiskLoc const&) const", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::asTimeT()", 
        "object": "src/mongo/db/commands/storage_details.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::appendInfo(mongo::BSONObjBuilder&)", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logCommandAuthzCheck(mongo::ClientBasic*, mongo::NamespaceString const&, mongo::mutablebson::Document const&, mongo::ErrorCodes::Error)", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "typeinfo for mongo::ServerParameter", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::getAuthorizationManager()", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::~Document()", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::connPoolSync", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::writeTo(mongo::BSONObjBuilder*) const", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForPrivileges(std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&)", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::ErrorCodes::Error) const", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::~ServerParameter()", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::isAuthEnabled() const", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::flush()", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameter::ServerParameter(mongo::ServerParameterSet*, std::string const&, bool, bool)", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ExportedServerParameter<int>::setFromString(std::string const&)", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::Document(mongo::BSONObj const&, mongo::mutablebson::Document::InPlaceMode)", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::connPoolStats", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::_numConnections", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/string_data.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::StringData const&)", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_parameters.cpp"
        ], 
        "symbol": "mongo::ServerParameterSet::getGlobal()", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/canonical_query.cpp"
        ], 
        "symbol": "mongo::CanonicalQuery::getPlanCacheKey() const", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_cache.cpp"
        ], 
        "symbol": "mongo::PlanCache::add(mongo::CanonicalQuery const&, std::vector<mongo::QuerySolution*, std::allocator<mongo::QuerySolution*> > const&, mongo::PlanRankingDecision*)", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_cache.cpp"
        ], 
        "symbol": "mongo::PlanCache::~PlanCache()", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::Array() const", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator!=(mongo::Status const&) const", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/canonical_query.cpp"
        ], 
        "symbol": "mongo::CanonicalQuery::canonicalize(std::string const&, mongo::BSONObj const&, mongo::CanonicalQuery**)", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/commands/plan_cache_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege_parser.cpp"
        ], 
        "symbol": "mongo::ParsedPrivilege::toBSON() const", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::invalidateUsersFromDB(std::string const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::viewRole", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user_management_commands_parser.cpp"
        ], 
        "symbol": "mongo::auth::parseCreateOrUpdateUserCommands(mongo::BSONObj const&, mongo::StringData const&, std::string const&, mongo::auth::CreateOrUpdateUserArgs*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logRevokeRolesFromRole(mongo::ClientBasic*, mongo::RoleName const&, std::vector<mongo::RoleName, std::allocator<mongo::RoleName> > const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::updateAuthzDocuments(mongo::NamespaceString const&, mongo::BSONObj const&, mongo::BSONObj const&, bool, bool, mongo::BSONObj const&, int*) const", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user_management_commands_parser.cpp"
        ], 
        "symbol": "mongo::auth::parseAndValidateDropAllUsersFromDatabaseCommand(mongo::BSONObj const&, std::string const&, mongo::BSONObj*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/element.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::pushBack(mongo::mutablebson::Element)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logDropAllRolesFromDatabase(mongo::ClientBasic*, mongo::StringData const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::releaseUser(mongo::User*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authz_documents_update_guard.cpp"
        ], 
        "symbol": "mongo::AuthzDocumentsUpdateGuard::AuthzDocumentsUpdateGuard(mongo::AuthorizationManager*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logCreateUser(mongo::ClientBasic*, mongo::UserName const&, bool, mongo::BSONObj const*, std::vector<mongo::RoleName, std::allocator<mongo::RoleName> > const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::revokeRole", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::lookupUser(mongo::UserName const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::rolesCollectionNamespace", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::getBSONForPrivileges(std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::mutablebson::Element)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user_management_commands_parser.cpp"
        ], 
        "symbol": "mongo::auth::parseDropRoleCommand(mongo::BSONObj const&, std::string const&, mongo::RoleName*, mongo::BSONObj*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user_management_commands_parser.cpp"
        ], 
        "symbol": "mongo::auth::parseRoleNamesFromBSONArray(mongo::BSONArray const&, mongo::StringData const&, std::vector<mongo::RoleName, std::allocator<mongo::RoleName> >*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logDropUser(mongo::ClientBasic*, mongo::UserName const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::addPrivilegeToPrivilegeVector(std::vector<mongo::Privilege, std::allocator<mongo::Privilege> >*, mongo::Privilege const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::leftChild() const", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logRevokePrivilegesFromRole(mongo::ClientBasic*, mongo::RoleName const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::getUserDescription(mongo::UserName const&, mongo::BSONObj*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::ROLE_SOURCE_FIELD_NAME", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::invalidateUserCache", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::checkAuthorizedToRevokePrivilege(mongo::Privilege const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::removeRoleDocuments(mongo::BSONObj const&, mongo::BSONObj const&, int*) const", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dropRole", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::setValueString(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::checkAuthorizedToGrantPrivilege(mongo::Privilege const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user_management_commands_parser.cpp"
        ], 
        "symbol": "mongo::auth::parseDropAllRolesFromDatabaseCommand(mongo::BSONObj const&, std::string const&, mongo::BSONObj*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::invalidateUserCache()", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::~Document()", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logRevokeRolesFromUser(mongo::ClientBasic*, mongo::UserName const&, std::vector<mongo::RoleName, std::allocator<mongo::RoleName> > const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::makeElementObject(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::invalidateUserByName(mongo::UserName const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/role_graph_builtin_roles.cpp"
        ], 
        "symbol": "mongo::RoleGraph::isBuiltinRole(mongo::RoleName const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::writeTo(mongo::BSONObjBuilder*) const", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user_management_commands_parser.cpp"
        ], 
        "symbol": "mongo::auth::parseAndValidateDropUserCommand(mongo::BSONObj const&, std::string const&, mongo::UserName*, mongo::BSONObj*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthenticatedAsUserWithRole(mongo::RoleName const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::createRole", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logDropRole(mongo::ClientBasic*, mongo::RoleName const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::authSchemaUpgrade", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedToChangeOwnCustomDataAsUser(mongo::UserName const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user_management_commands_parser.cpp"
        ], 
        "symbol": "mongo::auth::parseUsersInfoCommand(mongo::BSONObj const&, mongo::StringData const&, mongo::auth::UsersInfoArgs*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user_management_commands_parser.cpp"
        ], 
        "symbol": "mongo::auth::parseAndValidateRolePrivilegeManipulationCommands(mongo::BSONObj const&, mongo::StringData const&, std::string const&, mongo::RoleName*, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> >*, mongo::BSONObj*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege_parser.cpp"
        ], 
        "symbol": "mongo::ParsedPrivilege::ParsedPrivilege()", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logCreateRole(mongo::ClientBasic*, mongo::RoleName const&, std::vector<mongo::RoleName, std::allocator<mongo::RoleName> > const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logDropAllUsersFromDatabase(mongo::ClientBasic*, mongo::StringData const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege_parser.cpp"
        ], 
        "symbol": "mongo::ParsedPrivilege::privilegeToParsedPrivilege(mongo::Privilege const&, mongo::ParsedPrivilege*, std::string*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedToChangeOwnPasswordAsUser(mongo::UserName const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::writeAuthSchemaVersionIfNeeded()", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::ErrorCodes::Error) const", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::insertPrivilegeDocument(std::string const&, mongo::BSONObj const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::USER_DB_FIELD_NAME", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user.cpp"
        ], 
        "symbol": "mongo::User::getRoles() const", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::usersCollectionNamespace", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::changeCustomData", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::rightSibling() const", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::ROLE_NAME_FIELD_NAME", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logGrantRolesToUser(mongo::ClientBasic*, mongo::UserName const&, std::vector<mongo::RoleName, std::allocator<mongo::RoleName> > const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logUpdateRole(mongo::ClientBasic*, mongo::RoleName const&, std::vector<mongo::RoleName, std::allocator<mongo::RoleName> > const*, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/ssl_manager.cpp"
        ], 
        "symbol": "mongo::getSSLManager()", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::schemaVersion26Upgrade", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::viewUser", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user_management_commands_parser.cpp"
        ], 
        "symbol": "mongo::auth::parseRolePossessionManipulationCommands(mongo::BSONObj const&, mongo::StringData const&, std::string const&, std::string*, std::vector<mongo::RoleName, std::allocator<mongo::RoleName> >*, mongo::BSONObj*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::changePassword", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::getFieldName() const", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege_parser.cpp"
        ], 
        "symbol": "mongo::ParsedPrivilege::isValid(std::string*) const", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::getRoleDescriptionsForDB(std::string, bool, bool, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> >*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedToRevokeRole(mongo::RoleName const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::createUser", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedToGrantRole(mongo::RoleName const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnResource(mongo::ResourcePattern const&, mongo::ActionType)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user_management_commands_parser.cpp"
        ], 
        "symbol": "mongo::auth::parseCreateOrUpdateRoleCommands(mongo::BSONObj const&, mongo::StringData const&, std::string const&, mongo::auth::CreateOrUpdateRoleArgs*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::removeActions(mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::removePrivilegeDocuments(mongo::BSONObj const&, mongo::BSONObj const&, int*) const", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logUpdateUser(mongo::ClientBasic*, mongo::UserName const&, bool, mongo::BSONObj const*, std::vector<mongo::RoleName, std::allocator<mongo::RoleName> > const*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dropUser", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::USER_NAME_FIELD_NAME", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logGrantRolesToRole(mongo::ClientBasic*, mongo::RoleName const&, std::vector<mongo::RoleName, std::allocator<mongo::RoleName> > const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::queryAuthzDocument(mongo::NamespaceString const&, mongo::BSONObj const&, mongo::BSONObj const&, boost::function<void (mongo::BSONObj const&)> const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::acquireUser(mongo::UserName const&, mongo::User**)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::insertRoleDocument(mongo::BSONObj const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::schemaVersion26Final", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user_management_commands_parser.cpp"
        ], 
        "symbol": "mongo::auth::parseAndValidatePrivilegeArray(mongo::BSONArray const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> >*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::makeElementArray(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::getRoleDescription(mongo::RoleName const&, bool, mongo::BSONObj*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authz_documents_update_guard.cpp"
        ], 
        "symbol": "mongo::AuthzDocumentsUpdateGuard::tryLock(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logGrantPrivilegesToRole(mongo::ClientBasic*, mongo::RoleName const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::Document()", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp", 
            "src/mongo/db/client.cpp", 
            "src/mongo/client/clientAndShell.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getCurrent()", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/role_name.cpp"
        ], 
        "symbol": "mongo::RoleName::RoleName(mongo::StringData const&, mongo::StringData const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::getGlobalAuthorizationManager()", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::updateRoleDocument(mongo::RoleName const&, mongo::BSONObj const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::updatePrivilegeDocument(mongo::UserName const&, mongo::BSONObj const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user_name.cpp"
        ], 
        "symbol": "mongo::UserName::UserName(mongo::StringData const&, mongo::StringData const&)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authz_documents_update_guard.cpp"
        ], 
        "symbol": "mongo::AuthzDocumentsUpdateGuard::~AuthzDocumentsUpdateGuard()", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::getAuthorizationVersion()", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user_document_parser.cpp"
        ], 
        "symbol": "mongo::V2UserDocumentParser::checkValidUserDocument(mongo::BSONObj const&) const", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user_management_commands_parser.cpp"
        ], 
        "symbol": "mongo::auth::parseRolesInfoCommand(mongo::BSONObj const&, mongo::StringData const&, mongo::auth::RolesInfoArgs*)", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege_parser.cpp"
        ], 
        "symbol": "mongo::ParsedPrivilege::~ParsedPrivilege()", 
        "object": "src/mongo/db/commands/user_management_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/collection_compact.cpp"
        ], 
        "symbol": "mongo::Collection::compact(mongo::CompactOptions const*)", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_builder.cpp"
        ], 
        "symbol": "mongo::IndexBuilder::restoreIndexes(std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&)", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::CompactOptions::toString() const", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs.cpp"
        ], 
        "symbol": "mongo::isCurrentlyAReplSetPrimary()", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_builder.cpp"
        ], 
        "symbol": "mongo::IndexBuilder::killMatchingIndexBuilds(mongo::BSONObj const&)", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::isCapped() const", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::DBWrite(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/background.cpp"
        ], 
        "symbol": "mongo::BackgroundOperation::assertNoBgOpInProgForNs(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::compact", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/db/commands/compact.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/extent_manager.cpp"
        ], 
        "symbol": "mongo::ExtentManager::getExtent(mongo::DiskLoc const&, bool) const", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::touch", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::killCurrentOp", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::set_tss_data(void const*, boost::shared_ptr<boost::detail::tss_cleanup_function>, void*, bool)", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/kill_current_op.cpp"
        ], 
        "symbol": "mongo::KillCurrentOp::checkForInterrupt(bool)", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/progress_meter.cpp"
        ], 
        "symbol": "mongo::ProgressMeter::hit(int)", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/touch_pages.cpp"
        ], 
        "symbol": "mongo::touch_pages(char const*, unsigned long)", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_tss_data(void const*)", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/mmap.cpp"
        ], 
        "symbol": "mongo::LockMongoFilesShared::mmmutex", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::~disable_interruption()", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/catalog/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::idx(int, bool)", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::setMessage(char const*, std::string, unsigned long long, int)", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/catalog/namespace_index.cpp"
        ], 
        "symbol": "mongo::NamespaceIndex::details(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::interruption_point()", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::this_thread::disable_interruption::disable_interruption()", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/extent_manager.cpp"
        ], 
        "symbol": "mongo::ExtentManager::getNextExtent(mongo::Extent*) const", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/thread/src/pthread/thread.cpp"
        ], 
        "symbol": "boost::detail::get_current_thread_data()", 
        "object": "src/mongo/db/commands/touch.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/hasher.cpp"
        ], 
        "symbol": "mongo::BSONElementHasher::hash64(mongo::BSONElement const&, int)", 
        "object": "src/mongo/db/commands/hashcmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/hashcmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/commands/hashcmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/hashcmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/commands/hashcmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/matcher.cpp"
        ], 
        "symbol": "mongo::Matcher2::matches(mongo::BSONObj const&, mongo::MatchDetails*) const", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/oplog.cpp"
        ], 
        "symbol": "mongo::logOp(char const*, char const*, mongo::BSONObj const&, mongo::BSONObj*, bool*, bool, mongo::BSONObj const*)", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/role_graph_builtin_roles.cpp"
        ], 
        "symbol": "mongo::RoleGraph::generateUniversalPrivileges(std::vector<mongo::Privilege, std::allocator<mongo::Privilege> >*)", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientInterface::findOne(std::string const&, mongo::Query const&, mongo::BSONObj const*, int)", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/oplog.cpp"
        ], 
        "symbol": "mongo::applyOperation_inlock(mongo::BSONObj const&, bool, bool)", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/matcher/matcher.cpp"
        ], 
        "symbol": "mongo::Matcher2::Matcher2(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/db/commands/apply_ops.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_finish", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/internal_runner.cpp"
        ], 
        "symbol": "mongo::InternalRunner::InternalRunner(std::string const&, mongo::PlanStage*, mongo::WorkingSet*)", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/fetch.cpp"
        ], 
        "symbol": "mongo::FetchStage::FetchStage(mongo::WorkingSet*, mongo::PlanStage*, mongo::MatchExpression const*)", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::prettyHostName()", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_init", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/eof_runner.cpp"
        ], 
        "symbol": "mongo::EOFRunner::EOFRunner(mongo::CanonicalQuery*, std::string const&)", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dbHash", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/collection_scan.cpp"
        ], 
        "symbol": "mongo::CollectionScan::CollectionScan(mongo::CollectionScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::findIdIndex() const", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_append", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/index_scan.cpp"
        ], 
        "symbol": "mongo::IndexScan::IndexScan(mongo::IndexScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/catalog/namespace_index.cpp"
        ], 
        "symbol": "mongo::NamespaceIndex::getNamespaces(std::list<std::string, std::allocator<std::string> >&, bool) const", 
        "object": "src/mongo/db/commands/dbhash.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::renameCollection(mongo::StringData const&, mongo::StringData const&, bool)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::IndexIterator::next()", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::ext() const", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::userCreateNS(char const*, mongo::BSONObj, std::string&, bool, bool*)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::insertDocument(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_builder.cpp"
        ], 
        "symbol": "mongo::IndexBuilder::restoreIndexes(std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_builder.cpp"
        ], 
        "symbol": "mongo::IndexBuilder::killMatchingIndexBuilds(mongo::BSONObj const&)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/catalog/namespace_index.cpp"
        ], 
        "symbol": "mongo::NamespaceIndex::details(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::IndexIterator::more()", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::getIterator(mongo::DiskLoc const&, bool, mongo::CollectionScanParams::Direction const&) const", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::IndexIterator::IndexIterator(mongo::IndexCatalog const*, bool)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::dropCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::createCollection(mongo::StringData const&, bool, mongo::BSONObj const*, bool)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::createIndex(mongo::BSONObj, bool, mongo::IndexCatalog::ShutdownBehavior)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/db/commands/rename_collection.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::killCurrentOp", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::~DBWrite()", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/internal_runner.cpp"
        ], 
        "symbol": "mongo::InternalRunner::InternalRunner(std::string const&, mongo::PlanStage*, mongo::WorkingSet*)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalRead::GlobalRead(int)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/kill_current_op.cpp"
        ], 
        "symbol": "mongo::KillCurrentOp::checkForInterrupt(bool)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/cap.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::cappedTruncateAfter(char const*, mongo::DiskLoc, bool)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::insertDocument(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_builder.cpp"
        ], 
        "symbol": "mongo::IndexBuilder::restoreIndexes(std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalRead::~GlobalRead()", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/eof_runner.cpp"
        ], 
        "symbol": "mongo::EOFRunner::EOFRunner(mongo::CanonicalQuery*, std::string const&)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_builder.cpp"
        ], 
        "symbol": "mongo::IndexBuilder::killMatchingIndexBuilds(mongo::BSONObj const&)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/cap.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::emptyCappedCollection(char const*)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/collection_scan.cpp"
        ], 
        "symbol": "mongo::CollectionScan::CollectionScan(mongo::CollectionScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/catalog/namespace_index.cpp"
        ], 
        "symbol": "mongo::NamespaceIndex::details(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::~GlobalWrite()", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::DBWrite(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::createCollection(mongo::StringData const&, bool, mongo::BSONObj const*, bool)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/db/commands/test_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/commands/connection_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/commands/connection_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::getAuthenticatedUserNames()", 
        "object": "src/mongo/db/commands/connection_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::USER_NAME_FIELD_NAME", 
        "object": "src/mongo/db/commands/connection_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::USER_DB_FIELD_NAME", 
        "object": "src/mongo/db/commands/connection_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/connection_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp", 
            "src/mongo/db/client.cpp", 
            "src/mongo/client/clientAndShell.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getCurrent()", 
        "object": "src/mongo/db/commands/connection_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/connection_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/commands/connection_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/connection_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/connection_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/commands/connection_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/connection_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/connection_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::drec() const", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::IndexIterator::next()", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::killCurrentOp", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/internal_runner.cpp"
        ], 
        "symbol": "mongo::InternalRunner::InternalRunner(std::string const&, mongo::PlanStage*, mongo::WorkingSet*)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::tlogLevel", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::Record::_accessing() const", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/kill_current_op.cpp"
        ], 
        "symbol": "mongo::KillCurrentOp::checkForInterrupt(bool)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::ext() const", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::numIndexesReady() const", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/extent.cpp"
        ], 
        "symbol": "mongo::Extent::dump()", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::validate", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/catalog/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::quantizeAllocationSpace(int)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/eof_runner.cpp"
        ], 
        "symbol": "mongo::EOFRunner::EOFRunner(mongo::CanonicalQuery*, std::string const&)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::isCapped() const", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/collection_scan.cpp"
        ], 
        "symbol": "mongo::CollectionScan::CollectionScan(mongo::CollectionScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/extent.cpp"
        ], 
        "symbol": "mongo::Extent::validates(mongo::DiskLoc, mongo::BSONArrayBuilder*)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::getIndex(mongo::IndexDescriptor const*)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::IndexIterator::more()", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/catalog/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::quantizePowerOf2AllocationSpace(int)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/catalog/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::maxCappedDocs() const", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::rec() const", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::IndexIterator::IndexIterator(mongo::IndexCatalog const*, bool)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/bson_validate.cpp"
        ], 
        "symbol": "mongo::validateBSON(char const*, unsigned long long)", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DeletedRecord::_accessing() const", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/commands/validate.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::collStats", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::numIndexesTotal() const", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_append", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/master_slave.cpp"
        ], 
        "symbol": "mongo::replAllDead", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::ReadContext::ReadContext(std::string const&, std::string const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::IndexIterator::next()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_finish", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/optime.cpp"
        ], 
        "symbol": "mongo::OpTime::m", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::setMaxTimeMicros(unsigned long long)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::killCurrentOp", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/counters.cpp"
        ], 
        "symbol": "mongo::replOpCounters", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/optime.cpp"
        ], 
        "symbol": "mongo::OpTime::now(mongo::mutex::scoped_lock const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::ensureStarted()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::insert", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/internal_runner.cpp"
        ], 
        "symbol": "mongo::InternalRunner::InternalRunner(std::string const&, mongo::PlanStage*, mongo::WorkingSet*)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::getVersion(std::string const&) const", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::KeyPattern(mongo::BSONObj const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalRead::GlobalRead(int)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::convertToCapped", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/canonical_query.cpp"
        ], 
        "symbol": "mongo::CanonicalQuery::canonicalize(std::string const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::CanonicalQuery**)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::findIndexByPrefix(mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs.cpp"
        ], 
        "symbol": "mongo::ReplSetImpl::setMaintenanceMode(bool)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs.cpp"
        ], 
        "symbol": "mongo::theReplSet", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::_initExtentFreeList()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::_diaglog", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DiagLog::setLevel(int)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::TempRelease::TempRelease()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::Record::_accessing() const", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::numRecords() const", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::setProfilingLevel(int, std::string&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/kill_current_op.cpp"
        ], 
        "symbol": "mongo::KillCurrentOp::checkForInterrupt(bool)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalWrite::GlobalWrite(bool, int)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::convertExceptionCode(int)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::userCreateNS(char const*, mongo::BSONObj, std::string&, bool, bool*)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionType const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::numIndexesReady() const", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/replication_server_status.cpp"
        ], 
        "symbol": "mongo::replSettings", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/catalog/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::setUserFlag(int)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database_holder.cpp"
        ], 
        "symbol": "mongo::DatabaseHolder::closeAll(std::string const&, mongo::BSONObjBuilder&, bool)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DiagLog::flush()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dropDatabase", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::tlogLevel", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::setImpersonatedUserNames(std::vector<mongo::UserName, std::allocator<mongo::UserName> > const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::dbHolderUnchecked()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::repairDatabase", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::GTE", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/fetch.cpp"
        ], 
        "symbol": "mongo::FetchStage::FetchStage(mongo::WorkingSet*, mongo::PlanStage*, mongo::MatchExpression const*)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/catalog/namespace_index.cpp"
        ], 
        "symbol": "mongo::NamespaceIndex::getNamespaces(std::list<std::string, std::allocator<std::string> >&, bool) const", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/oplog.cpp"
        ], 
        "symbol": "mongo::logOp(char const*, char const*, mongo::BSONObj const&, mongo::BSONObj*, bool*, bool, mongo::BSONObj const*)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isImpersonating() const", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::extendRangeBound(mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/catalog/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::clearUserFlag(int)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::updateTTLSetting(mongo::IndexDescriptor const*, long long)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::inferKeyPattern(mongo::BSONObj const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_builder.cpp"
        ], 
        "symbol": "mongo::IndexBuilder::restoreIndexes(std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::shardingState", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::storageSize(int*, mongo::BSONArrayBuilder*) const", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/lite_parsed_query.cpp"
        ], 
        "symbol": "mongo::LiteParsedQuery::cmdOptionMaxTimeMS", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::TempRelease::~TempRelease()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_init", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::writelocktry::~writelocktry()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::listDatabases", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::info()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/count.cpp"
        ], 
        "symbol": "mongo::runCount(std::string const&, mongo::BSONObj const&, std::string&, int&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::hasReadPreference(mongo::BSONObj const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::_finishInit()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::GlobalRead::~GlobalRead()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs.cpp"
        ], 
        "symbol": "mongo::replSet", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/lite_parsed_query.cpp"
        ], 
        "symbol": "mongo::LiteParsedQuery::parseMaxTimeMSCommand(mongo::BSONObj const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::createCollection", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dropCollection", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::assertAtLeastReadLocked(mongo::StringData const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::findIndexByKeyPattern(mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::writelocktry::writelocktry(int)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/counters.cpp"
        ], 
        "symbol": "mongo::globalOpCounters", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dbhelpers.cpp"
        ], 
        "symbol": "mongo::Helpers::toKeyFormat(mongo::BSONObj const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/eof_runner.cpp"
        ], 
        "symbol": "mongo::EOFRunner::EOFRunner(mongo::CanonicalQuery*, std::string const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/rs.cpp"
        ], 
        "symbol": "mongo::ReplSetImpl::_stepDown(int)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::enableProfiler", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::parseAndRemoveImpersonatedUserField(mongo::BSONObj, mongo::AuthorizationSession*, std::vector<mongo::UserName, std::allocator<mongo::UserName> >*, bool*)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/get_runner.cpp"
        ], 
        "symbol": "mongo::ScopedRunnerRegistration::ScopedRunnerRegistration(mongo::Runner*)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::collMod", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_builder.cpp"
        ], 
        "symbol": "mongo::IndexBuilder::killMatchingIndexBuilds(mongo::BSONObj const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::nested()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::isLocked()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/extent_manager.cpp"
        ], 
        "symbol": "mongo::ExtentManager::getFile(int, int, bool)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::isCapped() const", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/collection_scan.cpp"
        ], 
        "symbol": "mongo::CollectionScan::CollectionScan(mongo::CollectionScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnResource(mongo::ResourcePattern const&, mongo::ActionType)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::dataSize() const", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::query(std::string const&, mongo::Query, int, int, mongo::BSONObj const*, int, int)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/health.cpp"
        ], 
        "symbol": "mongo::ReplSetImpl::lastOtherOpTime() const", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::IndexIterator::more()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::dropDatabase(std::string const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepsecs(int)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/index_scan.cpp"
        ], 
        "symbol": "mongo::IndexScan::IndexScan(mongo::IndexScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::diagLogging", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::closeAllDatabases", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::rec() const", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::repairDatabase(std::string, std::string&, bool, bool)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/extent_manager.cpp"
        ], 
        "symbol": "mongo::ExtentManager::fileSize() const", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::IndexIterator::IndexIterator(mongo::IndexCatalog const*, bool)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dbStats", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/get_runner.cpp"
        ], 
        "symbol": "mongo::ScopedRunnerRegistration::~ScopedRunnerRegistration()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::dropCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/d_concurrency.cpp"
        ], 
        "symbol": "mongo::Lock::DBWrite::DBWrite(mongo::StringData const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/get_runner.cpp"
        ], 
        "symbol": "mongo::getRunner(mongo::CanonicalQuery*, mongo::Runner**, unsigned long)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::getDatabaseNames(std::vector<std::string, std::allocator<std::string> >&, std::string const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/catalog/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::maxCappedDocs() const", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::dbSize(char const*)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::clearImpersonatedUserNames()", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::Query::sort(mongo::BSONObj const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/catalog/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::syncUserFlags(std::string const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/ops/insert.cpp"
        ], 
        "symbol": "mongo::userAllowedWriteNS(mongo::StringData const&, mongo::StringData const&)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/db/dbcommands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::killCurrentOp", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::tlogLevel", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::Record::_accessing() const", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::indexStats", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/kill_current_op.cpp"
        ], 
        "symbol": "mongo::KillCurrentOp::checkForInterrupt(bool)", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::Array() const", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::obj() const", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/catalog/namespace_details.cpp"
        ], 
        "symbol": "mongo::NamespaceDetails::idx(int, bool)", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/catalog/namespace_index.cpp"
        ], 
        "symbol": "mongo::NamespaceIndex::details(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/structure/btree/key.cpp"
        ], 
        "symbol": "mongo::KeyV1::toBson() const", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::rec() const", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/commands/index_stats.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::collStats", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/grid.cpp"
        ], 
        "symbol": "mongo::Grid::getDBConfig(mongo::StringData const&, bool, std::string const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source.cpp"
        ], 
        "symbol": "typeinfo for mongo::DocumentSource", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/version_manager.cpp", 
            "src/mongo/s/default_version.cpp"
        ], 
        "symbol": "mongo::VersionManager::forceRemoteCheckShardVersionCB(std::string const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/parallel.cpp"
        ], 
        "symbol": "mongo::Future::spawnCommand(std::string const&, std::string const&, mongo::BSONObj const&, int, mongo::DBClientBase*)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/distlock.cpp"
        ], 
        "symbol": "mongo::DistributedLock::lock_try(std::string const&, bool, mongo::BSONObj*, double)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "vtable for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dropDatabase", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/cursors.cpp"
        ], 
        "symbol": "mongo::CursorCache::storeRef(std::string const&, long long, std::string const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::insert", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/cursors.cpp"
        ], 
        "symbol": "mongo::cursorCache", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::ValueStorage::putDocument(mongo::Document const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::reIndex", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/parallel.cpp"
        ], 
        "symbol": "mongo::Future::CommandResult::join(int)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::parseCommand(std::string&, mongo::BSONObj const&, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::sameLogicalEndpoint(mongo::ConnectionString const&) const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::findIntersectingChunk(mongo::BSONObj const&) const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::run(mongo::BSONObjBuilder&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::getChunkManager(std::string const&, bool, bool)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source_command_shards.cpp"
        ], 
        "symbol": "mongo::DocumentSourceCommandShards::create(std::vector<mongo::Strategy::CommandResult, std::allocator<mongo::Strategy::CommandResult> > const&, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::findChunkForDoc(mongo::BSONObj const&) const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::getAllShards(std::set<mongo::Shard, std::less<mongo::Shard>, std::allocator<mongo::Shard> >&) const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::getChunkManagerIfExists(std::string const&, bool, bool)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::addRequiredPrivileges(mongo::Command*, std::string const&, mongo::BSONObj, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> >*)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/version_manager.cpp", 
            "src/mongo/s/default_version.cpp"
        ], 
        "symbol": "mongo::versionManager", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardconnection.cpp"
        ], 
        "symbol": "mongo::ShardConnection::~ShardConnection()", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::DocumentStorage::clone() const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::addInitialSource(boost::intrusive_ptr<mongo::DocumentSource>)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::canRunInMongos() const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardconnection.cpp"
        ], 
        "symbol": "mongo::ShardConnection::done()", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionType const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::Value::Value(mongo::BSONElement const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::addRef() const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::getShard(std::string const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/strategy.cpp"
        ], 
        "symbol": "mongo::STRATEGY", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::repairDatabase", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Command::execCommandClientBasic(mongo::Command*, mongo::ClientBasic&, int, char const*, mongo::BSONObj&, mongo::BSONObjBuilder&, bool)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "mongo::IntrusiveCounterUnsigned::release() const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(std::string const&, double)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::load()", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/grid.cpp"
        ], 
        "symbol": "mongo::grid", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::DocumentStorage::findField(mongo::StringData) const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::validate", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::Array() const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/lite_parsed_query.cpp"
        ], 
        "symbol": "mongo::LiteParsedQuery::cmdOptionMaxTimeMS", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::Document::toBson() const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::Chunk::MaxChunkSize", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(mongo::ConnectionString const&, double)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/grid.cpp"
        ], 
        "symbol": "mongo::Grid::removeDBIfExists(mongo::DBConfig const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/distlock.cpp"
        ], 
        "symbol": "mongo::DistributedLock::DistributedLock(mongo::ConnectionString const&, std::string const&, unsigned long long, bool)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::removeSharding(std::string const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::createCollection", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dropCollection", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::getInitialQuery() const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardkey.cpp"
        ], 
        "symbol": "mongo::ShardKeyPattern::ShardKeyPattern(mongo::BSONObj)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shard.cpp"
        ], 
        "symbol": "mongo::Shard::_setAddr(std::string const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::writeExplainOps() const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::shardCollection(std::string const&, mongo::ShardKeyPattern, bool, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> >*, std::vector<mongo::Shard, std::allocator<mongo::Shard> >*)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::enableProfiler", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::commandName", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::collMod", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "vtable for mongo::DocumentStorage", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::exception const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::serialize() const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::splitVector", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::splitForSharded()", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::getShardsForQuery(std::set<mongo::Shard, std::less<mongo::Shard>, std::allocator<mongo::Shard> >&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/value.cpp"
        ], 
        "symbol": "mongo::ValueStorage::putVector(mongo::RCVector const*)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::convertToCapped", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnResource(mongo::ResourcePattern const&, mongo::ActionType)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::drop(boost::shared_ptr<mongo::ChunkManager const>) const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardconnection.cpp"
        ], 
        "symbol": "mongo::ShardConnection::ShardConnection(std::string const&, std::string const&, boost::shared_ptr<mongo::ChunkManager const>)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::getAllShards(std::set<mongo::Shard, std::less<mongo::Shard>, std::allocator<mongo::Shard> >&) const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/strategy.cpp"
        ], 
        "symbol": "mongo::Strategy::commandOp(std::string const&, mongo::BSONObj const&, int, std::string const&, mongo::BSONObj const&, std::vector<mongo::Strategy::CommandResult, std::allocator<mongo::Strategy::CommandResult> >*)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/intrusive_counter.cpp"
        ], 
        "symbol": "typeinfo for mongo::IntrusiveCounterUnsigned", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/distlock.cpp"
        ], 
        "symbol": "mongo::DistributedLock::unlock(mongo::BSONObj*)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::dropDatabase(std::string&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dropIndex", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::configServer", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardconnection.cpp"
        ], 
        "symbol": "mongo::ShardConnection::ShardConnection(mongo::Shard const&, std::string const&, boost::shared_ptr<mongo::ChunkManager const>)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::Chunk::splitIfShould(long) const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_fillServers(std::string)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardconnection.cpp"
        ], 
        "symbol": "mongo::ShardConnection::_finishInit()", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source_merge_cursors.cpp"
        ], 
        "symbol": "mongo::DocumentSourceMergeCursors::create(std::vector<std::pair<mongo::ConnectionString, long long>, std::allocator<std::pair<mongo::ConnectionString, long long> > > const&, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dbStats", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::enableSharding(bool)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/interrupt_status_mongos.cpp"
        ], 
        "symbol": "mongo::InterruptStatusMongos::status", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/role_graph_builtin_roles.cpp"
        ], 
        "symbol": "mongo::RoleGraph::generateUniversalPrivileges(std::vector<mongo::Privilege, std::allocator<mongo::Privilege> >*)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::getChunkManagerOrPrimary(std::string const&, boost::shared_ptr<mongo::ChunkManager const>&, boost::shared_ptr<mongo::Shard>&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::isSharded(std::string const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/queryutil.cpp"
        ], 
        "symbol": "mongo::applySkipLimit(long long, mongo::BSONObj const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::DocumentStorage::appendField(mongo::StringData)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp"
        ], 
        "symbol": "mongo::ClientInfo::get(mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document.cpp"
        ], 
        "symbol": "mongo::operator<<(mongo::BSONObjBuilderValueStream&, mongo::Document const&)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::Chunk::ShouldAutoSplit", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/document_source_out.cpp"
        ], 
        "symbol": "typeinfo for mongo::DocumentSourceOut", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::getShardsForRange(std::set<mongo::Shard, std::less<mongo::Shard>, std::allocator<mongo::Shard> >&, mongo::BSONObj const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::compact", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::hasShardKey(mongo::BSONObj const&) const", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pipeline/pipeline.cpp"
        ], 
        "symbol": "mongo::Pipeline::stitch()", 
        "object": "src/mongo/s/commands_public.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::Test()", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/canonical_query.cpp"
        ], 
        "symbol": "mongo::CanonicalQuery::canonicalize(std::string const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::CanonicalQuery**)", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_cache.cpp"
        ], 
        "symbol": "mongo::CachedSolution::~CachedSolution()", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/canonical_query.cpp"
        ], 
        "symbol": "mongo::CanonicalQuery::getPlanCacheKey() const", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::getSuite(std::string const&)", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "typeinfo for mongo::unittest::Test", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_cache.cpp"
        ], 
        "symbol": "mongo::PlanCache::add(mongo::CanonicalQuery const&, std::vector<mongo::QuerySolution*, std::allocator<mongo::QuerySolution*> > const&, mongo::PlanRankingDecision*)", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/query_settings.cpp"
        ], 
        "symbol": "mongo::QuerySettings::QuerySettings()", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_cache.cpp"
        ], 
        "symbol": "mongo::PlanCache::~PlanCache()", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::TestAssertion(char const*, unsigned int)", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::ComparisonAssertion::ComparisonAssertion(char const*, char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/query_settings.cpp"
        ], 
        "symbol": "mongo::QuerySettings::~QuerySettings()", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Suite::add(std::string const&, boost::function<void ()> const&)", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONElement::Array() const", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::fail(std::string const&) const", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::run()", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::setUp()", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator!=(mongo::Status const&) const", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::tearDown()", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::Test::~Test()", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::Status const&)", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::operator==(mongo::Status const&) const", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/plan_cache.cpp"
        ], 
        "symbol": "mongo::PlanCache::getAllSolutions() const", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/json.cpp"
        ], 
        "symbol": "mongo::fromjson(char const*, int*)", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/unittest.cpp"
        ], 
        "symbol": "mongo::unittest::TestAssertion::~TestAssertion()", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/commands/hint_commands_test.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::extractFields(mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/scripting/engine.cpp"
        ], 
        "symbol": "mongo::globalScriptEngine", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/canonical_query.cpp"
        ], 
        "symbol": "mongo::CanonicalQuery::canonicalize(std::string const&, mongo::BSONObj const&, mongo::CanonicalQuery**)", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::traceIfNeeded(mongo::DBException const&)", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::DBException", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::getAuthenticatedUserNamesToken()", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::UserException", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/get_runner.cpp"
        ], 
        "symbol": "mongo::ScopedRunnerRegistration::ScopedRunnerRegistration(mongo::Runner*)", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::DBException::toString() const", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "vtable for mongo::UserException", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnNamespace(mongo::NamespaceString const&, mongo::ActionType)", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/scripting/engine.cpp"
        ], 
        "symbol": "mongo::ScriptEngine::getPooledScope(std::string const&, std::string const&)", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp", 
            "src/mongo/db/client.cpp", 
            "src/mongo/client/clientAndShell.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getCurrent()", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/get_runner.cpp"
        ], 
        "symbol": "mongo::getRunner(mongo::CanonicalQuery*, mongo::Runner**, unsigned long)", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/get_runner.cpp"
        ], 
        "symbol": "mongo::ScopedRunnerRegistration::~ScopedRunnerRegistration()", 
        "object": "src/mongo/db/commands/group.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::cleanupOrphaned", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::shardingState", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/collection_metadata.cpp"
        ], 
        "symbol": "mongo::CollectionMetadata::isValidKey(mongo::BSONObj const&) const", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::getCollectionMetadata(std::string const&)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_parser.cpp"
        ], 
        "symbol": "mongo::FieldParser::extract(mongo::BSONObj, mongo::BSONField<std::string> const&, std::string*, std::string*)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::refreshMetadataNow(std::string const&, mongo::ChunkVersion*)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/collection_metadata.cpp"
        ], 
        "symbol": "mongo::CollectionMetadata::getMinKey() const", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_parser.cpp"
        ], 
        "symbol": "mongo::FieldParser::extract(mongo::BSONObj, mongo::BSONField<mongo::BSONObj> const&, mongo::BSONObj*, std::string*)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/range_deleter_service.cpp"
        ], 
        "symbol": "mongo::getDeleter()", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnResource(mongo::ResourcePattern const&, mongo::ActionType)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_parser.cpp"
        ], 
        "symbol": "mongo::FieldParser::extract(mongo::BSONObj, mongo::BSONField<bool> const&, bool*, std::string*)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/range_deleter.cpp"
        ], 
        "symbol": "mongo::RangeDeleter::deleteNow(std::string const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::BSONObj const&, bool, std::string*)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/collection_metadata.cpp"
        ], 
        "symbol": "mongo::CollectionMetadata::getNextOrphanRange(mongo::BSONObj const&, mongo::KeyRange*) const", 
        "object": "src/mongo/db/commands/cleanup_orphaned_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::numIndexesTotal() const", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::reIndex", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::tlogLevel", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "vtable for mongo::DBDirectClient", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_builder.cpp"
        ], 
        "symbol": "mongo::IndexBuilder::restoreIndexes(std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&)", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::dropAllIndexes(bool)", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::findIndexByKeyPattern(mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_builder.cpp"
        ], 
        "symbol": "mongo::IndexBuilder::killMatchingIndexBuilds(mongo::BSONObj const&)", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/instance.cpp"
        ], 
        "symbol": "mongo::DBDirectClient::query(std::string const&, mongo::Query, int, int, mongo::BSONObj const*, int, int)", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::dropIndex(mongo::IndexDescriptor*)", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dropIndex", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::findIndexByName(mongo::StringData const&, bool) const", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/background.cpp"
        ], 
        "symbol": "mongo::BackgroundOperation::assertNoBgOpInProgForNs(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::createIndex(mongo::BSONObj, bool, mongo::IndexCatalog::ShutdownBehavior)", 
        "object": "src/mongo/db/commands/drop_indexes.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/grid.cpp"
        ], 
        "symbol": "mongo::Grid::getDBConfig(mongo::StringData const&, bool, std::string const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/cluster_write.cpp"
        ], 
        "symbol": "mongo::clusterDelete(std::string const&, mongo::BSONObj const&, int, mongo::BSONObj const&, mongo::BatchedCommandResponse*)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::simpleCommand(std::string const&, mongo::BSONObj*, std::string const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_names.cpp"
        ], 
        "symbol": "mongo::IndexNames::findPluginName(mongo::BSONObj const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::addShard", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::tlogLevel", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/distlock.cpp"
        ], 
        "symbol": "mongo::DistributedLock::lock_try(std::string const&, bool, mongo::BSONObj*, double)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_shard.cpp"
        ], 
        "symbol": "mongo::ShardType::name", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::getShardVersion", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "vtable for mongo::ScopedDbConnection", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/keypattern.cpp"
        ], 
        "symbol": "mongo::KeyPattern::KeyPattern(mongo::BSONObj const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shard.cpp"
        ], 
        "symbol": "mongo::Shard::runCommand(std::string const&, mongo::BSONObj const&) const", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::sameLogicalEndpoint(mongo::ConnectionString const&) const", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::pool", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::getChunkManager(std::string const&, bool, bool)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::parse(std::string const&, std::string&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastErrorHolder::get(bool)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::getChunkManagerIfExists(std::string const&, bool, bool)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::removeShard", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_database.cpp"
        ], 
        "symbol": "mongo::DatabaseType::ConfigNS", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardconnection.cpp"
        ], 
        "symbol": "mongo::ShardConnection::~ShardConnection()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/cluster_write.cpp"
        ], 
        "symbol": "mongo::clusterCreateIndex(std::string const&, mongo::BSONObj, bool, mongo::BSONObj const&, mongo::BatchedCommandResponse*)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/timer.cpp"
        ], 
        "symbol": "mongo::Timer::_countsPerSecond", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardconnection.cpp"
        ], 
        "symbol": "mongo::ShardConnection::sync()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "typeinfo for mongo::DBException", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastErrorHolder::disableForCommand()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient_rs.cpp"
        ], 
        "symbol": "mongo::ReplicaSetMonitor::remove(std::string const&, bool)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/write_concern_options.cpp"
        ], 
        "symbol": "mongo::WriteConcernOptions::AllConfigs", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/write_concern_options.cpp"
        ], 
        "symbol": "mongo::WriteConcernOptions::Default", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_shard.cpp"
        ], 
        "symbol": "mongo::ShardType::ConfigNS", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::ConfigServer::logChange(std::string const&, std::string const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::_setSocketTimeout()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::woCompare(mongo::BSONObj const&, mongo::BSONObj const&, bool) const", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::splitChunk", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/grid.cpp"
        ], 
        "symbol": "mongo::Grid::flushConfig()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/dbclient_multi_command.cpp"
        ], 
        "symbol": "mongo::DBClientMultiCommand::~DBClientMultiCommand()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::getAllShardedCollections(std::set<std::string, std::less<std::string>, std::allocator<std::string> >&) const", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::get(std::string const&, double)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/grid.cpp"
        ], 
        "symbol": "mongo::Grid::addShard(std::string*, mongo::ConnectionString const&, long long, std::string&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/grid.cpp"
        ], 
        "symbol": "mongo::grid", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shard.cpp"
        ], 
        "symbol": "mongo::Shard::removeShard(std::string const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardconnection.cpp"
        ], 
        "symbol": "mongo::ShardConnection::done()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp"
        ], 
        "symbol": "mongo::ClientInfo::disableForCommand()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_database.cpp"
        ], 
        "symbol": "mongo::DatabaseType::primary", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::listDatabases", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::Chunk::MaxChunkSize", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_parser.cpp"
        ], 
        "symbol": "mongo::FieldParser::extract(mongo::BSONObj, mongo::BSONField<mongo::BSONArray> const&, mongo::BSONArray*, std::string*)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::netstat", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::ConfigServer::allUp(std::string&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shard.cpp"
        ], 
        "symbol": "mongo::Shard::reloadShardInfo()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_shard.cpp"
        ], 
        "symbol": "mongo::ShardType::maxSize", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shard.cpp"
        ], 
        "symbol": "mongo::Shard::reset(std::string const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/distlock.cpp"
        ], 
        "symbol": "mongo::DistributedLock::DistributedLock(mongo::ConnectionString const&, std::string const&, unsigned long long, bool)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_names.cpp"
        ], 
        "symbol": "mongo::IndexNames::HASHED", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::listShards", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/lite_parsed_query.cpp"
        ], 
        "symbol": "mongo::LiteParsedQuery::parseMaxTimeMSCommand(mongo::BSONObj const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::findIntersectingChunk(mongo::BSONObj const&) const", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::removeHost(std::string const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardkey.cpp"
        ], 
        "symbol": "mongo::ShardKeyPattern::ShardKeyPattern(mongo::BSONObj)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::jsTime()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::_printChunks() const", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::Chunk::multiSplit(std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> > const&, mongo::BSONObj&) const", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::fsync", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::lastError", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::NE", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::moveChunk", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::shardCollection(std::string const&, mongo::ShardKeyPattern, bool, std::vector<mongo::BSONObj, std::allocator<mongo::BSONObj> >*, std::vector<mongo::Shard, std::allocator<mongo::Shard> >*)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::configServer", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::reload()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::Chunk::containsPoint(mongo::BSONObj const&) const", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_database.cpp"
        ], 
        "symbol": "mongo::DatabaseType::name", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_parser.cpp"
        ], 
        "symbol": "mongo::FieldParser::extract(mongo::BSONObj, mongo::BSONField<mongo::BSONObj> const&, mongo::BSONObj*, std::string*)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(mongo::DBException const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardkey.cpp"
        ], 
        "symbol": "mongo::ShardKeyPattern::isUniqueIndexCompatible(mongo::KeyPattern const&) const", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardconnection.cpp"
        ], 
        "symbol": "mongo::shardConnectionPool", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnResource(mongo::ResourcePattern const&, mongo::ActionType)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logEnableSharding(mongo::ClientBasic*, mongo::StringData const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::OID const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_shard.cpp"
        ], 
        "symbol": "mongo::ShardType::draining", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/write_ops/batch_downconvert.cpp"
        ], 
        "symbol": "mongo::enforceLegacyWriteConcern(mongo::MultiCommandDispatch*, mongo::StringData const&, mongo::BSONObj const&, std::map<mongo::ConnectionString, mongo::OpTime, mongo::ConnectionStringComp, std::allocator<std::pair<mongo::ConnectionString const, mongo::OpTime> > > const&, std::vector<mongo::LegacyWCResponse, std::allocator<mongo::LegacyWCResponse> >*)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::fieldsMatch(mongo::BSONObj const&, mongo::BSONObj const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logShardCollection(mongo::ClientBasic*, mongo::StringData const&, mongo::BSONObj const&, bool)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::getHostNameCached()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardconnection.cpp"
        ], 
        "symbol": "mongo::ShardConnection::ShardConnection(std::string const&, std::string const&, boost::shared_ptr<mongo::ChunkManager const>)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::setPrimary(std::string const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_chunk.cpp"
        ], 
        "symbol": "mongo::ChunkType::shard", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastError::appendSelf(mongo::BSONObjBuilder&, bool)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shard.cpp", 
            "src/mongo/client/clientAndShell.cpp"
        ], 
        "symbol": "mongo::Shard::getAllShards(std::vector<mongo::Shard, std::allocator<mongo::Shard> >&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_finishInit()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/distlock.cpp"
        ], 
        "symbol": "mongo::DistributedLock::unlock(mongo::BSONObj*)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logRemoveShard(mongo::ClientBasic*, mongo::StringData const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logAddShard(mongo::ClientBasic*, mongo::StringData const&, std::string const&, long long)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/grid.cpp"
        ], 
        "symbol": "mongo::Grid::knowAboutShard(std::string const&) const", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/grid.cpp"
        ], 
        "symbol": "mongo::Grid::allowLocalHost() const", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::Chunk::singleSplit(bool, mongo::BSONObj&) const", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::flushRouterConfig", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::ConnectionString::_fillServers(std::string)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::closeAllDatabases", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::Chunk::moveAndCommit(mongo::Shard const&, long long, bool, bool, int, mongo::BSONObj&) const", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::getVersion() const", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/shardconnection.cpp"
        ], 
        "symbol": "mongo::ShardConnection::_finishInit()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/chunk.cpp"
        ], 
        "symbol": "mongo::ChunkManager::findChunkForDoc(mongo::BSONObj const&) const", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::enableSharding(bool)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp", 
            "src/mongo/db/client.cpp", 
            "src/mongo/client/clientAndShell.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getCurrent()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/dbclient_multi_command.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientMultiCommand", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::ScopedDbConnection::~ScopedDbConnection()", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp"
        ], 
        "symbol": "mongo::ClientInfo::get(mongo::AbstractMessagingPort*)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/cluster_write.cpp"
        ], 
        "symbol": "mongo::clusterUpdate(std::string const&, mongo::BSONObj const&, mongo::BSONObj const&, bool, bool, mongo::BSONObj const&, mongo::BatchedCommandResponse*)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::enableSharding", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/type_chunk.cpp"
        ], 
        "symbol": "mongo::ChunkType::ConfigNS", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::AScopedConnection::_numConnections", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/connpool.cpp"
        ], 
        "symbol": "mongo::DBConnectionPool::release(std::string const&, mongo::DBClientBase*)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/config.cpp"
        ], 
        "symbol": "mongo::DBConfig::isSharded(std::string const&)", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/jsobj.cpp"
        ], 
        "symbol": "mongo::BSONObj::isPrefixOf(mongo::BSONObj const&) const", 
        "object": "src/mongo/s/commands_admin.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::rotateLogs()", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::Client::shutdown()", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::logRotate", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/ramlog.cpp"
        ], 
        "symbol": "mongo::RamLog::LineIterator::LineIterator(mongo::RamLog*)", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::getLog", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::getCmdLineOpts", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::prettyHostName()", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/processinfo_darwin.cpp"
        ], 
        "symbol": "mongo::ProcessInfo::~ProcessInfo()", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/processinfo.cpp"
        ], 
        "symbol": "mongo::ProcessInfo::systemInfo", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/scripting/engine.cpp"
        ], 
        "symbol": "mongo::globalScriptEngine", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/ramlog.cpp"
        ], 
        "symbol": "mongo::RamLog::getLine_inlock(unsigned int) const", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::hostInfo", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::jsTime()", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/ramlog.cpp"
        ], 
        "symbol": "mongo::RamLog::getNames(std::vector<std::string, std::allocator<std::string> >&)", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/process_id.cpp"
        ], 
        "symbol": "mongo::ProcessId::getCurrent()", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version_reporting.cpp"
        ], 
        "symbol": "mongo::appendBuildInfo(mongo::BSONObjBuilder&)", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/ramlog.cpp"
        ], 
        "symbol": "mongo::RamLog::LineIterator::getTotalLinesWritten()", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::regenMachineId()", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/ramlog.cpp"
        ], 
        "symbol": "mongo::RamLog::getIfExists(std::string const&)", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::getMachineId()", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/log_process_details.cpp"
        ], 
        "symbol": "mongo::logProcessDetailsForLogRotate()", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/processinfo_darwin.cpp"
        ], 
        "symbol": "mongo::ProcessInfo::ProcessInfo(mongo::ProcessId)", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/unittest/crutch.cpp", 
            "src/mongo/client/clientAndShell.cpp", 
            "src/mongo/db/instance.cpp", 
            "src/mongo/client/scoped_db_conn_test.cpp", 
            "src/mongo/s/server.cpp"
        ], 
        "symbol": "mongo::dbexit(mongo::ExitCode, char const*)", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/dbcommands_generic.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_parser.cpp"
        ], 
        "symbol": "mongo::FieldParser::extract(mongo::BSONObj, mongo::BSONField<std::string> const&, std::string*, std::string*)", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/make_string_vector.cpp"
        ], 
        "symbol": "mongo::_makeStringVector(int, ...)", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::splitChunk", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::gotShardName(std::string const&)", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_merge.cpp"
        ], 
        "symbol": "mongo::mergeChunks(mongo::NamespaceString const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::OID const&, bool, std::string*)", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::shardingState", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_parser.cpp"
        ], 
        "symbol": "mongo::FieldParser::extract(mongo::BSONElement, mongo::BSONField<mongo::BSONObj> const&, mongo::BSONObj*, std::string*)", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/d_state.cpp"
        ], 
        "symbol": "mongo::ShardingState::initialize(std::string const&)", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnResource(mongo::ResourcePattern const&, mongo::ActionType)", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/field_parser.cpp"
        ], 
        "symbol": "mongo::FieldParser::extract(mongo::BSONObj, mongo::BSONField<mongo::OID> const&, mongo::OID*, std::string*)", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::causedBy(std::string const&)", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/global_initializer_registerer.cpp"
        ], 
        "symbol": "mongo::GlobalInitializerRegisterer::GlobalInitializerRegisterer(std::string const&, boost::function<mongo::Status (mongo::InitializerContext*)> const&, std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/merge_chunks_cmd.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::grantInternalAuthorization()", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/mongo_authentication_session.cpp"
        ], 
        "symbol": "mongo::MongoAuthenticationSession::MongoAuthenticationSession(unsigned long long)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_finish", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::resetAuthenticationSession(mongo::AuthenticationSession*)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::releaseUser(mongo::User*)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::swapAuthenticationSession(boost::scoped_ptr<mongo::AuthenticationSession>&)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::leftChild() const", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::toString() const", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::sleepmillis(long long)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::setValueString(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::~Document()", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user.cpp"
        ], 
        "symbol": "mongo::User::getCredentials() const", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::writeTo(mongo::BSONObjBuilder*) const", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_init", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::logoutDatabase(std::string const&)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Document::Document(mongo::BSONObj const&, mongo::mutablebson::Document::InPlaceMode)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::internalSecurity", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::rightSibling() const", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/ssl_manager.cpp"
        ], 
        "symbol": "mongo::getSSLManager()", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/mutable/document.cpp"
        ], 
        "symbol": "mongo::mutablebson::Element::getFieldName() const", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user.cpp"
        ], 
        "symbol": "mongo::User::getName() const", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::acquireUser(mongo::UserName const&, mongo::User**)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/md5.cpp"
        ], 
        "symbol": "_md5_append", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/random.cpp"
        ], 
        "symbol": "mongo::SecureRandom::create()", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp", 
            "src/mongo/db/client.cpp", 
            "src/mongo/client/clientAndShell.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getCurrent()", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::getGlobalAuthorizationManager()", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::addAndAuthorizeUser(mongo::UserName const&)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/user_name.cpp"
        ], 
        "symbol": "mongo::UserName::UserName(mongo::StringData const&, mongo::StringData const&)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/string_data.cpp"
        ], 
        "symbol": "mongo::operator<<(std::ostream&, mongo::StringData const&)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/audit.cpp"
        ], 
        "symbol": "mongo::audit::logAuthentication(mongo::ClientBasic*, mongo::StringData const&, mongo::UserName const&, mongo::ErrorCodes::Error)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/commands/authentication_commands.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/index_catalog.cpp"
        ], 
        "symbol": "mongo::IndexCatalog::findIndexByType(std::string const&, std::vector<mongo::IndexDescriptor*, std::allocator<mongo::IndexDescriptor*> >&) const", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/lite_parsed_query.cpp"
        ], 
        "symbol": "mongo::LiteParsedQuery::metaGeoNearDistance", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::getNScanned() const", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::ensureStarted()", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/canonical_query.cpp"
        ], 
        "symbol": "mongo::CanonicalQuery::canonicalize(std::string const&, mongo::BSONObj const&, mongo::BSONObj const&, mongo::BSONObj const&, long long, long long, mongo::BSONObj const&, mongo::CanonicalQuery**)", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_names.cpp"
        ], 
        "symbol": "mongo::IndexNames::GEO_2D", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_names.cpp"
        ], 
        "symbol": "mongo::IndexNames::GEO_2DSPHERE", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/type_explain.cpp"
        ], 
        "symbol": "mongo::TypeExplain::getNScannedObjects() const", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/geo/geoparser.cpp"
        ], 
        "symbol": "mongo::GeoParser::isPoint(mongo::BSONObj const&)", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/lite_parsed_query.cpp"
        ], 
        "symbol": "mongo::LiteParsedQuery::metaGeoNearPoint", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMicros64()", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/get_runner.cpp"
        ], 
        "symbol": "mongo::getRunner(mongo::CanonicalQuery*, mongo::Runner**, unsigned long)", 
        "object": "src/mongo/db/commands/geonear.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/shutdown.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/shutdown.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::shutdown", 
        "object": "src/mongo/db/commands/shutdown.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/commands/find_and_modify_common.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::update", 
        "object": "src/mongo/db/commands/find_and_modify_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/find_and_modify_common.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::insert", 
        "object": "src/mongo/db/commands/find_and_modify_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/find_and_modify_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/find_and_modify_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/resource_pattern.cpp"
        ], 
        "symbol": "mongo::ResourcePattern::toString() const", 
        "object": "src/mongo/db/commands/find_and_modify_common.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::remove", 
        "object": "src/mongo/db/commands/find_and_modify_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/find_and_modify_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/find_and_modify_common.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::createIndex", 
        "object": "src/mongo/db/commands/copydb_common.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/commands/copydb_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/commands/copydb_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/copydb_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/copydb_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnResource(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/copydb_common.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::insert", 
        "object": "src/mongo/db/commands/copydb_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::removeAllActions()", 
        "object": "src/mongo/db/commands/copydb_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/copydb_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/commands/copydb_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnNamespace(mongo::NamespaceString const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/copydb_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/copydb_common.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/commands/mr_common.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::update", 
        "object": "src/mongo/db/commands/mr_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/mr_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/mr_common.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::insert", 
        "object": "src/mongo/db/commands/mr_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/mr_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/mr_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/mr_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/resource_pattern.cpp"
        ], 
        "symbol": "mongo::ResourcePattern::toString() const", 
        "object": "src/mongo/db/commands/mr_common.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::remove", 
        "object": "src/mongo/db/commands/mr_common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/mr_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/mr_common.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/mr_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/mr_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/mr_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/mr_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientWithCommands::simpleCommand(std::string const&, mongo::BSONObj*, std::string const&)", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/util.cpp"
        ], 
        "symbol": "mongo::StaticObserver::_destroyingStatics", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientWithCommands", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientBase::ConnectionIdSequence", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/security_key.cpp"
        ], 
        "symbol": "mongo::isInternalAuthSet()", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientBase", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager.cpp"
        ], 
        "symbol": "mongo::AuthorizationManager::isAuthEnabled() const", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::IPv6Enabled()", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "vtable for mongo::DBClientConnection", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::_numConnections", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/security_key.cpp"
        ], 
        "symbol": "mongo::authenticateInternalUser(mongo::DBClientWithCommands*)", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/client/dbclient.cpp"
        ], 
        "symbol": "mongo::DBClientConnection::connect(mongo::HostAndPort const&, std::string&)", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_manager_global.cpp"
        ], 
        "symbol": "mongo::getGlobalAuthorizationManager()", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/log.cpp"
        ], 
        "symbol": "mongo::errnoWithDescription(int)", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::OID::init()", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::_timeTracker", 
        "object": "src/mongo/db/commands/isself.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/write_concern.cpp"
        ], 
        "symbol": "mongo::WriteConcernResult::appendTo(mongo::BSONObjBuilder*) const", 
        "object": "src/mongo/db/commands/get_last_error.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastError::appendSelf(mongo::BSONObjBuilder&, bool)", 
        "object": "src/mongo/db/commands/get_last_error.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::lastError", 
        "object": "src/mongo/db/commands/get_last_error.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::appendLastOp(mongo::BSONObjBuilder&) const", 
        "object": "src/mongo/db/commands/get_last_error.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/write_concern.cpp"
        ], 
        "symbol": "mongo::waitForWriteConcern(mongo::WriteConcernOptions const&, mongo::OpTime const&, mongo::WriteConcernResult*)", 
        "object": "src/mongo/db/commands/get_last_error.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastError::noError", 
        "object": "src/mongo/db/commands/get_last_error.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/get_last_error.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastErrorHolder::get(bool)", 
        "object": "src/mongo/db/commands/get_last_error.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/write_concern.cpp"
        ], 
        "symbol": "mongo::validateWriteConcern(mongo::WriteConcernOptions const&)", 
        "object": "src/mongo/db/commands/get_last_error.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/get_last_error.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/commands/get_last_error.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/get_last_error.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/get_last_error.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastErrorHolder::disableForCommand()", 
        "object": "src/mongo/db/commands/get_last_error.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/write_concern_options.cpp"
        ], 
        "symbol": "mongo::WriteConcernOptions::parse(mongo::BSONObj const&)", 
        "object": "src/mongo/db/commands/get_last_error.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/lasterror.cpp"
        ], 
        "symbol": "mongo::LastError::appendSelfStatus(mongo::BSONObjBuilder&)", 
        "object": "src/mongo/db/commands/get_last_error.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/curop.cpp"
        ], 
        "symbol": "mongo::CurOp::setMessage(char const*, std::string, unsigned long long, int)", 
        "object": "src/mongo/db/commands/get_last_error.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/repl/oplog.cpp"
        ], 
        "symbol": "mongo::logOp(char const*, char const*, mongo::BSONObj const&, mongo::BSONObj*, bool*, bool, mongo::BSONObj const*)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::renameCollection(mongo::StringData const&, mongo::StringData const&, bool)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::insert", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/internal_runner.cpp"
        ], 
        "symbol": "mongo::InternalRunner::InternalRunner(std::string const&, mongo::PlanStage*, mongo::WorkingSet*)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::convertToCapped", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/background.cpp"
        ], 
        "symbol": "mongo::BackgroundOperation::assertNoBgOpInProgForDb(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage/record.cpp"
        ], 
        "symbol": "mongo::DiskLoc::ext() const", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/dur.cpp"
        ], 
        "symbol": "mongo::dur::DurableInterface::_impl", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/pdfile.cpp"
        ], 
        "symbol": "mongo::userCreateNS(char const*, mongo::BSONObj, std::string&, bool, bool*)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::insertDocument(mongo::BSONObj const&, bool)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/working_set.cpp"
        ], 
        "symbol": "mongo::WorkingSet::WorkingSet()", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::createIndex", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::getCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/query/eof_runner.cpp"
        ], 
        "symbol": "mongo::EOFRunner::EOFRunner(mongo::CanonicalQuery*, std::string const&)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/index_builder.cpp"
        ], 
        "symbol": "mongo::IndexBuilder::killMatchingIndexBuilds(mongo::BSONObj const&)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::~Context()", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/exec/collection_scan.cpp"
        ], 
        "symbol": "mongo::CollectionScan::CollectionScan(mongo::CollectionScanParams const&, mongo::WorkingSet*, mongo::MatchExpression const*)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp", 
            "src/mongo/s/s_only.cpp"
        ], 
        "symbol": "mongo::currentClient", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/collection.cpp"
        ], 
        "symbol": "mongo::Collection::dataSize() const", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/catalog/database.cpp"
        ], 
        "symbol": "mongo::Database::dropCollection(mongo::StringData const&)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/storage_options.cpp"
        ], 
        "symbol": "mongo::storageGlobalParams", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, std::string const&, int)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client.cpp"
        ], 
        "symbol": "mongo::Client::Context::Context(std::string const&, std::string const&, bool)", 
        "object": "src/mongo/db/commands/collection_to_capped.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::createIndex", 
        "object": "src/mongo/db/commands/rename_collection_common.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::find", 
        "object": "src/mongo/db/commands/rename_collection_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/status.cpp"
        ], 
        "symbol": "mongo::Status::Status(mongo::ErrorCodes::Error, char const*, int)", 
        "object": "src/mongo/db/commands/rename_collection_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/rename_collection_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/rename_collection_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnResource(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/rename_collection_common.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::insert", 
        "object": "src/mongo/db/commands/rename_collection_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::removeAllActions()", 
        "object": "src/mongo/db/commands/rename_collection_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/rename_collection_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForActionsOnResource(mongo::ResourcePattern const&, mongo::ActionType)", 
        "object": "src/mongo/db/commands/rename_collection_common.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::renameCollectionSameDB", 
        "object": "src/mongo/db/commands/rename_collection_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/commands/rename_collection_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/rename_collection_common.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::dropCollection", 
        "object": "src/mongo/db/commands/rename_collection_common.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/processinfo_darwin.cpp"
        ], 
        "symbol": "mongo::ProcessInfo::supported()", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, char const*)", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/privilege.cpp"
        ], 
        "symbol": "mongo::Privilege::Privilege(mongo::ResourcePattern const&, mongo::ActionSet const&)", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::globalConnectionNumber", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/concurrency/thread_name.cpp"
        ], 
        "symbol": "mongo::getThreadName()", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::generic_category()", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::msgasserted(int, char const*)", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/base/parse_number.cpp"
        ], 
        "symbol": "mongo::Status mongo::parseNumberFromStringWithBase<long>(mongo::StringData const&, int, long*)", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/processinfo_darwin.cpp"
        ], 
        "symbol": "mongo::ProcessInfo::getExtraInfo(mongo::BSONObjBuilder&)", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::globalTicketHolder", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/counters.cpp"
        ], 
        "symbol": "mongo::OpCounters::getObj() const", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::makeStream()", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/ramlog.cpp"
        ], 
        "symbol": "mongo::RamLog::LineIterator::LineIterator(mongo::RamLog*)", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/sock.cpp"
        ], 
        "symbol": "mongo::prettyHostName()", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/action_set.cpp"
        ], 
        "symbol": "mongo::ActionSet::addAction(mongo::ActionType const&)", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/auth/authorization_session.cpp"
        ], 
        "symbol": "mongo::AuthorizationSession::isAuthorizedForPrivileges(std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&)", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/processinfo_darwin.cpp"
        ], 
        "symbol": "mongo::ProcessInfo::~ProcessInfo()", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrs", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::assertionCount", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::verifyFailed(char const*, char const*, unsigned int)", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::fassertFailed(int)", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logger.cpp"
        ], 
        "symbol": "mongo::logger::globalLogManager()", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/assert_util.cpp"
        ], 
        "symbol": "mongo::uasserted(int, std::string const&)", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/ramlog.cpp"
        ], 
        "symbol": "mongo::RamLog::getLine_inlock(unsigned int) const", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::jsTime()", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/counters.cpp"
        ], 
        "symbol": "mongo::globalOpCounters", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/process_id.cpp"
        ], 
        "symbol": "mongo::ProcessId::getCurrent()", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/ramlog.cpp"
        ], 
        "symbol": "mongo::RamLog::get(std::string const&)", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/version.cpp"
        ], 
        "symbol": "mongo::versionString", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "build/darwin/cpppath__usr_local_Cellar_openssl_1.0.1e_include/libpath__usr_local_Cellar_openssl_1.0.1e_lib/ssl/mongo/db/auth/action_type.cpp"
        ], 
        "symbol": "mongo::ActionType::serverStatus", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::LogstreamBuilder(mongo::logger::LogDomain<mongo::logger::MessageEventEphemeral>*, std::string const&, mongo::logger::LogSeverity)", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/net/listen.cpp"
        ], 
        "symbol": "mongo::Listener::_timeTracker", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/third_party/boost/libs/system/src/error_code.cpp"
        ], 
        "symbol": "boost::system::system_category()", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/client_basic.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getAuthorizationSession() const", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/hex.cpp"
        ], 
        "symbol": "std::string mongo::integerToHex<int>(int)", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/logstream_builder.cpp"
        ], 
        "symbol": "mongo::logger::LogstreamBuilder::~LogstreamBuilder()", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/bson/oid.cpp"
        ], 
        "symbol": "mongo::BSONObjBuilder::numStrsReady", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/counters.cpp"
        ], 
        "symbol": "mongo::networkCounter", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/processinfo_darwin.cpp"
        ], 
        "symbol": "mongo::ProcessInfo::getVirtualMemorySize()", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/processinfo_darwin.cpp"
        ], 
        "symbol": "mongo::ProcessInfo::getResidentSize()", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/platform/process_id.cpp"
        ], 
        "symbol": "mongo::ProcessId::asLongLong() const", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/logger/ramlog.cpp"
        ], 
        "symbol": "mongo::RamLog::LineIterator::lastWrite()", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/s/client_info.cpp", 
            "src/mongo/db/client.cpp", 
            "src/mongo/client/clientAndShell.cpp"
        ], 
        "symbol": "mongo::ClientBasic::getCurrent()", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/stats/counters.cpp"
        ], 
        "symbol": "mongo::NetworkCounter::append(mongo::BSONObjBuilder&)", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/processinfo_darwin.cpp"
        ], 
        "symbol": "mongo::ProcessInfo::ProcessInfo(mongo::ProcessId)", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/util/time_support.cpp"
        ], 
        "symbol": "mongo::curTimeMillis64()", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }, 
    {
        "sources": [
            "src/mongo/db/server_options.cpp"
        ], 
        "symbol": "mongo::serverGlobalParams", 
        "object": "src/mongo/db/commands/server_status.cpp"
    }
]