[
    {
        "symbol": "mongo::isMongos()", 
        "object": "src/mongo/db/sorter/sorter_test.cpp", 
        "used_by": [
            "src/mongo/s/grid.cpp", 
            "src/mongo/db/commands/parameters.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldPath::FieldPath(std::string const&)", 
        "object": "src/mongo/db/pipeline/field_path.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp", 
            "src/mongo/dbtests/pipelinetests.cpp", 
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldPath::getPath(bool) const", 
        "object": "src/mongo/db/pipeline/field_path.cpp", 
        "used_by": [
            "src/mongo/dbtests/pipelinetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldPath::FieldPath(std::vector<std::string, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/pipeline/field_path.cpp", 
        "used_by": [
            "src/mongo/dbtests/pipelinetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::FieldPath::tail() const", 
        "object": "src/mongo/db/pipeline/field_path.cpp", 
        "used_by": [
            "src/mongo/dbtests/pipelinetests.cpp"
        ]
    }, 
    {
        "symbol": "typeinfo for mongo::DocumentSourceOut", 
        "object": "src/mongo/db/pipeline/document_source_out.cpp", 
        "used_by": [
            "src/mongo/s/commands_public.cpp"
        ]
    }, 
    {
        "symbol": "mongo::AccumulatorFirst::create()", 
        "object": "src/mongo/db/pipeline/accumulator_first.cpp", 
        "used_by": [
            "src/mongo/dbtests/accumulatortests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DocumentSourceUnwind::createFromBson(mongo::BSONElement, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/db/pipeline/document_source_unwind.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DocumentSource::depsToProjection(std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)", 
        "object": "src/mongo/db/pipeline/document_source.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp"
        ]
    }, 
    {
        "symbol": "typeinfo for mongo::DocumentSource", 
        "object": "src/mongo/db/pipeline/document_source.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp", 
            "src/mongo/s/commands_public.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DocumentSourceLimit::createFromBson(mongo::BSONElement, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/db/pipeline/document_source_limit.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DocumentSourceLimit::create(boost::intrusive_ptr<mongo::ExpressionContext> const&, long long)", 
        "object": "src/mongo/db/pipeline/document_source_limit.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp"
        ]
    }, 
    {
        "symbol": "vtable for mongo::DocumentStorage", 
        "object": "src/mongo/db/pipeline/document.cpp", 
        "used_by": [
            "src/mongo/s/commands_public.cpp", 
            "src/mongo/dbtests/documenttests.cpp", 
            "src/mongo/dbtests/expressiontests.cpp", 
            "src/mongo/dbtests/accumulatortests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::MutableDocument::getNestedField(mongo::FieldPath const&)", 
        "object": "src/mongo/db/pipeline/document.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DocumentStorage::clone() const", 
        "object": "src/mongo/db/pipeline/document.cpp", 
        "used_by": [
            "src/mongo/s/commands_public.cpp", 
            "src/mongo/dbtests/documenttests.cpp", 
            "src/mongo/dbtests/expressiontests.cpp", 
            "src/mongo/dbtests/accumulatortests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::operator<<(mongo::BSONObjBuilderValueStream&, mongo::Document const&)", 
        "object": "src/mongo/db/pipeline/document.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp", 
            "src/mongo/s/commands_public.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Document::serializeForSorter(mongo::_BufBuilder<mongo::TrivialAllocator>&) const", 
        "object": "src/mongo/db/pipeline/document.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::MutableDocument::getNestedField(std::vector<mongo::Position, std::allocator<mongo::Position> > const&)", 
        "object": "src/mongo/db/pipeline/document.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DocumentStorage::findField(mongo::StringData) const", 
        "object": "src/mongo/db/pipeline/document.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp", 
            "src/mongo/dbtests/expressiontests.cpp", 
            "src/mongo/dbtests/documentsourcetests.cpp", 
            "src/mongo/s/commands_public.cpp", 
            "src/mongo/dbtests/pipelinetests.cpp", 
            "src/mongo/dbtests/accumulatortests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Document::toBson() const", 
        "object": "src/mongo/db/pipeline/document.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp", 
            "src/mongo/s/commands_public.cpp", 
            "src/mongo/dbtests/documenttests.cpp", 
            "src/mongo/dbtests/expressiontests.cpp", 
            "src/mongo/dbtests/accumulatortests.cpp", 
            "src/mongo/db/commands/pipeline_command.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DocumentStorage::appendField(mongo::StringData)", 
        "object": "src/mongo/db/pipeline/document.cpp", 
        "used_by": [
            "src/mongo/s/commands_public.cpp", 
            "src/mongo/dbtests/documenttests.cpp", 
            "src/mongo/dbtests/expressiontests.cpp", 
            "src/mongo/dbtests/accumulatortests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Document::Document(mongo::BSONObj const&)", 
        "object": "src/mongo/db/pipeline/document.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp", 
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Document::toString() const", 
        "object": "src/mongo/db/pipeline/document.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Document::hash_combine(unsigned long&) const", 
        "object": "src/mongo/db/pipeline/document.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Document::toBsonWithMetaData() const", 
        "object": "src/mongo/db/pipeline/document.cpp", 
        "used_by": [
            "src/mongo/db/commands/pipeline_command.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Document::deserializeForSorter(mongo::BufReader&, mongo::Document::SorterDeserializeSettings const&)", 
        "object": "src/mongo/db/pipeline/document.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Document::compare(mongo::Document const&, mongo::Document const&)", 
        "object": "src/mongo/db/pipeline/document.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Document::getNestedField(mongo::FieldPath const&, std::vector<mongo::Position, std::allocator<mongo::Position> >*) const", 
        "object": "src/mongo/db/pipeline/document.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::AccumulatorMinMax::createMax()", 
        "object": "src/mongo/db/pipeline/accumulator_min_max.cpp", 
        "used_by": [
            "src/mongo/dbtests/accumulatortests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::AccumulatorMinMax::createMin()", 
        "object": "src/mongo/db/pipeline/accumulator_min_max.cpp", 
        "used_by": [
            "src/mongo/dbtests/accumulatortests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DocumentSourceGeoNear::create(boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/db/pipeline/document_source_geo_near.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DocumentSourceBsonArray::create(mongo::BSONObj const&, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/db/pipeline/document_source_bson_array.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DocumentSourceMergeCursors::create(std::vector<std::pair<mongo::ConnectionString, long long>, std::allocator<std::pair<mongo::ConnectionString, long long> > > const&, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/db/pipeline/document_source_merge_cursors.cpp", 
        "used_by": [
            "src/mongo/s/commands_public.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Expression::ObjectCtx::ObjectCtx(int)", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExpressionConstant::parse(mongo::BSONElement, mongo::VariablesParseState const&)", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExpressionNary::addOperand(boost::intrusive_ptr<mongo::Expression> const&)", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExpressionFieldPath::create(std::string const&)", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Expression::parseOperand(mongo::BSONElement, mongo::VariablesParseState const&)", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExpressionNary::optimize()", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "vtable for mongo::ExpressionAdd", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExpressionCoerceToBool::create(boost::intrusive_ptr<mongo::Expression> const&)", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "vtable for mongo::ExpressionNary", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExpressionObject::addField(mongo::FieldPath const&, boost::intrusive_ptr<mongo::Expression> const&)", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "typeinfo for mongo::ExpressionNary", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExpressionObject::addToDocument(mongo::MutableDocument&, mongo::Document const&, mongo::Variables*) const", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExpressionConstant::create(mongo::Value const&)", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExpressionNary::serialize(bool) const", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "vtable for mongo::ExpressionAnd", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExpressionObject::includePath(std::string const&)", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Expression::parseObject(mongo::BSONObj, mongo::Expression::ObjectCtx*, mongo::VariablesParseState const&)", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExpressionObject::create()", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExpressionObject::createRoot()", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Expression::parseExpression(mongo::BSONElement, mongo::VariablesParseState const&)", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ExpressionNary::addDependencies(std::set<std::string, std::less<std::string>, std::allocator<std::string> >&, std::vector<std::string, std::allocator<std::string> >*) const", 
        "object": "src/mongo/db/pipeline/expression.cpp", 
        "used_by": [
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::compare(mongo::Value const&, mongo::Value const&)", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp", 
            "src/mongo/dbtests/documenttests.cpp", 
            "src/mongo/dbtests/pipelinetests.cpp", 
            "src/mongo/dbtests/expressiontests.cpp", 
            "src/mongo/dbtests/accumulatortests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::operator<<(mongo::BSONObjBuilderValueStream&, mongo::Value const&)", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/db/commands/pipeline_command.cpp", 
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::operator[](mongo::StringData) const", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp", 
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ValueStorage::putString(mongo::StringData const&)", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp", 
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::hash_combine(unsigned long&) const", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::deserializeForSorter(mongo::BufReader&, mongo::Value::SorterDeserializeSettings const&)", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ValueStorage::putDocument(mongo::Document const&)", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/s/commands_public.cpp", 
            "src/mongo/dbtests/documenttests.cpp", 
            "src/mongo/dbtests/expressiontests.cpp", 
            "src/mongo/dbtests/accumulatortests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::coerceToLong() const", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::getWidestNumeric(mongo::BSONType, mongo::BSONType)", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::coerceToDate() const", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::addToBsonArray(mongo::BSONArrayBuilder*) const", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::serializeForSorter(mongo::_BufBuilder<mongo::TrivialAllocator>&) const", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::Value(mongo::BSONArray const&)", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::getDocument() const", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp", 
            "src/mongo/dbtests/documenttests.cpp", 
            "src/mongo/dbtests/expressiontests.cpp", 
            "src/mongo/dbtests/accumulatortests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::getDouble() const", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp", 
            "src/mongo/dbtests/accumulatortests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::coerceToBool() const", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::coerceToTimestamp() const", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::operator[](unsigned long) const", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::coerceToString() const", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::Value(mongo::BSONElement const&)", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/s/commands_public.cpp", 
            "src/mongo/dbtests/documenttests.cpp", 
            "src/mongo/dbtests/expressiontests.cpp", 
            "src/mongo/dbtests/pipelinetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::operator<<(std::ostream&, mongo::Value const&)", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp", 
            "src/mongo/dbtests/pipelinetests.cpp", 
            "src/mongo/dbtests/accumulatortests.cpp", 
            "src/mongo/dbtests/documenttests.cpp", 
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::addToBsonObj(mongo::BSONObjBuilder*, mongo::StringData) const", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp", 
            "src/mongo/dbtests/accumulatortests.cpp", 
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::coerceToInt() const", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::coerceToDouble() const", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ValueStorage::putRegEx(mongo::BSONRegEx const&)", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::ValueStorage::putVector(mongo::RCVector const*)", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/s/commands_public.cpp", 
            "src/mongo/dbtests/documenttests.cpp", 
            "src/mongo/dbtests/expressiontests.cpp", 
            "src/mongo/db/commands/pipeline_command.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::Value(mongo::BSONObj const&)", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Value::toString() const", 
        "object": "src/mongo/db/pipeline/value.cpp", 
        "used_by": [
            "src/mongo/dbtests/documenttests.cpp", 
            "src/mongo/dbtests/expressiontests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::PipelineD::prepareCursorSource(boost::intrusive_ptr<mongo::Pipeline> const&, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/db/pipeline/pipeline_d.cpp", 
        "used_by": [
            "src/mongo/db/commands/pipeline_command.cpp"
        ]
    }, 
    {
        "symbol": "mongo::AccumulatorSum::create()", 
        "object": "src/mongo/db/pipeline/accumulator_sum.cpp", 
        "used_by": [
            "src/mongo/dbtests/accumulatortests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::BSONObjExternalSorter::BSONObjExternalSorter(mongo::ExternalSortComparison const*, long)", 
        "object": "src/mongo/db/extsort.cpp", 
        "used_by": [
            "src/mongo/db/index/btree_based_builder.cpp", 
            "src/mongo/dbtests/extsorttests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DocumentSourceGroup::createFromBson(mongo::BSONElement, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/db/pipeline/document_source_group.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DocumentSourceSort::createFromBson(mongo::BSONElement, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp"
        ]
    }, 
    {
        "symbol": "typeinfo for mongo::DocumentSourceSort", 
        "object": "src/mongo/db/pipeline/document_source_sort.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::AccumulatorLast::create()", 
        "object": "src/mongo/db/pipeline/accumulator_last.cpp", 
        "used_by": [
            "src/mongo/dbtests/accumulatortests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DocumentSourceMatch::redactSafePortion() const", 
        "object": "src/mongo/db/pipeline/document_source_match.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DocumentSourceMatch::getQuery() const", 
        "object": "src/mongo/db/pipeline/document_source_match.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DocumentSourceMatch::createFromBson(mongo::BSONElement, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/db/pipeline/document_source_match.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp"
        ]
    }, 
    {
        "symbol": "typeinfo for mongo::DocumentSourceMatch", 
        "object": "src/mongo/db/pipeline/document_source_match.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DocumentSourceCursor::create(std::string const&, long long, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DocumentSourceCursor::getLimit() const", 
        "object": "src/mongo/db/pipeline/document_source_cursor.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::AccumulatorAvg::create()", 
        "object": "src/mongo/db/pipeline/accumulator_avg.cpp", 
        "used_by": [
            "src/mongo/dbtests/accumulatortests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DocumentSourceProject::createFromBson(mongo::BSONElement, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/db/pipeline/document_source_project.cpp", 
        "used_by": [
            "src/mongo/dbtests/documentsourcetests.cpp"
        ]
    }, 
    {
        "symbol": "mongo::DocumentSourceCommandShards::create(std::vector<mongo::Strategy::CommandResult, std::allocator<mongo::Strategy::CommandResult> > const&, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/db/pipeline/document_source_command_shards.cpp", 
        "used_by": [
            "src/mongo/s/commands_public.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Pipeline::addRequiredPrivileges(mongo::Command*, std::string const&, mongo::BSONObj, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> >*)", 
        "object": "src/mongo/db/pipeline/pipeline.cpp", 
        "used_by": [
            "src/mongo/s/commands_public.cpp", 
            "src/mongo/db/commands/pipeline_command.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Pipeline::addInitialSource(boost::intrusive_ptr<mongo::DocumentSource>)", 
        "object": "src/mongo/db/pipeline/pipeline.cpp", 
        "used_by": [
            "src/mongo/s/commands_public.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Pipeline::splitForSharded()", 
        "object": "src/mongo/db/pipeline/pipeline.cpp", 
        "used_by": [
            "src/mongo/dbtests/pipelinetests.cpp", 
            "src/mongo/s/commands_public.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Pipeline::run(mongo::BSONObjBuilder&)", 
        "object": "src/mongo/db/pipeline/pipeline.cpp", 
        "used_by": [
            "src/mongo/s/commands_public.cpp", 
            "src/mongo/db/commands/pipeline_command.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Pipeline::serialize() const", 
        "object": "src/mongo/db/pipeline/pipeline.cpp", 
        "used_by": [
            "src/mongo/dbtests/pipelinetests.cpp", 
            "src/mongo/s/commands_public.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Pipeline::stitch()", 
        "object": "src/mongo/db/pipeline/pipeline.cpp", 
        "used_by": [
            "src/mongo/s/commands_public.cpp", 
            "src/mongo/db/commands/pipeline_command.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Pipeline::parseCommand(std::string&, mongo::BSONObj const&, boost::intrusive_ptr<mongo::ExpressionContext> const&)", 
        "object": "src/mongo/db/pipeline/pipeline.cpp", 
        "used_by": [
            "src/mongo/dbtests/pipelinetests.cpp", 
            "src/mongo/s/commands_public.cpp", 
            "src/mongo/db/commands/pipeline_command.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Pipeline::canRunInMongos() const", 
        "object": "src/mongo/db/pipeline/pipeline.cpp", 
        "used_by": [
            "src/mongo/s/commands_public.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Pipeline::getInitialQuery() const", 
        "object": "src/mongo/db/pipeline/pipeline.cpp", 
        "used_by": [
            "src/mongo/s/commands_public.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Pipeline::writeExplainOps() const", 
        "object": "src/mongo/db/pipeline/pipeline.cpp", 
        "used_by": [
            "src/mongo/s/commands_public.cpp", 
            "src/mongo/db/commands/pipeline_command.cpp"
        ]
    }, 
    {
        "symbol": "mongo::Pipeline::commandName", 
        "object": "src/mongo/db/pipeline/pipeline.cpp", 
        "used_by": [
            "src/mongo/s/commands_public.cpp", 
            "src/mongo/db/commands/pipeline_command.cpp"
        ]
    }
]